/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);

	var _react = __webpack_require__(298);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(330);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _videoContainer = __webpack_require__(468);

	var _videoContainer2 = _interopRequireDefault(_videoContainer);

	var _videojsNleControls = __webpack_require__(471);

	var _videojsNleControls2 = _interopRequireDefault(_videojsNleControls);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Containers


	// React
	var plugins = [{
	  plugin: _videojsNleControls2.default,
	  name: 'nleControls',
	  options: {
	    framerate: 24.0,
	    smpteTimecode: true,
	    frameControls: true
	  }
	}];

	// VJS Options


	// VJS Plugins


	// Babel
	var playerOptions = {
	  "controls": true,
	  "inactivityTimeout": false,
	  "fluid": true
	};

	_reactDom2.default.render(_react2.default.createElement(_videoContainer2.default, { fileUrl: '/Users/seanm/Box Sync/Default Sync Folder/mediate/annotate_ui_mockup/media/demo.mp4', mime: 'video/webm', playerOptions: playerOptions, plugins: plugins }), // These props could also be received from a Redux store - just set the store up here
	document.getElementById('test'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	__webpack_require__(2);

	__webpack_require__(293);

	__webpack_require__(295);

	/* eslint max-len: 0 */

	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel-polyfill is allowed");
	}
	global._babelPolyfill = true;

	// Should be removed in the next major release:

	var DEFINE_PROPERTY = "defineProperty";
	function define(O, key, value) {
	  O[key] || Object[DEFINE_PROPERTY](O, key, {
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}

	define(String.prototype, "padLeft", "".padStart);
	define(String.prototype, "padRight", "".padEnd);

	"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
	  [][key] && define(Array, key, Function.call.bind([][key]));
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(52);
	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(55);
	__webpack_require__(57);
	__webpack_require__(60);
	__webpack_require__(61);
	__webpack_require__(62);
	__webpack_require__(63);
	__webpack_require__(64);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(68);
	__webpack_require__(70);
	__webpack_require__(72);
	__webpack_require__(74);
	__webpack_require__(76);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(85);
	__webpack_require__(87);
	__webpack_require__(89);
	__webpack_require__(92);
	__webpack_require__(93);
	__webpack_require__(94);
	__webpack_require__(95);
	__webpack_require__(97);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(103);
	__webpack_require__(105);
	__webpack_require__(106);
	__webpack_require__(107);
	__webpack_require__(109);
	__webpack_require__(110);
	__webpack_require__(111);
	__webpack_require__(113);
	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(136);
	__webpack_require__(137);
	__webpack_require__(138);
	__webpack_require__(139);
	__webpack_require__(141);
	__webpack_require__(142);
	__webpack_require__(143);
	__webpack_require__(144);
	__webpack_require__(145);
	__webpack_require__(146);
	__webpack_require__(147);
	__webpack_require__(148);
	__webpack_require__(149);
	__webpack_require__(150);
	__webpack_require__(151);
	__webpack_require__(152);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(156);
	__webpack_require__(157);
	__webpack_require__(159);
	__webpack_require__(160);
	__webpack_require__(166);
	__webpack_require__(167);
	__webpack_require__(169);
	__webpack_require__(170);
	__webpack_require__(171);
	__webpack_require__(175);
	__webpack_require__(176);
	__webpack_require__(177);
	__webpack_require__(178);
	__webpack_require__(179);
	__webpack_require__(181);
	__webpack_require__(182);
	__webpack_require__(183);
	__webpack_require__(184);
	__webpack_require__(187);
	__webpack_require__(189);
	__webpack_require__(190);
	__webpack_require__(191);
	__webpack_require__(193);
	__webpack_require__(195);
	__webpack_require__(197);
	__webpack_require__(198);
	__webpack_require__(199);
	__webpack_require__(201);
	__webpack_require__(202);
	__webpack_require__(203);
	__webpack_require__(204);
	__webpack_require__(211);
	__webpack_require__(214);
	__webpack_require__(215);
	__webpack_require__(217);
	__webpack_require__(218);
	__webpack_require__(221);
	__webpack_require__(222);
	__webpack_require__(224);
	__webpack_require__(225);
	__webpack_require__(226);
	__webpack_require__(227);
	__webpack_require__(228);
	__webpack_require__(229);
	__webpack_require__(230);
	__webpack_require__(231);
	__webpack_require__(232);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(235);
	__webpack_require__(236);
	__webpack_require__(237);
	__webpack_require__(238);
	__webpack_require__(239);
	__webpack_require__(240);
	__webpack_require__(241);
	__webpack_require__(242);
	__webpack_require__(244);
	__webpack_require__(245);
	__webpack_require__(246);
	__webpack_require__(247);
	__webpack_require__(248);
	__webpack_require__(249);
	__webpack_require__(251);
	__webpack_require__(252);
	__webpack_require__(253);
	__webpack_require__(254);
	__webpack_require__(255);
	__webpack_require__(256);
	__webpack_require__(257);
	__webpack_require__(258);
	__webpack_require__(260);
	__webpack_require__(261);
	__webpack_require__(263);
	__webpack_require__(264);
	__webpack_require__(265);
	__webpack_require__(266);
	__webpack_require__(269);
	__webpack_require__(270);
	__webpack_require__(271);
	__webpack_require__(272);
	__webpack_require__(273);
	__webpack_require__(274);
	__webpack_require__(275);
	__webpack_require__(276);
	__webpack_require__(278);
	__webpack_require__(279);
	__webpack_require__(280);
	__webpack_require__(281);
	__webpack_require__(282);
	__webpack_require__(283);
	__webpack_require__(284);
	__webpack_require__(285);
	__webpack_require__(286);
	__webpack_require__(287);
	__webpack_require__(288);
	__webpack_require__(291);
	__webpack_require__(292);
	module.exports = __webpack_require__(9);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(4)
	  , has            = __webpack_require__(5)
	  , DESCRIPTORS    = __webpack_require__(6)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(18)
	  , META           = __webpack_require__(22).KEY
	  , $fails         = __webpack_require__(7)
	  , shared         = __webpack_require__(23)
	  , setToStringTag = __webpack_require__(24)
	  , uid            = __webpack_require__(19)
	  , wks            = __webpack_require__(25)
	  , wksExt         = __webpack_require__(26)
	  , wksDefine      = __webpack_require__(27)
	  , keyOf          = __webpack_require__(29)
	  , enumKeys       = __webpack_require__(42)
	  , isArray        = __webpack_require__(45)
	  , anObject       = __webpack_require__(12)
	  , toIObject      = __webpack_require__(32)
	  , toPrimitive    = __webpack_require__(16)
	  , createDesc     = __webpack_require__(17)
	  , _create        = __webpack_require__(46)
	  , gOPNExt        = __webpack_require__(49)
	  , $GOPD          = __webpack_require__(51)
	  , $DP            = __webpack_require__(11)
	  , $keys          = __webpack_require__(30)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;

	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });

	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(50).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(44).f  = $propertyIsEnumerable;
	  __webpack_require__(43).f = $getOwnPropertySymbols;

	  if(DESCRIPTORS && !__webpack_require__(28)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});

	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 4 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 5 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(7)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , core      = __webpack_require__(9)
	  , hide      = __webpack_require__(10)
	  , redefine  = __webpack_require__(18)
	  , ctx       = __webpack_require__(20)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
	    , key, own, out, exp;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if(target)redefine(target, key, out, type & $export.U);
	    // export
	    if(exports[key] != out)hide(exports, key, exp);
	    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 9 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(11)
	  , createDesc = __webpack_require__(17);
	module.exports = __webpack_require__(6) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(12)
	  , IE8_DOM_DEFINE = __webpack_require__(14)
	  , toPrimitive    = __webpack_require__(16)
	  , dP             = Object.defineProperty;

	exports.f = __webpack_require__(6) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(6) && !__webpack_require__(7)(function(){
	  return Object.defineProperty(__webpack_require__(15)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13)
	  , document = __webpack_require__(4).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(13);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , hide      = __webpack_require__(10)
	  , has       = __webpack_require__(5)
	  , SRC       = __webpack_require__(19)('src')
	  , TO_STRING = 'toString'
	  , $toString = Function[TO_STRING]
	  , TPL       = ('' + $toString).split(TO_STRING);

	__webpack_require__(9).inspectSource = function(it){
	  return $toString.call(it);
	};

	(module.exports = function(O, key, val, safe){
	  var isFunction = typeof val == 'function';
	  if(isFunction)has(val, 'name') || hide(val, 'name', key);
	  if(O[key] === val)return;
	  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if(O === global){
	    O[key] = val;
	  } else {
	    if(!safe){
	      delete O[key];
	      hide(O, key, val);
	    } else {
	      if(O[key])O[key] = val;
	      else hide(O, key, val);
	    }
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString(){
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

/***/ },
/* 19 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(21);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(19)('meta')
	  , isObject = __webpack_require__(13)
	  , has      = __webpack_require__(5)
	  , setDesc  = __webpack_require__(11).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(7)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(11).f
	  , has = __webpack_require__(5)
	  , TAG = __webpack_require__(25)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(23)('wks')
	  , uid        = __webpack_require__(19)
	  , Symbol     = __webpack_require__(4).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(25);

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(4)
	  , core           = __webpack_require__(9)
	  , LIBRARY        = __webpack_require__(28)
	  , wksExt         = __webpack_require__(26)
	  , defineProperty = __webpack_require__(11).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = false;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(30)
	  , toIObject = __webpack_require__(32);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(31)
	  , enumBugKeys = __webpack_require__(41);

	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(5)
	  , toIObject    = __webpack_require__(32)
	  , arrayIndexOf = __webpack_require__(36)(false)
	  , IE_PROTO     = __webpack_require__(40)('IE_PROTO');

	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(33)
	  , defined = __webpack_require__(35);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(34);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 34 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(32)
	  , toLength  = __webpack_require__(37)
	  , toIndex   = __webpack_require__(39);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(38)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 38 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(23)('keys')
	  , uid    = __webpack_require__(19);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(30)
	  , gOPS    = __webpack_require__(43)
	  , pIE     = __webpack_require__(44);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 44 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(34);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(12)
	  , dPs         = __webpack_require__(47)
	  , enumBugKeys = __webpack_require__(41)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(15)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(48).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(11)
	  , anObject = __webpack_require__(12)
	  , getKeys  = __webpack_require__(30);

	module.exports = __webpack_require__(6) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(4).document && document.documentElement;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(32)
	  , gOPN      = __webpack_require__(50).f
	  , toString  = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};

	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(31)
	  , hiddenKeys = __webpack_require__(41).concat('length', 'prototype');

	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(44)
	  , createDesc     = __webpack_require__(17)
	  , toIObject      = __webpack_require__(32)
	  , toPrimitive    = __webpack_require__(16)
	  , has            = __webpack_require__(5)
	  , IE8_DOM_DEFINE = __webpack_require__(14)
	  , gOPD           = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(6) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(46)});

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperty: __webpack_require__(11).f});

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperties: __webpack_require__(47)});

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject                 = __webpack_require__(32)
	  , $getOwnPropertyDescriptor = __webpack_require__(51).f;

	__webpack_require__(56)('getOwnPropertyDescriptor', function(){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(8)
	  , core    = __webpack_require__(9)
	  , fails   = __webpack_require__(7);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(58)
	  , $getPrototypeOf = __webpack_require__(59);

	__webpack_require__(56)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(35);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(5)
	  , toObject    = __webpack_require__(58)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(58)
	  , $keys    = __webpack_require__(30);

	__webpack_require__(56)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(56)('getOwnPropertyNames', function(){
	  return __webpack_require__(49).f;
	});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;

	__webpack_require__(56)('freeze', function($freeze){
	  return function freeze(it){
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;

	__webpack_require__(56)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;

	__webpack_require__(56)('preventExtensions', function($preventExtensions){
	  return function preventExtensions(it){
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(13);

	__webpack_require__(56)('isFrozen', function($isFrozen){
	  return function isFrozen(it){
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(13);

	__webpack_require__(56)('isSealed', function($isSealed){
	  return function isSealed(it){
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(13);

	__webpack_require__(56)('isExtensible', function($isExtensible){
	  return function isExtensible(it){
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(8);

	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(69)});

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(30)
	  , gOPS     = __webpack_require__(43)
	  , pIE      = __webpack_require__(44)
	  , toObject = __webpack_require__(58)
	  , IObject  = __webpack_require__(33)
	  , $assign  = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(7)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', {is: __webpack_require__(71)});

/***/ },
/* 71 */
/***/ function(module, exports) {

	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y){
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(73).set});

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(13)
	  , anObject = __webpack_require__(12);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(20)(Function.call, __webpack_require__(51).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(75)
	  , test    = {};
	test[__webpack_require__(25)('toStringTag')] = 'z';
	if(test + '' != '[object z]'){
	  __webpack_require__(18)(Object.prototype, 'toString', function toString(){
	    return '[object ' + classof(this) + ']';
	  }, true);
	}

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(34)
	  , TAG = __webpack_require__(25)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(8);

	$export($export.P, 'Function', {bind: __webpack_require__(77)});

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction  = __webpack_require__(21)
	  , isObject   = __webpack_require__(13)
	  , invoke     = __webpack_require__(78)
	  , arraySlice = [].slice
	  , factories  = {};

	var construct = function(F, len, args){
	  if(!(len in factories)){
	    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};

	module.exports = Function.bind || function bind(that /*, args... */){
	  var fn       = aFunction(this)
	    , partArgs = arraySlice.call(arguments, 1);
	  var bound = function(/* args... */){
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if(isObject(fn.prototype))bound.prototype = fn.prototype;
	  return bound;
	};

/***/ },
/* 78 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(11).f
	  , createDesc = __webpack_require__(17)
	  , has        = __webpack_require__(5)
	  , FProto     = Function.prototype
	  , nameRE     = /^\s*function ([^ (]*)/
	  , NAME       = 'name';

	var isExtensible = Object.isExtensible || function(){
	  return true;
	};

	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(6) && dP(FProto, NAME, {
	  configurable: true,
	  get: function(){
	    try {
	      var that = this
	        , name = ('' + that).match(nameRE)[1];
	      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
	      return name;
	    } catch(e){
	      return '';
	    }
	  }
	});

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var isObject       = __webpack_require__(13)
	  , getPrototypeOf = __webpack_require__(59)
	  , HAS_INSTANCE   = __webpack_require__(25)('hasInstance')
	  , FunctionProto  = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if(!(HAS_INSTANCE in FunctionProto))__webpack_require__(11).f(FunctionProto, HAS_INSTANCE, {value: function(O){
	  if(typeof this != 'function' || !isObject(O))return false;
	  if(!isObject(this.prototype))return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
	  return false;
	}});

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , $parseInt = __webpack_require__(82);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(4).parseInt
	  , $trim     = __webpack_require__(83).trim
	  , ws        = __webpack_require__(84)
	  , hex       = /^[\-+]?0[xX]/;

	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , defined = __webpack_require__(35)
	  , fails   = __webpack_require__(7)
	  , spaces  = __webpack_require__(84)
	  , space   = '[' + spaces + ']'
	  , non     = '\u200b\u0085'
	  , ltrim   = RegExp('^' + space + space + '*')
	  , rtrim   = RegExp(space + space + '*$');

	var exporter = function(KEY, exec, ALIAS){
	  var exp   = {};
	  var FORCE = fails(function(){
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if(ALIAS)exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};

	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function(string, TYPE){
	  string = String(defined(string));
	  if(TYPE & 1)string = string.replace(ltrim, '');
	  if(TYPE & 2)string = string.replace(rtrim, '');
	  return string;
	};

	module.exports = exporter;

/***/ },
/* 84 */
/***/ function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(8)
	  , $parseFloat = __webpack_require__(86);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(4).parseFloat
	  , $trim       = __webpack_require__(83).trim;

	module.exports = 1 / $parseFloat(__webpack_require__(84) + '-0') !== -Infinity ? function parseFloat(str){
	  var string = $trim(String(str), 3)
	    , result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(4)
	  , has               = __webpack_require__(5)
	  , cof               = __webpack_require__(34)
	  , inheritIfRequired = __webpack_require__(88)
	  , toPrimitive       = __webpack_require__(16)
	  , fails             = __webpack_require__(7)
	  , gOPN              = __webpack_require__(50).f
	  , gOPD              = __webpack_require__(51).f
	  , dP                = __webpack_require__(11).f
	  , $trim             = __webpack_require__(83).trim
	  , NUMBER            = 'Number'
	  , $Number           = global[NUMBER]
	  , Base              = $Number
	  , proto             = $Number.prototype
	  // Opera ~12 has broken Object#toString
	  , BROKEN_COF        = cof(__webpack_require__(46)(proto)) == NUMBER
	  , TRIM              = 'trim' in String.prototype;

	// 7.1.3 ToNumber(argument)
	var toNumber = function(argument){
	  var it = toPrimitive(argument, false);
	  if(typeof it == 'string' && it.length > 2){
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0)
	      , third, radix, maxCode;
	    if(first === 43 || first === 45){
	      third = it.charCodeAt(2);
	      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if(first === 48){
	      switch(it.charCodeAt(1)){
	        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default : return +it;
	      }
	      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if(code < 48 || code > maxCode)return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
	  $Number = function Number(value){
	    var it = arguments.length < 1 ? 0 : value
	      , that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
	        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for(var keys = __webpack_require__(6) ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys.length > j; j++){
	    if(has(Base, key = keys[j]) && !has($Number, key)){
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(18)(global, NUMBER, $Number);
	}

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var isObject       = __webpack_require__(13)
	  , setPrototypeOf = __webpack_require__(73).set;
	module.exports = function(that, target, C){
	  var P, S = target.constructor;
	  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
	    setPrototypeOf(that, P);
	  } return that;
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , toInteger    = __webpack_require__(38)
	  , aNumberValue = __webpack_require__(90)
	  , repeat       = __webpack_require__(91)
	  , $toFixed     = 1..toFixed
	  , floor        = Math.floor
	  , data         = [0, 0, 0, 0, 0, 0]
	  , ERROR        = 'Number.toFixed: incorrect invocation!'
	  , ZERO         = '0';

	var multiply = function(n, c){
	  var i  = -1
	    , c2 = c;
	  while(++i < 6){
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function(n){
	  var i = 6
	    , c = 0;
	  while(--i >= 0){
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function(){
	  var i = 6
	    , s = '';
	  while(--i >= 0){
	    if(s !== '' || i === 0 || data[i] !== 0){
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function(x, n, acc){
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function(x){
	  var n  = 0
	    , x2 = x;
	  while(x2 >= 4096){
	    n += 12;
	    x2 /= 4096;
	  }
	  while(x2 >= 2){
	    n  += 1;
	    x2 /= 2;
	  } return n;
	};

	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128..toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(7)(function(){
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits){
	    var x = aNumberValue(this, ERROR)
	      , f = toInteger(fractionDigits)
	      , s = ''
	      , m = ZERO
	      , e, z, j, k;
	    if(f < 0 || f > 20)throw RangeError(ERROR);
	    if(x != x)return 'NaN';
	    if(x <= -1e21 || x >= 1e21)return String(x);
	    if(x < 0){
	      s = '-';
	      x = -x;
	    }
	    if(x > 1e-21){
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if(e > 0){
	        multiply(0, z);
	        j = f;
	        while(j >= 7){
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while(j >= 23){
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if(f > 0){
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(34);
	module.exports = function(it, msg){
	  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
	  return +it;
	};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(35);

	module.exports = function repeat(count){
	  var str = String(defined(this))
	    , res = ''
	    , n   = toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , $fails       = __webpack_require__(7)
	  , aNumberValue = __webpack_require__(90)
	  , $toPrecision = 1..toPrecision;

	$export($export.P + $export.F * ($fails(function(){
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function(){
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision){
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
	  }
	});

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(8);

	$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export   = __webpack_require__(8)
	  , _isFinite = __webpack_require__(4).isFinite;

	$export($export.S, 'Number', {
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(8);

	$export($export.S, 'Number', {isInteger: __webpack_require__(96)});

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(13)
	  , floor    = Math.floor;
	module.exports = function isInteger(it){
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(8);

	$export($export.S, 'Number', {
	  isNaN: function isNaN(number){
	    return number != number;
	  }
	});

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.5 Number.isSafeInteger(number)
	var $export   = __webpack_require__(8)
	  , isInteger = __webpack_require__(96)
	  , abs       = Math.abs;

	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number){
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(8);

	$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(8);

	$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(8)
	  , $parseFloat = __webpack_require__(86);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , $parseInt = __webpack_require__(82);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(8)
	  , log1p   = __webpack_require__(104)
	  , sqrt    = Math.sqrt
	  , $acosh  = Math.acosh;

	$export($export.S + $export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x){
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

/***/ },
/* 104 */
/***/ function(module, exports) {

	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x){
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(8)
	  , $asinh  = Math.asinh;

	function asinh(x){
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}

	// Tor Browser bug: Math.asinh(0) -> -0 
	$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(8)
	  , $atanh  = Math.atanh;

	// Tor Browser bug: Math.atanh(-0) -> 0 
	$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x){
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(8)
	  , sign    = __webpack_require__(108);

	$export($export.S, 'Math', {
	  cbrt: function cbrt(x){
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

/***/ },
/* 108 */
/***/ function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x){
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(8);

	$export($export.S, 'Math', {
	  clz32: function clz32(x){
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(8)
	  , exp     = Math.exp;

	$export($export.S, 'Math', {
	  cosh: function cosh(x){
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(8)
	  , $expm1  = __webpack_require__(112);

	$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});

/***/ },
/* 112 */
/***/ function(module, exports) {

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	module.exports = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x){
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var $export   = __webpack_require__(8)
	  , sign      = __webpack_require__(108)
	  , pow       = Math.pow
	  , EPSILON   = pow(2, -52)
	  , EPSILON32 = pow(2, -23)
	  , MAX32     = pow(2, 127) * (2 - EPSILON32)
	  , MIN32     = pow(2, -126);

	var roundTiesToEven = function(n){
	  return n + 1 / EPSILON - 1 / EPSILON;
	};


	$export($export.S, 'Math', {
	  fround: function fround(x){
	    var $abs  = Math.abs(x)
	      , $sign = sign(x)
	      , a, result;
	    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if(result > MAX32 || result != result)return $sign * Infinity;
	    return $sign * result;
	  }
	});

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(8)
	  , abs     = Math.abs;

	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
	    var sum  = 0
	      , i    = 0
	      , aLen = arguments.length
	      , larg = 0
	      , arg, div;
	    while(i < aLen){
	      arg = abs(arguments[i++]);
	      if(larg < arg){
	        div  = larg / arg;
	        sum  = sum * div * div + 1;
	        larg = arg;
	      } else if(arg > 0){
	        div  = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(8)
	  , $imul   = Math.imul;

	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y){
	    var UINT16 = 0xffff
	      , xn = +x
	      , yn = +y
	      , xl = UINT16 & xn
	      , yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(8);

	$export($export.S, 'Math', {
	  log10: function log10(x){
	    return Math.log(x) / Math.LN10;
	  }
	});

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(8);

	$export($export.S, 'Math', {log1p: __webpack_require__(104)});

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(8);

	$export($export.S, 'Math', {
	  log2: function log2(x){
	    return Math.log(x) / Math.LN2;
	  }
	});

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(8);

	$export($export.S, 'Math', {sign: __webpack_require__(108)});

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(8)
	  , expm1   = __webpack_require__(112)
	  , exp     = Math.exp;

	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x){
	    return Math.abs(x = +x) < 1
	      ? (expm1(x) - expm1(-x)) / 2
	      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(8)
	  , expm1   = __webpack_require__(112)
	  , exp     = Math.exp;

	$export($export.S, 'Math', {
	  tanh: function tanh(x){
	    var a = expm1(x = +x)
	      , b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(8);

	$export($export.S, 'Math', {
	  trunc: function trunc(it){
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var $export        = __webpack_require__(8)
	  , toIndex        = __webpack_require__(39)
	  , fromCharCode   = String.fromCharCode
	  , $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
	    var res  = []
	      , aLen = arguments.length
	      , i    = 0
	      , code;
	    while(aLen > i){
	      code = +arguments[i++];
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , toIObject = __webpack_require__(32)
	  , toLength  = __webpack_require__(37);

	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite){
	    var tpl  = toIObject(callSite.raw)
	      , len  = toLength(tpl.length)
	      , aLen = arguments.length
	      , res  = []
	      , i    = 0;
	    while(len > i){
	      res.push(String(tpl[i++]));
	      if(i < aLen)res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(83)('trim', function($trim){
	  return function trim(){
	    return $trim(this, 3);
	  };
	});

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(127)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(128)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(35);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(28)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(18)
	  , hide           = __webpack_require__(10)
	  , has            = __webpack_require__(5)
	  , Iterators      = __webpack_require__(129)
	  , $iterCreate    = __webpack_require__(130)
	  , setToStringTag = __webpack_require__(24)
	  , getPrototypeOf = __webpack_require__(59)
	  , ITERATOR       = __webpack_require__(25)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 129 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(46)
	  , descriptor     = __webpack_require__(17)
	  , setToStringTag = __webpack_require__(24)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(10)(IteratorPrototype, __webpack_require__(25)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $at     = __webpack_require__(127)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export   = __webpack_require__(8)
	  , toLength  = __webpack_require__(37)
	  , context   = __webpack_require__(133)
	  , ENDS_WITH = 'endsWith'
	  , $endsWith = ''[ENDS_WITH];

	$export($export.P + $export.F * __webpack_require__(135)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    var that = context(this, searchString, ENDS_WITH)
	      , endPosition = arguments.length > 1 ? arguments[1] : undefined
	      , len    = toLength(that.length)
	      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
	      , search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(134)
	  , defined  = __webpack_require__(35);

	module.exports = function(that, searchString, NAME){
	  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(13)
	  , cof      = __webpack_require__(34)
	  , MATCH    = __webpack_require__(25)('match');
	module.exports = function(it){
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(25)('match');
	module.exports = function(KEY){
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch(e){
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch(f){ /* empty */ }
	  } return true;
	};

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export  = __webpack_require__(8)
	  , context  = __webpack_require__(133)
	  , INCLUDES = 'includes';

	$export($export.P + $export.F * __webpack_require__(135)(INCLUDES), 'String', {
	  includes: function includes(searchString /*, position = 0 */){
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);

	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(91)
	});

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	var $export     = __webpack_require__(8)
	  , toLength    = __webpack_require__(37)
	  , context     = __webpack_require__(133)
	  , STARTS_WITH = 'startsWith'
	  , $startsWith = ''[STARTS_WITH];

	$export($export.P + $export.F * __webpack_require__(135)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /*, position = 0 */){
	    var that   = context(this, searchString, STARTS_WITH)
	      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
	      , search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	__webpack_require__(140)('anchor', function(createHTML){
	  return function anchor(name){
	    return createHTML(this, 'a', 'name', name);
	  }
	});

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , fails   = __webpack_require__(7)
	  , defined = __webpack_require__(35)
	  , quot    = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function(string, tag, attribute, value) {
	  var S  = String(defined(string))
	    , p1 = '<' + tag;
	  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function(NAME, exec){
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function(){
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	__webpack_require__(140)('big', function(createHTML){
	  return function big(){
	    return createHTML(this, 'big', '', '');
	  }
	});

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	__webpack_require__(140)('blink', function(createHTML){
	  return function blink(){
	    return createHTML(this, 'blink', '', '');
	  }
	});

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	__webpack_require__(140)('bold', function(createHTML){
	  return function bold(){
	    return createHTML(this, 'b', '', '');
	  }
	});

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	__webpack_require__(140)('fixed', function(createHTML){
	  return function fixed(){
	    return createHTML(this, 'tt', '', '');
	  }
	});

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	__webpack_require__(140)('fontcolor', function(createHTML){
	  return function fontcolor(color){
	    return createHTML(this, 'font', 'color', color);
	  }
	});

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	__webpack_require__(140)('fontsize', function(createHTML){
	  return function fontsize(size){
	    return createHTML(this, 'font', 'size', size);
	  }
	});

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	__webpack_require__(140)('italics', function(createHTML){
	  return function italics(){
	    return createHTML(this, 'i', '', '');
	  }
	});

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	__webpack_require__(140)('link', function(createHTML){
	  return function link(url){
	    return createHTML(this, 'a', 'href', url);
	  }
	});

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	__webpack_require__(140)('small', function(createHTML){
	  return function small(){
	    return createHTML(this, 'small', '', '');
	  }
	});

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	__webpack_require__(140)('strike', function(createHTML){
	  return function strike(){
	    return createHTML(this, 'strike', '', '');
	  }
	});

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	__webpack_require__(140)('sub', function(createHTML){
	  return function sub(){
	    return createHTML(this, 'sub', '', '');
	  }
	});

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	__webpack_require__(140)('sup', function(createHTML){
	  return function sup(){
	    return createHTML(this, 'sup', '', '');
	  }
	});

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(8);

	$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export     = __webpack_require__(8)
	  , toObject    = __webpack_require__(58)
	  , toPrimitive = __webpack_require__(16);

	$export($export.P + $export.F * __webpack_require__(7)(function(){
	  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
	}), 'Date', {
	  toJSON: function toJSON(key){
	    var O  = toObject(this)
	      , pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(8)
	  , fails   = __webpack_require__(7)
	  , getTime = Date.prototype.getTime;

	var lz = function(num){
	  return num > 9 ? num : '0' + num;
	};

	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (fails(function(){
	  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
	}) || !fails(function(){
	  new Date(NaN).toISOString();
	})), 'Date', {
	  toISOString: function toISOString(){
	    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
	    var d = this
	      , y = d.getUTCFullYear()
	      , m = d.getUTCMilliseconds()
	      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	  }
	});

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var DateProto    = Date.prototype
	  , INVALID_DATE = 'Invalid Date'
	  , TO_STRING    = 'toString'
	  , $toString    = DateProto[TO_STRING]
	  , getTime      = DateProto.getTime;
	if(new Date(NaN) + '' != INVALID_DATE){
	  __webpack_require__(18)(DateProto, TO_STRING, function toString(){
	    var value = getTime.call(this);
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var TO_PRIMITIVE = __webpack_require__(25)('toPrimitive')
	  , proto        = Date.prototype;

	if(!(TO_PRIMITIVE in proto))__webpack_require__(10)(proto, TO_PRIMITIVE, __webpack_require__(158));

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var anObject    = __webpack_require__(12)
	  , toPrimitive = __webpack_require__(16)
	  , NUMBER      = 'number';

	module.exports = function(hint){
	  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
	  return toPrimitive(anObject(this), hint != NUMBER);
	};

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(8);

	$export($export.S, 'Array', {isArray: __webpack_require__(45)});

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(20)
	  , $export        = __webpack_require__(8)
	  , toObject       = __webpack_require__(58)
	  , call           = __webpack_require__(161)
	  , isArrayIter    = __webpack_require__(162)
	  , toLength       = __webpack_require__(37)
	  , createProperty = __webpack_require__(163)
	  , getIterFn      = __webpack_require__(164);

	$export($export.S + $export.F * !__webpack_require__(165)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(12);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(129)
	  , ITERATOR   = __webpack_require__(25)('iterator')
	  , ArrayProto = Array.prototype;

	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(11)
	  , createDesc      = __webpack_require__(17);

	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(75)
	  , ITERATOR  = __webpack_require__(25)('iterator')
	  , Iterators = __webpack_require__(129);
	module.exports = __webpack_require__(9).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(25)('iterator')
	  , SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }

	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export        = __webpack_require__(8)
	  , createProperty = __webpack_require__(163);

	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  function F(){}
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */){
	    var index  = 0
	      , aLen   = arguments.length
	      , result = new (typeof this == 'function' ? this : Array)(aLen);
	    while(aLen > index)createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export   = __webpack_require__(8)
	  , toIObject = __webpack_require__(32)
	  , arrayJoin = [].join;

	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(33) != Object || !__webpack_require__(168)(arrayJoin)), 'Array', {
	  join: function join(separator){
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var fails = __webpack_require__(7);

	module.exports = function(method, arg){
	  return !!method && fails(function(){
	    arg ? method.call(null, function(){}, 1) : method.call(null);
	  });
	};

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export    = __webpack_require__(8)
	  , html       = __webpack_require__(48)
	  , cof        = __webpack_require__(34)
	  , toIndex    = __webpack_require__(39)
	  , toLength   = __webpack_require__(37)
	  , arraySlice = [].slice;

	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(7)(function(){
	  if(html)arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return arraySlice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export   = __webpack_require__(8)
	  , aFunction = __webpack_require__(21)
	  , toObject  = __webpack_require__(58)
	  , fails     = __webpack_require__(7)
	  , $sort     = [].sort
	  , test      = [1, 2, 3];

	$export($export.P + $export.F * (fails(function(){
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function(){
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(168)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn){
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export  = __webpack_require__(8)
	  , $forEach = __webpack_require__(172)(0)
	  , STRICT   = __webpack_require__(168)([].forEach, true);

	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */){
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(20)
	  , IObject  = __webpack_require__(33)
	  , toObject = __webpack_require__(58)
	  , toLength = __webpack_require__(37)
	  , asc      = __webpack_require__(173);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(174);

	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13)
	  , isArray  = __webpack_require__(45)
	  , SPECIES  = __webpack_require__(25)('species');

	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $map    = __webpack_require__(172)(1);

	$export($export.P + $export.F * !__webpack_require__(168)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */){
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $filter = __webpack_require__(172)(2);

	$export($export.P + $export.F * !__webpack_require__(168)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */){
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $some   = __webpack_require__(172)(3);

	$export($export.P + $export.F * !__webpack_require__(168)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */){
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $every  = __webpack_require__(172)(4);

	$export($export.P + $export.F * !__webpack_require__(168)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */){
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $reduce = __webpack_require__(180);

	$export($export.P + $export.F * !__webpack_require__(168)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(21)
	  , toObject  = __webpack_require__(58)
	  , IObject   = __webpack_require__(33)
	  , toLength  = __webpack_require__(37);

	module.exports = function(that, callbackfn, aLen, memo, isRight){
	  aFunction(callbackfn);
	  var O      = toObject(that)
	    , self   = IObject(O)
	    , length = toLength(O.length)
	    , index  = isRight ? length - 1 : 0
	    , i      = isRight ? -1 : 1;
	  if(aLen < 2)for(;;){
	    if(index in self){
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if(isRight ? index < 0 : length <= index){
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $reduce = __webpack_require__(180);

	$export($export.P + $export.F * !__webpack_require__(168)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(8)
	  , $indexOf      = __webpack_require__(36)(false)
	  , $native       = [].indexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(168)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(8)
	  , toIObject     = __webpack_require__(32)
	  , toInteger     = __webpack_require__(38)
	  , toLength      = __webpack_require__(37)
	  , $native       = [].lastIndexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(168)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
	    // convert -0 to +0
	    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
	    var O      = toIObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
	    if(index < 0)index = length + index;
	    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
	    return -1;
	  }
	});

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(8);

	$export($export.P, 'Array', {copyWithin: __webpack_require__(185)});

	__webpack_require__(186)('copyWithin');

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	var toObject = __webpack_require__(58)
	  , toIndex  = __webpack_require__(39)
	  , toLength = __webpack_require__(37);

	module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
	  var O     = toObject(this)
	    , len   = toLength(O.length)
	    , to    = toIndex(target, len)
	    , from  = toIndex(start, len)
	    , end   = arguments.length > 2 ? arguments[2] : undefined
	    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
	    , inc   = 1;
	  if(from < to && to < from + count){
	    inc  = -1;
	    from += count - 1;
	    to   += count - 1;
	  }
	  while(count-- > 0){
	    if(from in O)O[to] = O[from];
	    else delete O[to];
	    to   += inc;
	    from += inc;
	  } return O;
	};

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(25)('unscopables')
	  , ArrayProto  = Array.prototype;
	if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(10)(ArrayProto, UNSCOPABLES, {});
	module.exports = function(key){
	  ArrayProto[UNSCOPABLES][key] = true;
	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(8);

	$export($export.P, 'Array', {fill: __webpack_require__(188)});

	__webpack_require__(186)('fill');

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	var toObject = __webpack_require__(58)
	  , toIndex  = __webpack_require__(39)
	  , toLength = __webpack_require__(37);
	module.exports = function fill(value /*, start = 0, end = @length */){
	  var O      = toObject(this)
	    , length = toLength(O.length)
	    , aLen   = arguments.length
	    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
	    , end    = aLen > 2 ? arguments[2] : undefined
	    , endPos = end === undefined ? length : toIndex(end, length);
	  while(endPos > index)O[index++] = value;
	  return O;
	};

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(8)
	  , $find   = __webpack_require__(172)(5)
	  , KEY     = 'find'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(186)(KEY);

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(8)
	  , $find   = __webpack_require__(172)(6)
	  , KEY     = 'findIndex'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(186)(KEY);

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(192)('Array');

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(4)
	  , dP          = __webpack_require__(11)
	  , DESCRIPTORS = __webpack_require__(6)
	  , SPECIES     = __webpack_require__(25)('species');

	module.exports = function(KEY){
	  var C = global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(186)
	  , step             = __webpack_require__(194)
	  , Iterators        = __webpack_require__(129)
	  , toIObject        = __webpack_require__(32);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(128)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 194 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var global            = __webpack_require__(4)
	  , inheritIfRequired = __webpack_require__(88)
	  , dP                = __webpack_require__(11).f
	  , gOPN              = __webpack_require__(50).f
	  , isRegExp          = __webpack_require__(134)
	  , $flags            = __webpack_require__(196)
	  , $RegExp           = global.RegExp
	  , Base              = $RegExp
	  , proto             = $RegExp.prototype
	  , re1               = /a/g
	  , re2               = /a/g
	  // "new" creates a new object, old webkit buggy here
	  , CORRECT_NEW       = new $RegExp(re1) !== re1;

	if(__webpack_require__(6) && (!CORRECT_NEW || __webpack_require__(7)(function(){
	  re2[__webpack_require__(25)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))){
	  $RegExp = function RegExp(p, f){
	    var tiRE = this instanceof $RegExp
	      , piRE = isRegExp(p)
	      , fiU  = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function(key){
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function(){ return Base[key]; },
	      set: function(it){ Base[key] = it; }
	    });
	  };
	  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(18)(global, 'RegExp', $RegExp);
	}

	__webpack_require__(192)('RegExp');

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(12);
	module.exports = function(){
	  var that   = anObject(this)
	    , result = '';
	  if(that.global)     result += 'g';
	  if(that.ignoreCase) result += 'i';
	  if(that.multiline)  result += 'm';
	  if(that.unicode)    result += 'u';
	  if(that.sticky)     result += 'y';
	  return result;
	};

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(198);
	var anObject    = __webpack_require__(12)
	  , $flags      = __webpack_require__(196)
	  , DESCRIPTORS = __webpack_require__(6)
	  , TO_STRING   = 'toString'
	  , $toString   = /./[TO_STRING];

	var define = function(fn){
	  __webpack_require__(18)(RegExp.prototype, TO_STRING, fn, true);
	};

	// 21.2.5.14 RegExp.prototype.toString()
	if(__webpack_require__(7)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
	  define(function toString(){
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if($toString.name != TO_STRING){
	  define(function toString(){
	    return $toString.call(this);
	  });
	}

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if(__webpack_require__(6) && /./g.flags != 'g')__webpack_require__(11).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(196)
	});

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	// @@match logic
	__webpack_require__(200)('match', 1, function(defined, MATCH, $match){
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var hide     = __webpack_require__(10)
	  , redefine = __webpack_require__(18)
	  , fails    = __webpack_require__(7)
	  , defined  = __webpack_require__(35)
	  , wks      = __webpack_require__(25);

	module.exports = function(KEY, length, exec){
	  var SYMBOL   = wks(KEY)
	    , fns      = exec(defined, SYMBOL, ''[KEY])
	    , strfn    = fns[0]
	    , rxfn     = fns[1];
	  if(fails(function(){
	    var O = {};
	    O[SYMBOL] = function(){ return 7; };
	    return ''[KEY](O) != 7;
	  })){
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function(string, arg){ return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function(string){ return rxfn.call(string, this); }
	    );
	  }
	};

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	// @@replace logic
	__webpack_require__(200)('replace', 2, function(defined, REPLACE, $replace){
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue){
	    'use strict';
	    var O  = defined(this)
	      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined
	      ? fn.call(searchValue, O, replaceValue)
	      : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	// @@search logic
	__webpack_require__(200)('search', 1, function(defined, SEARCH, $search){
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	// @@split logic
	__webpack_require__(200)('split', 2, function(defined, SPLIT, $split){
	  'use strict';
	  var isRegExp   = __webpack_require__(134)
	    , _split     = $split
	    , $push      = [].push
	    , $SPLIT     = 'split'
	    , LENGTH     = 'length'
	    , LAST_INDEX = 'lastIndex';
	  if(
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ){
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function(separator, limit){
	      var string = String(this);
	      if(separator === undefined && limit === 0)return [];
	      // If `separator` is not a regex, use native split
	      if(!isRegExp(separator))return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while(match = separatorCopy.exec(string)){
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if(lastIndex > lastLastIndex){
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
	            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
	          });
	          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if(output[LENGTH] >= splitLimit)break;
	        }
	        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if(lastLastIndex === string[LENGTH]){
	        if(lastLength || !separatorCopy.test(''))output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
	    $split = function(separator, limit){
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit){
	    var O  = defined(this)
	      , fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(28)
	  , global             = __webpack_require__(4)
	  , ctx                = __webpack_require__(20)
	  , classof            = __webpack_require__(75)
	  , $export            = __webpack_require__(8)
	  , isObject           = __webpack_require__(13)
	  , aFunction          = __webpack_require__(21)
	  , anInstance         = __webpack_require__(205)
	  , forOf              = __webpack_require__(206)
	  , speciesConstructor = __webpack_require__(207)
	  , task               = __webpack_require__(208).set
	  , microtask          = __webpack_require__(209)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;

	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(25)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();

	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};

	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(210)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(24)($Promise, PROMISE);
	__webpack_require__(192)(PROMISE);
	Wrapper = __webpack_require__(9)[PROMISE];

	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(165)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 205 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(20)
	  , call        = __webpack_require__(161)
	  , isArrayIter = __webpack_require__(162)
	  , anObject    = __webpack_require__(12)
	  , toLength    = __webpack_require__(37)
	  , getIterFn   = __webpack_require__(164)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(12)
	  , aFunction = __webpack_require__(21)
	  , SPECIES   = __webpack_require__(25)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(20)
	  , invoke             = __webpack_require__(78)
	  , html               = __webpack_require__(48)
	  , cel                = __webpack_require__(15)
	  , global             = __webpack_require__(4)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(34)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , macrotask = __webpack_require__(208).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(34)(process) == 'process';

	module.exports = function(){
	  var head, last, notify;

	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };

	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }

	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(18);
	module.exports = function(target, src, safe){
	  for(var key in src)redefine(target, key, src[key], safe);
	  return target;
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(212);

	// 23.1 Map Objects
	module.exports = __webpack_require__(213)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(11).f
	  , create      = __webpack_require__(46)
	  , redefineAll = __webpack_require__(210)
	  , ctx         = __webpack_require__(20)
	  , anInstance  = __webpack_require__(205)
	  , defined     = __webpack_require__(35)
	  , forOf       = __webpack_require__(206)
	  , $iterDefine = __webpack_require__(128)
	  , step        = __webpack_require__(194)
	  , setSpecies  = __webpack_require__(192)
	  , DESCRIPTORS = __webpack_require__(6)
	  , fastKey     = __webpack_require__(22).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';

	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(4)
	  , $export           = __webpack_require__(8)
	  , redefine          = __webpack_require__(18)
	  , redefineAll       = __webpack_require__(210)
	  , meta              = __webpack_require__(22)
	  , forOf             = __webpack_require__(206)
	  , anInstance        = __webpack_require__(205)
	  , isObject          = __webpack_require__(13)
	  , fails             = __webpack_require__(7)
	  , $iterDetect       = __webpack_require__(165)
	  , setToStringTag    = __webpack_require__(24)
	  , inheritIfRequired = __webpack_require__(88);

	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  var fixMethod = function(KEY){
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a){
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance             = new C
	      // early implementations not supports chaining
	      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
	      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
	      // most early implementations doesn't supports iterables, most modern - not close it correctly
	      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
	      // for early implementations -0 and +0 not the same
	      , BUGGY_ZERO = !IS_WEAK && fails(function(){
	        // V8 ~ Chromium 42- fails only with 5+ elements
	        var $instance = new C()
	          , index     = 5;
	        while(index--)$instance[ADDER](index, index);
	        return !$instance.has(-0);
	      });
	    if(!ACCEPT_ITERABLES){ 
	      C = wrapper(function(target, iterable){
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base, target, C);
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if(IS_WEAK && proto.clear)delete proto.clear;
	  }

	  setToStringTag(C, NAME);

	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);

	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

	  return C;
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(212);

	// 23.2 Set Objects
	module.exports = __webpack_require__(213)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var each         = __webpack_require__(172)(0)
	  , redefine     = __webpack_require__(18)
	  , meta         = __webpack_require__(22)
	  , assign       = __webpack_require__(69)
	  , weak         = __webpack_require__(216)
	  , isObject     = __webpack_require__(13)
	  , getWeak      = meta.getWeak
	  , isExtensible = Object.isExtensible
	  , uncaughtFrozenStore = weak.ufstore
	  , tmp          = {}
	  , InternalMap;

	var wrapper = function(get){
	  return function WeakMap(){
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};

	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      var data = getWeak(key);
	      if(data === true)return uncaughtFrozenStore(this).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	};

	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(213)('WeakMap', wrapper, methods, weak, true, true);

	// IE11 WeakMap frozen keys fix
	if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  InternalMap = weak.getConstructor(wrapper);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = $WeakMap.prototype
	      , method = proto[key];
	    redefine(proto, key, function(a, b){
	      // store frozen objects on internal weakmap shim
	      if(isObject(a) && !isExtensible(a)){
	        if(!this._f)this._f = new InternalMap;
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll       = __webpack_require__(210)
	  , getWeak           = __webpack_require__(22).getWeak
	  , anObject          = __webpack_require__(12)
	  , isObject          = __webpack_require__(13)
	  , anInstance        = __webpack_require__(205)
	  , forOf             = __webpack_require__(206)
	  , createArrayMethod = __webpack_require__(172)
	  , $has              = __webpack_require__(5)
	  , arrayFind         = createArrayMethod(5)
	  , arrayFindIndex    = createArrayMethod(6)
	  , id                = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function(that){
	  return that._l || (that._l = new UncaughtFrozenStore);
	};
	var UncaughtFrozenStore = function(){
	  this.a = [];
	};
	var findUncaughtFrozen = function(store, key){
	  return arrayFind(store.a, function(it){
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function(key){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)return entry[1];
	  },
	  has: function(key){
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function(key, value){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function(key){
	    var index = arrayFindIndex(this.a, function(it){
	      return it[0] === key;
	    });
	    if(~index)this.a.splice(index, 1);
	    return !!~index;
	  }
	};

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var data = getWeak(anObject(key), true);
	    if(data === true)uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(216);

	// 23.4 WeakSet Objects
	__webpack_require__(213)('WeakSet', function(get){
	  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value){
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , $typed       = __webpack_require__(219)
	  , buffer       = __webpack_require__(220)
	  , anObject     = __webpack_require__(12)
	  , toIndex      = __webpack_require__(39)
	  , toLength     = __webpack_require__(37)
	  , isObject     = __webpack_require__(13)
	  , ArrayBuffer  = __webpack_require__(4).ArrayBuffer
	  , speciesConstructor = __webpack_require__(207)
	  , $ArrayBuffer = buffer.ArrayBuffer
	  , $DataView    = buffer.DataView
	  , $isView      = $typed.ABV && ArrayBuffer.isView
	  , $slice       = $ArrayBuffer.prototype.slice
	  , VIEW         = $typed.VIEW
	  , ARRAY_BUFFER = 'ArrayBuffer';

	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it){
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});

	$export($export.P + $export.U + $export.F * __webpack_require__(7)(function(){
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end){
	    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
	    var len    = anObject(this).byteLength
	      , first  = toIndex(start, len)
	      , final  = toIndex(end === undefined ? len : end, len)
	      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
	      , viewS  = new $DataView(this)
	      , viewT  = new $DataView(result)
	      , index  = 0;
	    while(first < final){
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});

	__webpack_require__(192)(ARRAY_BUFFER);

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4)
	  , hide   = __webpack_require__(10)
	  , uid    = __webpack_require__(19)
	  , TYPED  = uid('typed_array')
	  , VIEW   = uid('view')
	  , ABV    = !!(global.ArrayBuffer && global.DataView)
	  , CONSTR = ABV
	  , i = 0, l = 9, Typed;

	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');

	while(i < l){
	  if(Typed = global[TypedArrayConstructors[i++]]){
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}

	module.exports = {
	  ABV:    ABV,
	  CONSTR: CONSTR,
	  TYPED:  TYPED,
	  VIEW:   VIEW
	};

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(4)
	  , DESCRIPTORS    = __webpack_require__(6)
	  , LIBRARY        = __webpack_require__(28)
	  , $typed         = __webpack_require__(219)
	  , hide           = __webpack_require__(10)
	  , redefineAll    = __webpack_require__(210)
	  , fails          = __webpack_require__(7)
	  , anInstance     = __webpack_require__(205)
	  , toInteger      = __webpack_require__(38)
	  , toLength       = __webpack_require__(37)
	  , gOPN           = __webpack_require__(50).f
	  , dP             = __webpack_require__(11).f
	  , arrayFill      = __webpack_require__(188)
	  , setToStringTag = __webpack_require__(24)
	  , ARRAY_BUFFER   = 'ArrayBuffer'
	  , DATA_VIEW      = 'DataView'
	  , PROTOTYPE      = 'prototype'
	  , WRONG_LENGTH   = 'Wrong length!'
	  , WRONG_INDEX    = 'Wrong index!'
	  , $ArrayBuffer   = global[ARRAY_BUFFER]
	  , $DataView      = global[DATA_VIEW]
	  , Math           = global.Math
	  , RangeError     = global.RangeError
	  , Infinity       = global.Infinity
	  , BaseBuffer     = $ArrayBuffer
	  , abs            = Math.abs
	  , pow            = Math.pow
	  , floor          = Math.floor
	  , log            = Math.log
	  , LN2            = Math.LN2
	  , BUFFER         = 'buffer'
	  , BYTE_LENGTH    = 'byteLength'
	  , BYTE_OFFSET    = 'byteOffset'
	  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
	  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
	  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

	// IEEE754 conversions based on https://github.com/feross/ieee754
	var packIEEE754 = function(value, mLen, nBytes){
	  var buffer = Array(nBytes)
	    , eLen   = nBytes * 8 - mLen - 1
	    , eMax   = (1 << eLen) - 1
	    , eBias  = eMax >> 1
	    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
	    , i      = 0
	    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
	    , e, m, c;
	  value = abs(value)
	  if(value != value || value === Infinity){
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if(value * (c = pow(2, -e)) < 1){
	      e--;
	      c *= 2;
	    }
	    if(e + eBias >= 1){
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if(value * c >= 2){
	      e++;
	      c /= 2;
	    }
	    if(e + eBias >= eMax){
	      m = 0;
	      e = eMax;
	    } else if(e + eBias >= 1){
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	};
	var unpackIEEE754 = function(buffer, mLen, nBytes){
	  var eLen  = nBytes * 8 - mLen - 1
	    , eMax  = (1 << eLen) - 1
	    , eBias = eMax >> 1
	    , nBits = eLen - 7
	    , i     = nBytes - 1
	    , s     = buffer[i--]
	    , e     = s & 127
	    , m;
	  s >>= 7;
	  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if(e === 0){
	    e = 1 - eBias;
	  } else if(e === eMax){
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	};

	var unpackI32 = function(bytes){
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	};
	var packI8 = function(it){
	  return [it & 0xff];
	};
	var packI16 = function(it){
	  return [it & 0xff, it >> 8 & 0xff];
	};
	var packI32 = function(it){
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	};
	var packF64 = function(it){
	  return packIEEE754(it, 52, 8);
	};
	var packF32 = function(it){
	  return packIEEE754(it, 23, 4);
	};

	var addGetter = function(C, key, internal){
	  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
	};

	var get = function(view, bytes, index, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	};
	var set = function(view, bytes, index, conversion, value, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = conversion(+value);
	  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	};

	var validateArrayBufferArguments = function(that, length){
	  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
	  var numberLength = +length
	    , byteLength   = toLength(numberLength);
	  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
	  return byteLength;
	};

	if(!$typed.ABV){
	  $ArrayBuffer = function ArrayBuffer(length){
	    var byteLength = validateArrayBufferArguments(this, length);
	    this._b       = arrayFill.call(Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength){
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH]
	      , offset       = toInteger(byteOffset);
	    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };

	  if(DESCRIPTORS){
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }

	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset){
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset){
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if(!fails(function(){
	    new $ArrayBuffer;     // eslint-disable-line no-new
	  }) || !fails(function(){
	    new $ArrayBuffer(.5); // eslint-disable-line no-new
	  })){
	    $ArrayBuffer = function ArrayBuffer(length){
	      return new BaseBuffer(validateArrayBufferArguments(this, length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
	      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
	    };
	    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2))
	    , $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	$export($export.G + $export.W + $export.F * !__webpack_require__(219).ABV, {
	  DataView: __webpack_require__(220).DataView
	});

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int8', 1, function(init){
	  return function Int8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	if(__webpack_require__(6)){
	  var LIBRARY             = __webpack_require__(28)
	    , global              = __webpack_require__(4)
	    , fails               = __webpack_require__(7)
	    , $export             = __webpack_require__(8)
	    , $typed              = __webpack_require__(219)
	    , $buffer             = __webpack_require__(220)
	    , ctx                 = __webpack_require__(20)
	    , anInstance          = __webpack_require__(205)
	    , propertyDesc        = __webpack_require__(17)
	    , hide                = __webpack_require__(10)
	    , redefineAll         = __webpack_require__(210)
	    , toInteger           = __webpack_require__(38)
	    , toLength            = __webpack_require__(37)
	    , toIndex             = __webpack_require__(39)
	    , toPrimitive         = __webpack_require__(16)
	    , has                 = __webpack_require__(5)
	    , same                = __webpack_require__(71)
	    , classof             = __webpack_require__(75)
	    , isObject            = __webpack_require__(13)
	    , toObject            = __webpack_require__(58)
	    , isArrayIter         = __webpack_require__(162)
	    , create              = __webpack_require__(46)
	    , getPrototypeOf      = __webpack_require__(59)
	    , gOPN                = __webpack_require__(50).f
	    , getIterFn           = __webpack_require__(164)
	    , uid                 = __webpack_require__(19)
	    , wks                 = __webpack_require__(25)
	    , createArrayMethod   = __webpack_require__(172)
	    , createArrayIncludes = __webpack_require__(36)
	    , speciesConstructor  = __webpack_require__(207)
	    , ArrayIterators      = __webpack_require__(193)
	    , Iterators           = __webpack_require__(129)
	    , $iterDetect         = __webpack_require__(165)
	    , setSpecies          = __webpack_require__(192)
	    , arrayFill           = __webpack_require__(188)
	    , arrayCopyWithin     = __webpack_require__(185)
	    , $DP                 = __webpack_require__(11)
	    , $GOPD               = __webpack_require__(51)
	    , dP                  = $DP.f
	    , gOPD                = $GOPD.f
	    , RangeError          = global.RangeError
	    , TypeError           = global.TypeError
	    , Uint8Array          = global.Uint8Array
	    , ARRAY_BUFFER        = 'ArrayBuffer'
	    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
	    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
	    , PROTOTYPE           = 'prototype'
	    , ArrayProto          = Array[PROTOTYPE]
	    , $ArrayBuffer        = $buffer.ArrayBuffer
	    , $DataView           = $buffer.DataView
	    , arrayForEach        = createArrayMethod(0)
	    , arrayFilter         = createArrayMethod(2)
	    , arraySome           = createArrayMethod(3)
	    , arrayEvery          = createArrayMethod(4)
	    , arrayFind           = createArrayMethod(5)
	    , arrayFindIndex      = createArrayMethod(6)
	    , arrayIncludes       = createArrayIncludes(true)
	    , arrayIndexOf        = createArrayIncludes(false)
	    , arrayValues         = ArrayIterators.values
	    , arrayKeys           = ArrayIterators.keys
	    , arrayEntries        = ArrayIterators.entries
	    , arrayLastIndexOf    = ArrayProto.lastIndexOf
	    , arrayReduce         = ArrayProto.reduce
	    , arrayReduceRight    = ArrayProto.reduceRight
	    , arrayJoin           = ArrayProto.join
	    , arraySort           = ArrayProto.sort
	    , arraySlice          = ArrayProto.slice
	    , arrayToString       = ArrayProto.toString
	    , arrayToLocaleString = ArrayProto.toLocaleString
	    , ITERATOR            = wks('iterator')
	    , TAG                 = wks('toStringTag')
	    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
	    , DEF_CONSTRUCTOR     = uid('def_constructor')
	    , ALL_CONSTRUCTORS    = $typed.CONSTR
	    , TYPED_ARRAY         = $typed.TYPED
	    , VIEW                = $typed.VIEW
	    , WRONG_LENGTH        = 'Wrong length!';

	  var $map = createArrayMethod(1, function(O, length){
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });

	  var LITTLE_ENDIAN = fails(function(){
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });

	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
	    new Uint8Array(1).set({});
	  });

	  var strictToLength = function(it, SAME){
	    if(it === undefined)throw TypeError(WRONG_LENGTH);
	    var number = +it
	      , length = toLength(it);
	    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
	    return length;
	  };

	  var toOffset = function(it, BYTES){
	    var offset = toInteger(it);
	    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
	    return offset;
	  };

	  var validate = function(it){
	    if(isObject(it) && TYPED_ARRAY in it)return it;
	    throw TypeError(it + ' is not a typed array!');
	  };

	  var allocate = function(C, length){
	    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };

	  var speciesFromList = function(O, list){
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };

	  var fromList = function(C, list){
	    var index  = 0
	      , length = list.length
	      , result = allocate(C, length);
	    while(length > index)result[index] = list[index++];
	    return result;
	  };

	  var addGetter = function(it, key, internal){
	    dP(it, key, {get: function(){ return this._d[internal]; }});
	  };

	  var $from = function from(source /*, mapfn, thisArg */){
	    var O       = toObject(source)
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , iterFn  = getIterFn(O)
	      , i, length, values, result, step, iterator;
	    if(iterFn != undefined && !isArrayIter(iterFn)){
	      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
	        values.push(step.value);
	      } O = values;
	    }
	    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
	    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };

	  var $of = function of(/*...items*/){
	    var index  = 0
	      , length = arguments.length
	      , result = allocate(this, length);
	    while(length > index)result[index] = arguments[index++];
	    return result;
	  };

	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

	  var $toLocaleString = function toLocaleString(){
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };

	  var proto = {
	    copyWithin: function copyWithin(target, start /*, end */){
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /*, thisArg */){
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /*, thisArg */){
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /*, thisArg */){
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /*, thisArg */){
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /*, thisArg */){
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /*, fromIndex */){
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /*, fromIndex */){
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator){ // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /*, thisArg */){
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse(){
	      var that   = this
	        , length = validate(that).length
	        , middle = Math.floor(length / 2)
	        , index  = 0
	        , value;
	      while(index < middle){
	        value         = that[index];
	        that[index++] = that[--length];
	        that[length]  = value;
	      } return that;
	    },
	    some: function some(callbackfn /*, thisArg */){
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn){
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end){
	      var O      = validate(this)
	        , length = O.length
	        , $begin = toIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
	      );
	    }
	  };

	  var $slice = function slice(start, end){
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };

	  var $set = function set(arrayLike /*, offset */){
	    validate(this);
	    var offset = toOffset(arguments[1], 1)
	      , length = this.length
	      , src    = toObject(arrayLike)
	      , len    = toLength(src.length)
	      , index  = 0;
	    if(len + offset > length)throw RangeError(WRONG_LENGTH);
	    while(index < len)this[offset + index] = src[index++];
	  };

	  var $iterators = {
	    entries: function entries(){
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys(){
	      return arrayKeys.call(validate(this));
	    },
	    values: function values(){
	      return arrayValues.call(validate(this));
	    }
	  };

	  var isTAIndex = function(target, key){
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key){
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc){
	    if(isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ){
	      target[key] = desc.value;
	      return target;
	    } else return dP(target, key, desc);
	  };

	  if(!ALL_CONSTRUCTORS){
	    $GOPD.f = $getDesc;
	    $DP.f   = $setDesc;
	  }

	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty:           $setDesc
	  });

	  if(fails(function(){ arrayToString.call({}); })){
	    arrayToString = arrayToLocaleString = function toString(){
	      return arrayJoin.call(this);
	    }
	  }

	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice:          $slice,
	    set:            $set,
	    constructor:    function(){ /* noop */ },
	    toString:       arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function(){ return this[TYPED_ARRAY]; }
	  });

	  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
	    CLAMPED = !!CLAMPED;
	    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
	      , ISNT_UINT8 = NAME != 'Uint8Array'
	      , GETTER     = 'get' + KEY
	      , SETTER     = 'set' + KEY
	      , TypedArray = global[NAME]
	      , Base       = TypedArray || {}
	      , TAC        = TypedArray && getPrototypeOf(TypedArray)
	      , FORCED     = !TypedArray || !$typed.ABV
	      , O          = {}
	      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function(that, index){
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function(that, index, value){
	      var data = that._d;
	      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function(that, index){
	      dP(that, index, {
	        get: function(){
	          return getter(this, index);
	        },
	        set: function(value){
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if(FORCED){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME, '_d');
	        var index  = 0
	          , offset = 0
	          , buffer, byteLength, length, klass;
	        if(!isObject(data)){
	          length     = strictToLength(data, true)
	          byteLength = length * BYTES;
	          buffer     = new $ArrayBuffer(byteLength);
	        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if($length === undefined){
	            if($len % BYTES)throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if(TYPED_ARRAY in data){
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while(index < length)addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if(!$iterDetect(function(iter){
	      // V8 works with iterators, but fails in many other cases
	      // https://code.google.com/p/v8/issues/detail?id=4552
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
	        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
	        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
	      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
	      , $iterator         = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

	    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
	      dP(TypedArrayPrototype, TAG, {
	        get: function(){ return NAME; }
	      });
	    }

	    O[NAME] = TypedArray;

	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES,
	      from: $from,
	      of: $of
	    });

	    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

	    $export($export.P, NAME, proto);

	    setSpecies(NAME);

	    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

	    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

	    $export($export.P + $export.F * fails(function(){
	      new TypedArray(1).slice();
	    }), NAME, {slice: $slice});

	    $export($export.P + $export.F * (fails(function(){
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
	    }) || !fails(function(){
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, {toLocaleString: $toLocaleString});

	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function(){ /* empty */ };

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint8', 1, function(init){
	  return function Uint8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint8', 1, function(init){
	  return function Uint8ClampedArray(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	}, true);

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int16', 2, function(init){
	  return function Int16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint16', 2, function(init){
	  return function Uint16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int32', 4, function(init){
	  return function Int32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint32', 4, function(init){
	  return function Uint32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Float32', 4, function(init){
	  return function Float32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Float64', 8, function(init){
	  return function Float64Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export   = __webpack_require__(8)
	  , aFunction = __webpack_require__(21)
	  , anObject  = __webpack_require__(12)
	  , rApply    = (__webpack_require__(4).Reflect || {}).apply
	  , fApply    = Function.apply;
	// MS Edge argumentsList argument is optional
	$export($export.S + $export.F * !__webpack_require__(7)(function(){
	  rApply(function(){});
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList){
	    var T = aFunction(target)
	      , L = anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export    = __webpack_require__(8)
	  , create     = __webpack_require__(46)
	  , aFunction  = __webpack_require__(21)
	  , anObject   = __webpack_require__(12)
	  , isObject   = __webpack_require__(13)
	  , fails      = __webpack_require__(7)
	  , bind       = __webpack_require__(77)
	  , rConstruct = (__webpack_require__(4).Reflect || {}).construct;

	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function(){
	  function F(){}
	  return !(rConstruct(function(){}, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function(){
	  rConstruct(function(){});
	});

	$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /*, newTarget*/){
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
	    if(Target == newTarget){
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch(args.length){
	        case 0: return new Target;
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args));
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto    = newTarget.prototype
	      , instance = create(isObject(proto) ? proto : Object.prototype)
	      , result   = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP          = __webpack_require__(11)
	  , $export     = __webpack_require__(8)
	  , anObject    = __webpack_require__(12)
	  , toPrimitive = __webpack_require__(16);

	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes){
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export  = __webpack_require__(8)
	  , gOPD     = __webpack_require__(51).f
	  , anObject = __webpack_require__(12);

	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey){
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	var $export  = __webpack_require__(8)
	  , anObject = __webpack_require__(12);
	var Enumerate = function(iterated){
	  this._t = anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = []       // keys
	    , key;
	  for(key in iterated)keys.push(key);
	};
	__webpack_require__(130)(Enumerate, 'Object', function(){
	  var that = this
	    , keys = that._k
	    , key;
	  do {
	    if(that._i >= keys.length)return {value: undefined, done: true};
	  } while(!((key = keys[that._i++]) in that._t));
	  return {value: key, done: false};
	});

	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target){
	    return new Enumerate(target);
	  }
	});

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD           = __webpack_require__(51)
	  , getPrototypeOf = __webpack_require__(59)
	  , has            = __webpack_require__(5)
	  , $export        = __webpack_require__(8)
	  , isObject       = __webpack_require__(13)
	  , anObject       = __webpack_require__(12);

	function get(target, propertyKey/*, receiver*/){
	  var receiver = arguments.length < 3 ? target : arguments[2]
	    , desc, proto;
	  if(anObject(target) === receiver)return target[propertyKey];
	  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
	}

	$export($export.S, 'Reflect', {get: get});

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD     = __webpack_require__(51)
	  , $export  = __webpack_require__(8)
	  , anObject = __webpack_require__(12);

	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export  = __webpack_require__(8)
	  , getProto = __webpack_require__(59)
	  , anObject = __webpack_require__(12);

	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target){
	    return getProto(anObject(target));
	  }
	});

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(8);

	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey){
	    return propertyKey in target;
	  }
	});

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.10 Reflect.isExtensible(target)
	var $export       = __webpack_require__(8)
	  , anObject      = __webpack_require__(12)
	  , $isExtensible = Object.isExtensible;

	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target){
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(8);

	$export($export.S, 'Reflect', {ownKeys: __webpack_require__(243)});

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	// all object keys, includes non-enumerable and symbols
	var gOPN     = __webpack_require__(50)
	  , gOPS     = __webpack_require__(43)
	  , anObject = __webpack_require__(12)
	  , Reflect  = __webpack_require__(4).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
	  var keys       = gOPN.f(anObject(it))
	    , getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.12 Reflect.preventExtensions(target)
	var $export            = __webpack_require__(8)
	  , anObject           = __webpack_require__(12)
	  , $preventExtensions = Object.preventExtensions;

	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target){
	    anObject(target);
	    try {
	      if($preventExtensions)$preventExtensions(target);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP             = __webpack_require__(11)
	  , gOPD           = __webpack_require__(51)
	  , getPrototypeOf = __webpack_require__(59)
	  , has            = __webpack_require__(5)
	  , $export        = __webpack_require__(8)
	  , createDesc     = __webpack_require__(17)
	  , anObject       = __webpack_require__(12)
	  , isObject       = __webpack_require__(13);

	function set(target, propertyKey, V/*, receiver*/){
	  var receiver = arguments.length < 4 ? target : arguments[3]
	    , ownDesc  = gOPD.f(anObject(target), propertyKey)
	    , existingDescriptor, proto;
	  if(!ownDesc){
	    if(isObject(proto = getPrototypeOf(target))){
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if(has(ownDesc, 'value')){
	    if(ownDesc.writable === false || !isObject(receiver))return false;
	    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
	    existingDescriptor.value = V;
	    dP.f(receiver, propertyKey, existingDescriptor);
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}

	$export($export.S, 'Reflect', {set: set});

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export  = __webpack_require__(8)
	  , setProto = __webpack_require__(73);

	if(setProto)$export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto){
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/Array.prototype.includes
	var $export   = __webpack_require__(8)
	  , $includes = __webpack_require__(36)(true);

	$export($export.P, 'Array', {
	  includes: function includes(el /*, fromIndex = 0 */){
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	__webpack_require__(186)('includes');

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/mathiasbynens/String.prototype.at
	var $export = __webpack_require__(8)
	  , $at     = __webpack_require__(127)(true);

	$export($export.P, 'String', {
	  at: function at(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(8)
	  , $pad    = __webpack_require__(250);

	$export($export.P, 'String', {
	  padStart: function padStart(maxLength /*, fillString = ' ' */){
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-string-pad-start-end
	var toLength = __webpack_require__(37)
	  , repeat   = __webpack_require__(91)
	  , defined  = __webpack_require__(35);

	module.exports = function(that, maxLength, fillString, left){
	  var S            = String(defined(that))
	    , stringLength = S.length
	    , fillStr      = fillString === undefined ? ' ' : String(fillString)
	    , intMaxLength = toLength(maxLength);
	  if(intMaxLength <= stringLength || fillStr == '')return S;
	  var fillLen = intMaxLength - stringLength
	    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(8)
	  , $pad    = __webpack_require__(250);

	$export($export.P, 'String', {
	  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(83)('trimLeft', function($trim){
	  return function trimLeft(){
	    return $trim(this, 1);
	  };
	}, 'trimStart');

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(83)('trimRight', function($trim){
	  return function trimRight(){
	    return $trim(this, 2);
	  };
	}, 'trimEnd');

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/String.prototype.matchAll/
	var $export     = __webpack_require__(8)
	  , defined     = __webpack_require__(35)
	  , toLength    = __webpack_require__(37)
	  , isRegExp    = __webpack_require__(134)
	  , getFlags    = __webpack_require__(196)
	  , RegExpProto = RegExp.prototype;

	var $RegExpStringIterator = function(regexp, string){
	  this._r = regexp;
	  this._s = string;
	};

	__webpack_require__(130)($RegExpStringIterator, 'RegExp String', function next(){
	  var match = this._r.exec(this._s);
	  return {value: match, done: match === null};
	});

	$export($export.P, 'String', {
	  matchAll: function matchAll(regexp){
	    defined(this);
	    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
	    var S     = String(this)
	      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
	      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
	    rx.lastIndex = toLength(regexp.lastIndex);
	    return new $RegExpStringIterator(rx, S);
	  }
	});

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(27)('asyncIterator');

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(27)('observable');

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-getownpropertydescriptors
	var $export        = __webpack_require__(8)
	  , ownKeys        = __webpack_require__(243)
	  , toIObject      = __webpack_require__(32)
	  , gOPD           = __webpack_require__(51)
	  , createProperty = __webpack_require__(163);

	$export($export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
	    var O       = toIObject(object)
	      , getDesc = gOPD.f
	      , keys    = ownKeys(O)
	      , result  = {}
	      , i       = 0
	      , key;
	    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
	    return result;
	  }
	});

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(8)
	  , $values = __webpack_require__(259)(false);

	$export($export.S, 'Object', {
	  values: function values(it){
	    return $values(it);
	  }
	});

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(30)
	  , toIObject = __webpack_require__(32)
	  , isEnum    = __webpack_require__(44).f;
	module.exports = function(isEntries){
	  return function(it){
	    var O      = toIObject(it)
	      , keys   = getKeys(O)
	      , length = keys.length
	      , i      = 0
	      , result = []
	      , key;
	    while(length > i)if(isEnum.call(O, key = keys[i++])){
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export  = __webpack_require__(8)
	  , $entries = __webpack_require__(259)(true);

	$export($export.S, 'Object', {
	  entries: function entries(it){
	    return $entries(it);
	  }
	});

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export         = __webpack_require__(8)
	  , toObject        = __webpack_require__(58)
	  , aFunction       = __webpack_require__(21)
	  , $defineProperty = __webpack_require__(11);

	// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __defineGetter__: function __defineGetter__(P, getter){
	    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
	  }
	});

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	// Forced replacement prototype accessors methods
	module.exports = __webpack_require__(28)|| !__webpack_require__(7)(function(){
	  var K = Math.random();
	  // In FF throws only define methods
	  __defineSetter__.call(null, K, function(){ /* empty */});
	  delete __webpack_require__(4)[K];
	});

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export         = __webpack_require__(8)
	  , toObject        = __webpack_require__(58)
	  , aFunction       = __webpack_require__(21)
	  , $defineProperty = __webpack_require__(11);

	// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __defineSetter__: function __defineSetter__(P, setter){
	    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
	  }
	});

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export                  = __webpack_require__(8)
	  , toObject                 = __webpack_require__(58)
	  , toPrimitive              = __webpack_require__(16)
	  , getPrototypeOf           = __webpack_require__(59)
	  , getOwnPropertyDescriptor = __webpack_require__(51).f;

	// B.2.2.4 Object.prototype.__lookupGetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __lookupGetter__: function __lookupGetter__(P){
	    var O = toObject(this)
	      , K = toPrimitive(P, true)
	      , D;
	    do {
	      if(D = getOwnPropertyDescriptor(O, K))return D.get;
	    } while(O = getPrototypeOf(O));
	  }
	});

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export                  = __webpack_require__(8)
	  , toObject                 = __webpack_require__(58)
	  , toPrimitive              = __webpack_require__(16)
	  , getPrototypeOf           = __webpack_require__(59)
	  , getOwnPropertyDescriptor = __webpack_require__(51).f;

	// B.2.2.5 Object.prototype.__lookupSetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __lookupSetter__: function __lookupSetter__(P){
	    var O = toObject(this)
	      , K = toPrimitive(P, true)
	      , D;
	    do {
	      if(D = getOwnPropertyDescriptor(O, K))return D.set;
	    } while(O = getPrototypeOf(O));
	  }
	});

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(8);

	$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(267)('Map')});

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(75)
	  , from    = __webpack_require__(268);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(206);

	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(8);

	$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(267)('Set')});

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-global
	var $export = __webpack_require__(8);

	$export($export.S, 'System', {global: __webpack_require__(4)});

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-is-error
	var $export = __webpack_require__(8)
	  , cof     = __webpack_require__(34);

	$export($export.S, 'Error', {
	  isError: function isError(it){
	    return cof(it) === 'Error';
	  }
	});

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);

	$export($export.S, 'Math', {
	  iaddh: function iaddh(x0, x1, y0, y1){
	    var $x0 = x0 >>> 0
	      , $x1 = x1 >>> 0
	      , $y0 = y0 >>> 0;
	    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
	  }
	});

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);

	$export($export.S, 'Math', {
	  isubh: function isubh(x0, x1, y0, y1){
	    var $x0 = x0 >>> 0
	      , $x1 = x1 >>> 0
	      , $y0 = y0 >>> 0;
	    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
	  }
	});

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);

	$export($export.S, 'Math', {
	  imulh: function imulh(u, v){
	    var UINT16 = 0xffff
	      , $u = +u
	      , $v = +v
	      , u0 = $u & UINT16
	      , v0 = $v & UINT16
	      , u1 = $u >> 16
	      , v1 = $v >> 16
	      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
	  }
	});

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);

	$export($export.S, 'Math', {
	  umulh: function umulh(u, v){
	    var UINT16 = 0xffff
	      , $u = +u
	      , $v = +v
	      , u0 = $u & UINT16
	      , v0 = $v & UINT16
	      , u1 = $u >>> 16
	      , v1 = $v >>> 16
	      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
	  }
	});

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(277)
	  , anObject                  = __webpack_require__(12)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;

	metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	}});

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var Map     = __webpack_require__(211)
	  , $export = __webpack_require__(8)
	  , shared  = __webpack_require__(23)('metadata')
	  , store   = shared.store || (shared.store = new (__webpack_require__(215)));

	var getOrCreateMetadataMap = function(target, targetKey, create){
	  var targetMetadata = store.get(target);
	  if(!targetMetadata){
	    if(!create)return undefined;
	    store.set(target, targetMetadata = new Map);
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if(!keyMetadata){
	    if(!create)return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map);
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function(target, targetKey){
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
	    , keys        = [];
	  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
	  return keys;
	};
	var toMetaKey = function(it){
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function(O){
	  $export($export.S, 'Reflect', O);
	};

	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , toMetaKey              = metadata.key
	  , getOrCreateMetadataMap = metadata.map
	  , store                  = metadata.store;

	metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
	  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
	    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
	  if(metadataMap.size)return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	}});

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , getPrototypeOf         = __webpack_require__(59)
	  , ordinaryHasOwnMetadata = metadata.has
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;

	var ordinaryGetMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};

	metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var Set                     = __webpack_require__(214)
	  , from                    = __webpack_require__(268)
	  , metadata                = __webpack_require__(277)
	  , anObject                = __webpack_require__(12)
	  , getPrototypeOf          = __webpack_require__(59)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;

	var ordinaryMetadataKeys = function(O, P){
	  var oKeys  = ordinaryOwnMetadataKeys(O, P)
	    , parent = getPrototypeOf(O);
	  if(parent === null)return oKeys;
	  var pKeys  = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};

	metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;

	metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                = __webpack_require__(277)
	  , anObject                = __webpack_require__(12)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;

	metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , getPrototypeOf         = __webpack_require__(59)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;

	var ordinaryHasMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};

	metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;

	metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(277)
	  , anObject                  = __webpack_require__(12)
	  , aFunction                 = __webpack_require__(21)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;

	metadata.exp({metadata: function metadata(metadataKey, metadataValue){
	  return function decorator(target, targetKey){
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	}});

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
	var $export   = __webpack_require__(8)
	  , microtask = __webpack_require__(209)()
	  , process   = __webpack_require__(4).process
	  , isNode    = __webpack_require__(34)(process) == 'process';

	$export($export.G, {
	  asap: function asap(fn){
	    var domain = isNode && process.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/zenparsing/es-observable
	var $export     = __webpack_require__(8)
	  , global      = __webpack_require__(4)
	  , core        = __webpack_require__(9)
	  , microtask   = __webpack_require__(209)()
	  , OBSERVABLE  = __webpack_require__(25)('observable')
	  , aFunction   = __webpack_require__(21)
	  , anObject    = __webpack_require__(12)
	  , anInstance  = __webpack_require__(205)
	  , redefineAll = __webpack_require__(210)
	  , hide        = __webpack_require__(10)
	  , forOf       = __webpack_require__(206)
	  , RETURN      = forOf.RETURN;

	var getMethod = function(fn){
	  return fn == null ? undefined : aFunction(fn);
	};

	var cleanupSubscription = function(subscription){
	  var cleanup = subscription._c;
	  if(cleanup){
	    subscription._c = undefined;
	    cleanup();
	  }
	};

	var subscriptionClosed = function(subscription){
	  return subscription._o === undefined;
	};

	var closeSubscription = function(subscription){
	  if(!subscriptionClosed(subscription)){
	    subscription._o = undefined;
	    cleanupSubscription(subscription);
	  }
	};

	var Subscription = function(observer, subscriber){
	  anObject(observer);
	  this._c = undefined;
	  this._o = observer;
	  observer = new SubscriptionObserver(this);
	  try {
	    var cleanup      = subscriber(observer)
	      , subscription = cleanup;
	    if(cleanup != null){
	      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
	      else aFunction(cleanup);
	      this._c = cleanup;
	    }
	  } catch(e){
	    observer.error(e);
	    return;
	  } if(subscriptionClosed(this))cleanupSubscription(this);
	};

	Subscription.prototype = redefineAll({}, {
	  unsubscribe: function unsubscribe(){ closeSubscription(this); }
	});

	var SubscriptionObserver = function(subscription){
	  this._s = subscription;
	};

	SubscriptionObserver.prototype = redefineAll({}, {
	  next: function next(value){
	    var subscription = this._s;
	    if(!subscriptionClosed(subscription)){
	      var observer = subscription._o;
	      try {
	        var m = getMethod(observer.next);
	        if(m)return m.call(observer, value);
	      } catch(e){
	        try {
	          closeSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      }
	    }
	  },
	  error: function error(value){
	    var subscription = this._s;
	    if(subscriptionClosed(subscription))throw value;
	    var observer = subscription._o;
	    subscription._o = undefined;
	    try {
	      var m = getMethod(observer.error);
	      if(!m)throw value;
	      value = m.call(observer, value);
	    } catch(e){
	      try {
	        cleanupSubscription(subscription);
	      } finally {
	        throw e;
	      }
	    } cleanupSubscription(subscription);
	    return value;
	  },
	  complete: function complete(value){
	    var subscription = this._s;
	    if(!subscriptionClosed(subscription)){
	      var observer = subscription._o;
	      subscription._o = undefined;
	      try {
	        var m = getMethod(observer.complete);
	        value = m ? m.call(observer, value) : undefined;
	      } catch(e){
	        try {
	          cleanupSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      } cleanupSubscription(subscription);
	      return value;
	    }
	  }
	});

	var $Observable = function Observable(subscriber){
	  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
	};

	redefineAll($Observable.prototype, {
	  subscribe: function subscribe(observer){
	    return new Subscription(observer, this._f);
	  },
	  forEach: function forEach(fn){
	    var that = this;
	    return new (core.Promise || global.Promise)(function(resolve, reject){
	      aFunction(fn);
	      var subscription = that.subscribe({
	        next : function(value){
	          try {
	            return fn(value);
	          } catch(e){
	            reject(e);
	            subscription.unsubscribe();
	          }
	        },
	        error: reject,
	        complete: resolve
	      });
	    });
	  }
	});

	redefineAll($Observable, {
	  from: function from(x){
	    var C = typeof this === 'function' ? this : $Observable;
	    var method = getMethod(anObject(x)[OBSERVABLE]);
	    if(method){
	      var observable = anObject(method.call(x));
	      return observable.constructor === C ? observable : new C(function(observer){
	        return observable.subscribe(observer);
	      });
	    }
	    return new C(function(observer){
	      var done = false;
	      microtask(function(){
	        if(!done){
	          try {
	            if(forOf(x, false, function(it){
	              observer.next(it);
	              if(done)return RETURN;
	            }) === RETURN)return;
	          } catch(e){
	            if(done)throw e;
	            observer.error(e);
	            return;
	          } observer.complete();
	        }
	      });
	      return function(){ done = true; };
	    });
	  },
	  of: function of(){
	    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
	    return new (typeof this === 'function' ? this : $Observable)(function(observer){
	      var done = false;
	      microtask(function(){
	        if(!done){
	          for(var i = 0; i < items.length; ++i){
	            observer.next(items[i]);
	            if(done)return;
	          } observer.complete();
	        }
	      });
	      return function(){ done = true; };
	    });
	  }
	});

	hide($Observable.prototype, OBSERVABLE, function(){ return this; });

	$export($export.G, {Observable: $Observable});

	__webpack_require__(192)('Observable');

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var global     = __webpack_require__(4)
	  , $export    = __webpack_require__(8)
	  , invoke     = __webpack_require__(78)
	  , partial    = __webpack_require__(289)
	  , navigator  = global.navigator
	  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
	var wrap = function(set){
	  return MSIE ? function(fn, time /*, ...args */){
	    return set(invoke(
	      partial,
	      [].slice.call(arguments, 2),
	      typeof fn == 'function' ? fn : Function(fn)
	    ), time);
	  } : set;
	};
	$export($export.G + $export.B + $export.F * MSIE, {
	  setTimeout:  wrap(global.setTimeout),
	  setInterval: wrap(global.setInterval)
	});

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var path      = __webpack_require__(290)
	  , invoke    = __webpack_require__(78)
	  , aFunction = __webpack_require__(21);
	module.exports = function(/* ...pargs */){
	  var fn     = aFunction(this)
	    , length = arguments.length
	    , pargs  = Array(length)
	    , i      = 0
	    , _      = path._
	    , holder = false;
	  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
	  return function(/* ...args */){
	    var that = this
	      , aLen = arguments.length
	      , j = 0, k = 0, args;
	    if(!holder && !aLen)return invoke(fn, pargs, that);
	    args = pargs.slice();
	    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
	    while(aLen > k)args.push(arguments[k++]);
	    return invoke(fn, args, that);
	  };
	};

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(4);

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , $task   = __webpack_require__(208);
	$export($export.G + $export.B, {
	  setImmediate:   $task.set,
	  clearImmediate: $task.clear
	});

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	var $iterators    = __webpack_require__(193)
	  , redefine      = __webpack_require__(18)
	  , global        = __webpack_require__(4)
	  , hide          = __webpack_require__(10)
	  , Iterators     = __webpack_require__(129)
	  , wks           = __webpack_require__(25)
	  , ITERATOR      = wks('iterator')
	  , TO_STRING_TAG = wks('toStringTag')
	  , ArrayValues   = Iterators.Array;

	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype
	    , key;
	  if(proto){
	    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
	    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
	  }
	}

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	!(function(global) {
	  "use strict";

	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }

	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided, then outerFn.prototype instanceof Generator.
	    var generator = Object.create((outerFn || Generator).prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  runtime.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `value instanceof AwaitArgument` to determine if the yielded value is
	  // meant to be awaited. Some may consider the name of this method too
	  // cutesy, but they are curmudgeons.
	  runtime.awrap = function(arg) {
	    return new AwaitArgument(arg);
	  };

	  function AwaitArgument(arg) {
	    this.arg = arg;
	  }

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value instanceof AwaitArgument) {
	          return Promise.resolve(value.arg).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }

	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;

	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }

	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }

	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );

	          if (record.type === "throw") {
	            context.delegate = null;

	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }

	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;

	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }

	          context.delegate = null;
	        }

	        if (method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = arg;

	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }

	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }

	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          var info = {
	            value: record.arg,
	            done: context.done
	          };

	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp[toStringTagSymbol] = "Generator";

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;

	  function doneResult() {
	    return { value: undefined, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }

	      return ContinueSentinel;
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(294)))

/***/ },
/* 294 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	(function () {
	    try {
	        cachedSetTimeout = setTimeout;
	    } catch (e) {
	        cachedSetTimeout = function () {
	            throw new Error('setTimeout is not defined');
	        }
	    }
	    try {
	        cachedClearTimeout = clearTimeout;
	    } catch (e) {
	        cachedClearTimeout = function () {
	            throw new Error('clearTimeout is not defined');
	        }
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(296);
	module.exports = __webpack_require__(9).RegExp.escape;

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/benjamingr/RexExp.escape
	var $export = __webpack_require__(8)
	  , $re     = __webpack_require__(297)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

	$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});


/***/ },
/* 297 */
/***/ function(module, exports) {

	module.exports = function(regExp, replace){
	  var replacer = replace === Object(replace) ? function(part){
	    return replace[part];
	  } : replace;
	  return function(it){
	    return String(it).replace(regExp, replacer);
	  };
	};

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(299);


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var ReactChildren = __webpack_require__(301);
	var ReactComponent = __webpack_require__(313);
	var ReactPureComponent = __webpack_require__(316);
	var ReactClass = __webpack_require__(317);
	var ReactDOMFactories = __webpack_require__(322);
	var ReactElement = __webpack_require__(305);
	var ReactPropTypes = __webpack_require__(327);
	var ReactVersion = __webpack_require__(328);

	var onlyChild = __webpack_require__(329);
	var warning = __webpack_require__(307);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(323);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 300 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(302);
	var ReactElement = __webpack_require__(305);

	var emptyFunction = __webpack_require__(308);
	var traverseAllChildren = __webpack_require__(310);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var invariant = __webpack_require__(304);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 303 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule reactProdInvariant
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var ReactCurrentOwner = __webpack_require__(306);

	var warning = __webpack_require__(307);
	var canDefineProperty = __webpack_require__(309);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	    var shadowChildren = Array.isArray(props.children) ? props.children.slice(0) : props.children;

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      Object.defineProperty(element, '_shadowChildren', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: shadowChildren
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._shadowChildren = shadowChildren;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(
	      /* eslint-disable no-proto */
	      config.__proto__ == null || config.__proto__ === Object.prototype,
	      /* eslint-enable no-proto */
	      'React.createElement(...): Expected props argument to be a plain object. ' + 'Properties defined in its prototype chain will be ignored.') : void 0;
	    }

	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(
	      /* eslint-disable no-proto */
	      config.__proto__ == null || config.__proto__ === Object.prototype,
	      /* eslint-enable no-proto */
	      'React.cloneElement(...): Expected props argument to be a plain object. ' + 'Properties defined in its prototype chain will be ignored.') : void 0;
	    }

	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	ReactElement.REACT_ELEMENT_TYPE = REACT_ELEMENT_TYPE;

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 306 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */

	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(308);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 308 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var ReactCurrentOwner = __webpack_require__(306);
	var ReactElement = __webpack_require__(305);

	var getIteratorFn = __webpack_require__(311);
	var invariant = __webpack_require__(304);
	var KeyEscapeUtils = __webpack_require__(312);
	var warning = __webpack_require__(307);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 311 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 312 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule KeyEscapeUtils
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var ReactNoopUpdateQueue = __webpack_require__(314);

	var canDefineProperty = __webpack_require__(309);
	var emptyObject = __webpack_require__(315);
	var invariant = __webpack_require__(304);
	var warning = __webpack_require__(307);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(307);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPureComponent
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var ReactComponent = __webpack_require__(313);
	var ReactNoopUpdateQueue = __webpack_require__(314);

	var emptyObject = __webpack_require__(315);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303),
	    _assign = __webpack_require__(300);

	var ReactComponent = __webpack_require__(313);
	var ReactElement = __webpack_require__(305);
	var ReactPropTypeLocations = __webpack_require__(318);
	var ReactPropTypeLocationNames = __webpack_require__(320);
	var ReactNoopUpdateQueue = __webpack_require__(314);

	var emptyObject = __webpack_require__(315);
	var invariant = __webpack_require__(304);
	var keyMirror = __webpack_require__(319);
	var keyOf = __webpack_require__(321);
	var warning = __webpack_require__(307);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(319);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(304);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function keyMirror(obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 321 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function keyOf(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 */

	'use strict';

	var ReactElement = __webpack_require__(305);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(323);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(306);
	var ReactComponentTreeHook = __webpack_require__(324);
	var ReactElement = __webpack_require__(305);
	var ReactPropTypeLocations = __webpack_require__(318);

	var checkReactTypeSpec = __webpack_require__(325);

	var canDefineProperty = __webpack_require__(309);
	var getIteratorFn = __webpack_require__(311);
	var warning = __webpack_require__(307);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, ReactPropTypeLocations.prop, name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentTreeHook
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var ReactCurrentOwner = __webpack_require__(306);

	var invariant = __webpack_require__(304);
	var warning = __webpack_require__(307);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var itemMap;
	var rootIDSet;

	var itemByKey;
	var rootByKey;

	if (canUseCollections) {
	  itemMap = new Map();
	  rootIDSet = new Set();
	} else {
	  itemByKey = {};
	  rootByKey = {};
	}

	var unmountedIDs = [];

	// Use non-numeric keys to prevent V8 performance issues:
	// https://github.com/facebook/react/pull/7232
	function getKeyFromID(id) {
	  return '.' + id;
	}
	function getIDFromKey(key) {
	  return parseInt(key.substr(1), 10);
	}

	function get(id) {
	  if (canUseCollections) {
	    return itemMap.get(id);
	  } else {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  }
	}

	function remove(id) {
	  if (canUseCollections) {
	    itemMap['delete'](id);
	  } else {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  }
	}

	function create(id, element, parentID) {
	  var item = {
	    element: element,
	    parentID: parentID,
	    text: null,
	    childIDs: [],
	    isMounted: false,
	    updateCount: 0
	  };

	  if (canUseCollections) {
	    itemMap.set(id, item);
	  } else {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  }
	}

	function addRoot(id) {
	  if (canUseCollections) {
	    rootIDSet.add(id);
	  } else {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  }
	}

	function removeRoot(id) {
	  if (canUseCollections) {
	    rootIDSet['delete'](id);
	  } else {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  }
	}

	function getRegisteredIDs() {
	  if (canUseCollections) {
	    return Array.from(itemMap.keys());
	  } else {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  }
	}

	function getRootIDs() {
	  if (canUseCollections) {
	    return Array.from(rootIDSet.keys());
	  } else {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  }
	}

	function purgeDeep(id) {
	  var item = get(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    remove(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + name + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = get(id);
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = get(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent ID is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    create(id, element, parentID);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = get(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = get(id);
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = get(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = get(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = get(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var type = topElement.type;
	      var name = typeof type === 'function' ? type.displayName || type.name : type;
	      var owner = topElement._owner;
	      info += describeComponentFrame(name || 'Unknown', topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = get(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = get(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = get(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = get(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = get(id);
	    return item ? item.updateCount : 0;
	  },


	  getRegisteredIDs: getRegisteredIDs,

	  getRootIDs: getRootIDs
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule checkReactTypeSpec
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var ReactPropTypeLocationNames = __webpack_require__(320);
	var ReactPropTypesSecret = __webpack_require__(326);

	var invariant = __webpack_require__(304);
	var warning = __webpack_require__(307);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(324);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(324);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 326 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypesSecret
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(305);
	var ReactPropTypeLocationNames = __webpack_require__(320);
	var ReactPropTypesSecret = __webpack_require__(326);

	var emptyFunction = __webpack_require__(308);
	var getIteratorFn = __webpack_require__(311);
	var warning = __webpack_require__(307);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/

	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;

	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in the next major version. You may be ' + 'seeing this warning due to a third-party PropTypes library. ' + 'See https://fb.me/react-warning-dont-call-proptypes for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new PropTypeError('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }

	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }

	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }

	  return false;
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 328 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '15.3.1';

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var ReactElement = __webpack_require__(305);

	var invariant = __webpack_require__(304);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(331);


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactDefaultInjection = __webpack_require__(335);
	var ReactMount = __webpack_require__(458);
	var ReactReconciler = __webpack_require__(355);
	var ReactUpdates = __webpack_require__(352);
	var ReactVersion = __webpack_require__(328);

	var findDOMNode = __webpack_require__(463);
	var getHostComponentFromComposite = __webpack_require__(464);
	var renderSubtreeIntoContainer = __webpack_require__(465);
	var warning = __webpack_require__(307);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(345);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(358);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(466);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(467);

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	}

	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponentTree
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var DOMProperty = __webpack_require__(333);
	var ReactDOMComponentFlags = __webpack_require__(334);

	var invariant = __webpack_require__(304);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var invariant = __webpack_require__(304);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 334 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponentFlags
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(336);
	var ChangeEventPlugin = __webpack_require__(351);
	var DefaultEventPluginOrder = __webpack_require__(369);
	var EnterLeaveEventPlugin = __webpack_require__(370);
	var HTMLDOMPropertyConfig = __webpack_require__(375);
	var ReactComponentBrowserEnvironment = __webpack_require__(376);
	var ReactDOMComponent = __webpack_require__(390);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactDOMEmptyComponent = __webpack_require__(429);
	var ReactDOMTreeTraversal = __webpack_require__(430);
	var ReactDOMTextComponent = __webpack_require__(431);
	var ReactDefaultBatchingStrategy = __webpack_require__(432);
	var ReactEventListener = __webpack_require__(433);
	var ReactInjection = __webpack_require__(436);
	var ReactReconcileTransaction = __webpack_require__(437);
	var SVGDOMPropertyConfig = __webpack_require__(445);
	var SelectEventPlugin = __webpack_require__(446);
	var SimpleEventPlugin = __webpack_require__(447);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(337);
	var EventPropagators = __webpack_require__(338);
	var ExecutionEnvironment = __webpack_require__(345);
	var FallbackCompositionState = __webpack_require__(346);
	var SyntheticCompositionEvent = __webpack_require__(348);
	var SyntheticInputEvent = __webpack_require__(350);

	var keyOf = __webpack_require__(321);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(319);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topAnimationEnd: null,
	  topAnimationIteration: null,
	  topAnimationStart: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topInvalid: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topTransitionEnd: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(337);
	var EventPluginHub = __webpack_require__(339);
	var EventPluginUtils = __webpack_require__(341);

	var accumulateInto = __webpack_require__(343);
	var forEachAccumulated = __webpack_require__(344);
	var warning = __webpack_require__(307);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var EventPluginRegistry = __webpack_require__(340);
	var EventPluginUtils = __webpack_require__(341);
	var ReactErrorUtils = __webpack_require__(342);

	var accumulateInto = __webpack_require__(343);
	var forEachAccumulated = __webpack_require__(344);
	var invariant = __webpack_require__(304);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var invariant = __webpack_require__(304);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;

	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var EventConstants = __webpack_require__(337);
	var ReactErrorUtils = __webpack_require__(342);

	var invariant = __webpack_require__(304);
	var warning = __webpack_require__(307);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var invariant = __webpack_require__(304);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 344 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ },
/* 345 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var PooledClass = __webpack_require__(302);

	var getTextContentAccessor = __webpack_require__(347);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(345);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(349);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var PooledClass = __webpack_require__(302);

	var emptyFunction = __webpack_require__(308);
	var warning = __webpack_require__(307);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(349);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(337);
	var EventPluginHub = __webpack_require__(339);
	var EventPropagators = __webpack_require__(338);
	var ExecutionEnvironment = __webpack_require__(345);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactUpdates = __webpack_require__(352);
	var SyntheticEvent = __webpack_require__(349);

	var getEventTarget = __webpack_require__(366);
	var isEventSupported = __webpack_require__(367);
	var isTextInputElement = __webpack_require__(368);
	var keyOf = __webpack_require__(321);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 11);
	}

	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}

	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;

	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }

	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return targetInst;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303),
	    _assign = __webpack_require__(300);

	var CallbackQueue = __webpack_require__(353);
	var PooledClass = __webpack_require__(302);
	var ReactFeatureFlags = __webpack_require__(354);
	var ReactReconciler = __webpack_require__(355);
	var Transaction = __webpack_require__(365);

	var invariant = __webpack_require__(304);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.props === component._renderedComponent._currentElement) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303),
	    _assign = __webpack_require__(300);

	var PooledClass = __webpack_require__(302);

	var invariant = __webpack_require__(304);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	_assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  checkpoint: function () {
	    return this._callbacks ? this._callbacks.length : 0;
	  },

	  rollback: function (len) {
	    if (this._callbacks) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 354 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactFeatureFlags
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(356);
	var ReactInstrumentation = __webpack_require__(358);

	var warning = __webpack_require__(307);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }

	};

	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(357);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return (
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement.ref !== prevElement.ref ||
	    // If owner changes but we have an unchanged function ref, don't update refs
	    typeof nextElement.ref === 'string' && nextElement._owner !== prevElement._owner
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var invariant = __webpack_require__(304);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstrumentation
	 */

	'use strict';

	var debugTool = null;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(359);
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDebugTool
	 */

	'use strict';

	var ReactInvalidSetStateWarningHook = __webpack_require__(360);
	var ReactHostOperationHistoryHook = __webpack_require__(361);
	var ReactComponentTreeHook = __webpack_require__(324);
	var ReactChildrenMutationWarningHook = __webpack_require__(362);
	var ExecutionEnvironment = __webpack_require__(345);

	var performanceNow = __webpack_require__(363);
	var warning = __webpack_require__(307);

	var hooks = [];
	var didHookThrowForEvent = {};

	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}

	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}

	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = null;
	var currentFlushStartTime = null;
	var currentTimerDebugID = null;
	var currentTimerStartTime = null;
	var currentTimerNestedFlushDuration = null;
	var currentTimerType = null;

	var lifeCycleTimerHasWarned = false;

	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}

	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || ReactComponentTreeHook.getOwnerID(parentID),
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}

	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements || [];
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();

	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = null;
	    currentFlushMeasurements = null;
	    clearHistory();
	    return;
	  }

	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }

	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}

	function checkDebugID(debugID) {
	  var allowRoot = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}

	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = null;
	  currentTimerNestedFlushDuration = null;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = null;
	  currentTimerNestedFlushDuration = null;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop();

	  var startTime = _lifeCycleTimerStack$.startTime;
	  var nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime;
	  var debugID = _lifeCycleTimerStack$.debugID;
	  var timerType = _lifeCycleTimerStack$.timerType;

	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }

	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }

	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onError: function (debugID) {
	    if (currentTimerDebugID != null) {
	      endLifeCycleTimer(currentTimerDebugID, currentTimerType);
	    }
	    emitEvent('onError', debugID);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (debugID, type, payload) {
	    checkDebugID(debugID);
	    emitEvent('onHostOperation', debugID, type, payload);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};

	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	ReactDebugTool.addHook(ReactChildrenMutationWarningHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}

	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInvalidSetStateWarningHook
	 */

	'use strict';

	var warning = __webpack_require__(307);

	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 361 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactHostOperationHistoryHook
	 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (debugID, type, payload) {
	    history.push({
	      instanceID: debugID,
	      type: type,
	      payload: payload
	    });
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }

	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};

	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildrenMutationWarningHook
	 */

	'use strict';

	var ReactComponentTreeHook = __webpack_require__(324);

	var warning = __webpack_require__(307);

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element._shadowChildren === undefined) {
	    return;
	  }
	  if (element._shadowChildren === element.props.children) {
	    return;
	  }
	  var isMutated = false;
	  if (Array.isArray(element._shadowChildren)) {
	    if (element._shadowChildren.length === element.props.children.length) {
	      for (var i = 0; i < element._shadowChildren.length; i++) {
	        if (element._shadowChildren[i] !== element.props.children[i]) {
	          isMutated = true;
	        }
	      }
	    } else {
	      isMutated = true;
	    }
	  }
	  if (!Array.isArray(element._shadowChildren) || isMutated) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Component\'s children should not be mutated.%s', ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}

	var ReactChildrenMutationWarningHook = {
	  onMountComponent: function (debugID) {
	    handleElement(debugID, ReactComponentTreeHook.getElement(debugID));
	  },
	  onUpdateComponent: function (debugID) {
	    handleElement(debugID, ReactComponentTreeHook.getElement(debugID));
	  }
	};

	module.exports = ReactChildrenMutationWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(364);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(345);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var invariant = __webpack_require__(304);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 366 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(345);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 368 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(321);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(337);
	var EventPropagators = __webpack_require__(338);
	var ReactDOMComponentTree = __webpack_require__(332);
	var SyntheticMouseEvent = __webpack_require__(371);

	var keyOf = __webpack_require__(321);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(372);
	var ViewportMetrics = __webpack_require__(373);

	var getEventModifierState = __webpack_require__(374);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(349);

	var getEventTarget = __webpack_require__(366);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 373 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 374 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(333);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(377);
	var ReactDOMIDOperations = __webpack_require__(389);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(378);
	var Danger = __webpack_require__(384);
	var ReactMultiChildUpdateTypes = __webpack_require__(388);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactInstrumentation = __webpack_require__(358);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(381);
	var setInnerHTML = __webpack_require__(380);
	var setTextContent = __webpack_require__(382);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID, 'replace text', stringText);
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation(prevInstance._debugID, 'replace with', markup.toString());
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation(nextInstance._debugID, 'mount', markup.toString());
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'insert child', { toIndex: update.toIndex, content: update.content.toString() });
	          }
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'move child', { fromIndex: update.fromIndex, toIndex: update.toIndex });
	          }
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'replace children', update.content.toString());
	          }
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'replace text', update.content.toString());
	          }
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'remove child', { fromIndex: update.fromIndex });
	          }
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMLazyTree
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(379);
	var setInnerHTML = __webpack_require__(380);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(381);
	var setTextContent = __webpack_require__(382);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ },
/* 379 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMNamespaces
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(345);
	var DOMNamespaces = __webpack_require__(379);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(381);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var newNodes = reusableSVGContainer.firstChild.childNodes;
	    for (var i = 0; i < newNodes.length; i++) {
	      node.appendChild(newNodes[i]);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ },
/* 381 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createMicrosoftUnsafeLocalFunction
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(345);
	var escapeTextContentForBrowser = __webpack_require__(383);
	var setInnerHTML = __webpack_require__(380);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 383 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html


	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var DOMLazyTree = __webpack_require__(378);
	var ExecutionEnvironment = __webpack_require__(345);

	var createNodesFromMarkup = __webpack_require__(385);
	var emptyFunction = __webpack_require__(308);
	var invariant = __webpack_require__(304);

	var Danger = {

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(345);

	var createArrayFromMixed = __webpack_require__(386);
	var getMarkupWrap = __webpack_require__(387);
	var invariant = __webpack_require__(304);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(304);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(345);

	var invariant = __webpack_require__(304);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(319);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(377);
	var ReactDOMComponentTree = __webpack_require__(332);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(303),
	    _assign = __webpack_require__(300);

	var AutoFocusUtils = __webpack_require__(391);
	var CSSPropertyOperations = __webpack_require__(393);
	var DOMLazyTree = __webpack_require__(378);
	var DOMNamespaces = __webpack_require__(379);
	var DOMProperty = __webpack_require__(333);
	var DOMPropertyOperations = __webpack_require__(401);
	var EventConstants = __webpack_require__(337);
	var EventPluginHub = __webpack_require__(339);
	var EventPluginRegistry = __webpack_require__(340);
	var ReactBrowserEventEmitter = __webpack_require__(403);
	var ReactDOMButton = __webpack_require__(406);
	var ReactDOMComponentFlags = __webpack_require__(334);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactDOMInput = __webpack_require__(408);
	var ReactDOMOption = __webpack_require__(410);
	var ReactDOMSelect = __webpack_require__(411);
	var ReactDOMTextarea = __webpack_require__(412);
	var ReactInstrumentation = __webpack_require__(358);
	var ReactMultiChild = __webpack_require__(413);
	var ReactServerRenderingTransaction = __webpack_require__(425);

	var emptyFunction = __webpack_require__(308);
	var escapeTextContentForBrowser = __webpack_require__(383);
	var invariant = __webpack_require__(304);
	var isEventSupported = __webpack_require__(367);
	var keyOf = __webpack_require__(321);
	var shallowEqual = __webpack_require__(420);
	var validateDOMNesting = __webpack_require__(428);
	var warning = __webpack_require__(307);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setContentChildForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setContentChildForInstrumentation = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topInvalid, 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setContentChildForInstrumentation.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getHostProps(this, props, hostParent);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setContentChildForInstrumentation.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        if (process.env.NODE_ENV !== 'production') {
	          setContentChildForInstrumentation.call(this, contentToUse);
	        }
	        DOMLazyTree.queueText(lazyTree, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getHostProps(this, lastProps);
	        nextProps = ReactDOMButton.getHostProps(this, nextProps);
	        break;
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setContentChildForInstrumentation.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setContentChildForInstrumentation.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if (process.env.NODE_ENV !== 'production') {
	      setContentChildForInstrumentation.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }

	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(332);

	var focusNode = __webpack_require__(392);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 392 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 */

	'use strict';

	var CSSProperty = __webpack_require__(394);
	var ExecutionEnvironment = __webpack_require__(345);
	var ReactInstrumentation = __webpack_require__(358);

	var camelizeStyleName = __webpack_require__(395);
	var dangerousStyleValue = __webpack_require__(397);
	var hyphenateStyleName = __webpack_require__(398);
	var memoizeStringOnly = __webpack_require__(400);
	var warning = __webpack_require__(307);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation(component._debugID, 'update styles', styles);
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 394 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(396);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 396 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 */

	'use strict';

	var CSSProperty = __webpack_require__(394);
	var warning = __webpack_require__(307);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(399);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 399 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 400 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 */

	'use strict';

	var DOMProperty = __webpack_require__(333);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactInstrumentation = __webpack_require__(358);

	var quoteAttributeValueForBrowser = __webpack_require__(402);
	var warning = __webpack_require__(307);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(383);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var EventConstants = __webpack_require__(337);
	var EventPluginRegistry = __webpack_require__(340);
	var ReactEventEmitterMixin = __webpack_require__(404);
	var ViewportMetrics = __webpack_require__(373);

	var getVendorPrefixedEventName = __webpack_require__(405);
	var isEventSupported = __webpack_require__(367);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = document.createEvent && 'pageX' in document.createEvent('MouseEvent');
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }

	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(339);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getVendorPrefixedEventName
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(345);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var DisabledInputUtils = __webpack_require__(407);

	/**
	 * Implements a <button> host component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getHostProps: DisabledInputUtils.getHostProps
	};

	module.exports = ReactDOMButton;

/***/ },
/* 407 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DisabledInputUtils
	 */

	'use strict';

	var disableableMouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a host component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var DisabledInputUtils = {
	  getHostProps: function (inst, props) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var hostProps = {};
	    for (var key in props) {
	      if (!disableableMouseListenerNames[key] && props.hasOwnProperty(key)) {
	        hostProps[key] = props[key];
	      }
	    }

	    return hostProps;
	  }
	};

	module.exports = DisabledInputUtils;

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303),
	    _assign = __webpack_require__(300);

	var DisabledInputUtils = __webpack_require__(407);
	var DOMPropertyOperations = __webpack_require__(401);
	var LinkedValueUtils = __webpack_require__(409);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactUpdates = __webpack_require__(352);

	var invariant = __webpack_require__(304);
	var warning = __webpack_require__(307);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked !== undefined : props.value !== undefined;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, DisabledInputUtils.getHostProps(inst, props), {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {

	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        node.defaultValue = '' + props.defaultValue;
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var ReactPropTypes = __webpack_require__(327);
	var ReactPropTypeLocations = __webpack_require__(318);
	var ReactPropTypesSecret = __webpack_require__(326);

	var invariant = __webpack_require__(304);
	var warning = __webpack_require__(307);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var ReactChildren = __webpack_require__(301);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactDOMSelect = __webpack_require__(411);

	var warning = __webpack_require__(307);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  ReactChildren.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var DisabledInputUtils = __webpack_require__(407);
	var LinkedValueUtils = __webpack_require__(409);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactUpdates = __webpack_require__(352);

	var warning = __webpack_require__(307);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, DisabledInputUtils.getHostProps(inst, props), {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303),
	    _assign = __webpack_require__(300);

	var DisabledInputUtils = __webpack_require__(407);
	var LinkedValueUtils = __webpack_require__(409);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactUpdates = __webpack_require__(352);

	var invariant = __webpack_require__(304);
	var warning = __webpack_require__(307);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, DisabledInputUtils.getHostProps(inst, props), {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Warning: node.value may be the empty string at this point (IE11) if placeholder is set.
	    node.value = node.textContent; // Detach value from defaultValue
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var ReactComponentEnvironment = __webpack_require__(414);
	var ReactInstanceMap = __webpack_require__(415);
	var ReactInstrumentation = __webpack_require__(358);
	var ReactMultiChildUpdateTypes = __webpack_require__(388);

	var ReactCurrentOwner = __webpack_require__(306);
	var ReactReconciler = __webpack_require__(355);
	var ReactChildReconciler = __webpack_require__(416);

	var emptyFunction = __webpack_require__(308);
	var flattenChildren = __webpack_require__(424);
	var invariant = __webpack_require__(304);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var invariant = __webpack_require__(304);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 415 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(355);

	var instantiateReactComponent = __webpack_require__(417);
	var KeyEscapeUtils = __webpack_require__(312);
	var shouldUpdateReactComponent = __webpack_require__(421);
	var traverseAllChildren = __webpack_require__(310);
	var warning = __webpack_require__(307);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(324);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(324);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303),
	    _assign = __webpack_require__(300);

	var ReactCompositeComponent = __webpack_require__(418);
	var ReactEmptyComponent = __webpack_require__(422);
	var ReactHostComponent = __webpack_require__(423);

	var invariant = __webpack_require__(304);
	var warning = __webpack_require__(307);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	var nextDebugID = 1;

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? nextDebugID++ : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303),
	    _assign = __webpack_require__(300);

	var ReactComponentEnvironment = __webpack_require__(414);
	var ReactCurrentOwner = __webpack_require__(306);
	var ReactElement = __webpack_require__(305);
	var ReactErrorUtils = __webpack_require__(342);
	var ReactInstanceMap = __webpack_require__(415);
	var ReactInstrumentation = __webpack_require__(358);
	var ReactNodeTypes = __webpack_require__(419);
	var ReactPropTypeLocations = __webpack_require__(318);
	var ReactReconciler = __webpack_require__(355);

	var checkReactTypeSpec = __webpack_require__(325);
	var emptyObject = __webpack_require__(315);
	var invariant = __webpack_require__(304);
	var shallowEqual = __webpack_require__(420);
	var shouldUpdateReactComponent = __webpack_require__(421);
	var warning = __webpack_require__(307);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || ReactElement.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function invokeComponentDidMountWithTimer() {
	  var publicInstance = this._instance;
	  if (this._debugID !== 0) {
	    ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentDidMount');
	  }
	  publicInstance.componentDidMount();
	  if (this._debugID !== 0) {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentDidMount');
	  }
	}

	function invokeComponentDidUpdateWithTimer(prevProps, prevState, prevContext) {
	  var publicInstance = this._instance;
	  if (this._debugID !== 0) {
	    ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentDidUpdate');
	  }
	  publicInstance.componentDidUpdate(prevProps, prevState, prevContext);
	  if (this._debugID !== 0) {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentDidUpdate');
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || ReactElement.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(invokeComponentDidMountWithTimer, this);
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	    var instanceOrElement;
	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'ctor');
	        }
	      }
	      instanceOrElement = new Component(publicProps, publicContext, updateQueue);
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'ctor');
	        }
	      }
	    } else {
	      // This can still be an instance in case of factory components
	      // but we'll count this as time spent rendering as the more common case.
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'render');
	        }
	      }
	      instanceOrElement = Component(publicProps, publicContext, updateQueue);
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'render');
	        }
	      }
	    }
	    return instanceOrElement;
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onError();
	        }
	      }
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillMount');
	        }
	      }
	      inst.componentWillMount();
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillMount');
	        }
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var selfDebugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      selfDebugID = this._debugID;
	    }
	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), selfDebugID);

	    if (process.env.NODE_ENV !== 'production') {
	      if (this._debugID !== 0) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, child._debugID !== 0 ? [child._debugID] : []);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillUnmount');
	        }
	      }
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        inst.componentWillUnmount();
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillUnmount');
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	    }
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onEndProcessingChildContext();
	    }
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillReceiveProps');
	        }
	      }
	      inst.componentWillReceiveProps(nextProps, nextContext);
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillReceiveProps');
	        }
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          if (this._debugID !== 0) {
	            ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'shouldComponentUpdate');
	          }
	        }
	        shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        if (process.env.NODE_ENV !== 'production') {
	          if (this._debugID !== 0) {
	            ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'shouldComponentUpdate');
	          }
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillUpdate');
	        }
	      }
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillUpdate');
	        }
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(invokeComponentDidUpdateWithTimer.bind(this, prevProps, prevState, prevContext), this);
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = this._debugID;
	      }
	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), selfDebugID);

	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onSetChildren(this._debugID, child._debugID !== 0 ? [child._debugID] : []);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;

	    if (process.env.NODE_ENV !== 'production') {
	      if (this._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'render');
	      }
	    }
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      if (this._debugID !== 0) {
	        ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'render');
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedComponent === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNodeTypes
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var ReactElement = __webpack_require__(305);

	var invariant = __webpack_require__(304);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (ReactElement.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 420 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 421 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 422 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactHostComponent
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303),
	    _assign = __webpack_require__(300);

	var invariant = __webpack_require__(304);

	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around host tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(312);
	var traverseAllChildren = __webpack_require__(310);
	var warning = __webpack_require__(307);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(324);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(324);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var PooledClass = __webpack_require__(302);
	var Transaction = __webpack_require__(365);
	var ReactInstrumentation = __webpack_require__(358);
	var ReactServerUpdateQueue = __webpack_require__(426);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerUpdateQueue
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(427);
	var Transaction = __webpack_require__(365);
	var warning = __webpack_require__(307);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  /* :: transaction: Transaction; */

	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var ReactCurrentOwner = __webpack_require__(306);
	var ReactInstanceMap = __webpack_require__(415);
	var ReactInstrumentation = __webpack_require__(358);
	var ReactUpdates = __webpack_require__(352);

	var invariant = __webpack_require__(304);
	var warning = __webpack_require__(307);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var emptyFunction = __webpack_require__(308);
	var warning = __webpack_require__(307);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      if (childTag !== '#text') {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>. ' + 'See %s.%s', tagDisplayName, ancestorTag, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMEmptyComponent
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var DOMLazyTree = __webpack_require__(378);
	var ReactDOMComponentTree = __webpack_require__(332);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTreeTraversal
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var invariant = __webpack_require__(304);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], false, arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], true, arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], true, argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], false, argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303),
	    _assign = __webpack_require__(300);

	var DOMChildrenOperations = __webpack_require__(377);
	var DOMLazyTree = __webpack_require__(378);
	var ReactDOMComponentTree = __webpack_require__(332);

	var escapeTextContentForBrowser = __webpack_require__(383);
	var invariant = __webpack_require__(304);
	var validateDOMNesting = __webpack_require__(428);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting('#text', this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var ReactUpdates = __webpack_require__(352);
	var Transaction = __webpack_require__(365);

	var emptyFunction = __webpack_require__(308);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var EventListener = __webpack_require__(434);
	var ExecutionEnvironment = __webpack_require__(345);
	var PooledClass = __webpack_require__(302);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactUpdates = __webpack_require__(352);

	var getEventTarget = __webpack_require__(366);
	var getUnboundedScrollPosition = __webpack_require__(435);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(308);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 435 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(333);
	var EventPluginHub = __webpack_require__(339);
	var EventPluginUtils = __webpack_require__(341);
	var ReactComponentEnvironment = __webpack_require__(414);
	var ReactClass = __webpack_require__(317);
	var ReactEmptyComponent = __webpack_require__(422);
	var ReactBrowserEventEmitter = __webpack_require__(403);
	var ReactHostComponent = __webpack_require__(423);
	var ReactUpdates = __webpack_require__(352);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 */

	'use strict';

	var _assign = __webpack_require__(300);

	var CallbackQueue = __webpack_require__(353);
	var PooledClass = __webpack_require__(302);
	var ReactBrowserEventEmitter = __webpack_require__(403);
	var ReactInputSelection = __webpack_require__(438);
	var ReactInstrumentation = __webpack_require__(358);
	var Transaction = __webpack_require__(365);
	var ReactUpdateQueue = __webpack_require__(427);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(439);

	var containsNode = __webpack_require__(441);
	var focusNode = __webpack_require__(392);
	var getActiveElement = __webpack_require__(444);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(345);

	var getNodeForCharacterOffset = __webpack_require__(440);
	var getTextContentAccessor = __webpack_require__(347);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 440 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(442);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(443);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 443 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 444 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 445 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(337);
	var EventPropagators = __webpack_require__(338);
	var ExecutionEnvironment = __webpack_require__(345);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactInputSelection = __webpack_require__(438);
	var SyntheticEvent = __webpack_require__(349);

	var getActiveElement = __webpack_require__(444);
	var isTextInputElement = __webpack_require__(368);
	var keyOf = __webpack_require__(321);
	var shallowEqual = __webpack_require__(420);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var EventConstants = __webpack_require__(337);
	var EventListener = __webpack_require__(434);
	var EventPropagators = __webpack_require__(338);
	var ReactDOMComponentTree = __webpack_require__(332);
	var SyntheticAnimationEvent = __webpack_require__(448);
	var SyntheticClipboardEvent = __webpack_require__(449);
	var SyntheticEvent = __webpack_require__(349);
	var SyntheticFocusEvent = __webpack_require__(450);
	var SyntheticKeyboardEvent = __webpack_require__(451);
	var SyntheticMouseEvent = __webpack_require__(371);
	var SyntheticDragEvent = __webpack_require__(454);
	var SyntheticTouchEvent = __webpack_require__(455);
	var SyntheticTransitionEvent = __webpack_require__(456);
	var SyntheticUIEvent = __webpack_require__(372);
	var SyntheticWheelEvent = __webpack_require__(457);

	var emptyFunction = __webpack_require__(308);
	var getEventCharCode = __webpack_require__(452);
	var invariant = __webpack_require__(304);
	var keyOf = __webpack_require__(321);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  animationEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationEnd: true }),
	      captured: keyOf({ onAnimationEndCapture: true })
	    }
	  },
	  animationIteration: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationIteration: true }),
	      captured: keyOf({ onAnimationIterationCapture: true })
	    }
	  },
	  animationStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationStart: true }),
	      captured: keyOf({ onAnimationStartCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  invalid: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInvalid: true }),
	      captured: keyOf({ onInvalidCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  transitionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTransitionEnd: true }),
	      captured: keyOf({ onTransitionEndCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topAnimationEnd: eventTypes.animationEnd,
	  topAnimationIteration: eventTypes.animationIteration,
	  topAnimationStart: eventTypes.animationStart,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topInvalid: eventTypes.invalid,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topTransitionEnd: eventTypes.transitionEnd,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topInvalid:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topAnimationEnd:
	      case topLevelTypes.topAnimationIteration:
	      case topLevelTypes.topAnimationStart:
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case topLevelTypes.topTransitionEnd:
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticAnimationEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(349);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(349);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(372);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(372);

	var getEventCharCode = __webpack_require__(452);
	var getEventKey = __webpack_require__(453);
	var getEventModifierState = __webpack_require__(374);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 452 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(452);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(371);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(372);

	var getEventModifierState = __webpack_require__(374);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTransitionEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(349);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(371);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var DOMLazyTree = __webpack_require__(378);
	var DOMProperty = __webpack_require__(333);
	var ReactBrowserEventEmitter = __webpack_require__(403);
	var ReactCurrentOwner = __webpack_require__(306);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactDOMContainerInfo = __webpack_require__(459);
	var ReactDOMFeatureFlags = __webpack_require__(460);
	var ReactElement = __webpack_require__(305);
	var ReactFeatureFlags = __webpack_require__(354);
	var ReactInstanceMap = __webpack_require__(415);
	var ReactInstrumentation = __webpack_require__(358);
	var ReactMarkupChecksum = __webpack_require__(461);
	var ReactReconciler = __webpack_require__(355);
	var ReactUpdateQueue = __webpack_require__(427);
	var ReactUpdates = __webpack_require__(352);

	var emptyObject = __webpack_require__(315);
	var instantiateReactComponent = __webpack_require__(417);
	var invariant = __webpack_require__(304);
	var setInnerHTML = __webpack_require__(380);
	var shouldUpdateReactComponent = __webpack_require__(421);
	var warning = __webpack_require__(307);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation(hostNode._debugID, 'mount', markup.toString());
	      }
	    }
	  }
	};

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMContainerInfo
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(428);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 460 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(462);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 462 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(303);

	var ReactCurrentOwner = __webpack_require__(306);
	var ReactDOMComponentTree = __webpack_require__(332);
	var ReactInstanceMap = __webpack_require__(415);

	var getHostComponentFromComposite = __webpack_require__(464);
	var invariant = __webpack_require__(304);
	var warning = __webpack_require__(307);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getHostComponentFromComposite
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(419);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(458);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMUnknownPropertyHook
	 */

	'use strict';

	var DOMProperty = __webpack_require__(333);
	var EventPluginRegistry = __webpack_require__(340);
	var ReactComponentTreeHook = __webpack_require__(324);

	var warning = __webpack_require__(307);

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,

	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};

	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}

	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}

	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMNullInputValuePropHook
	 */

	'use strict';

	var ReactComponentTreeHook = __webpack_require__(324);

	var warning = __webpack_require__(307);

	var didWarnValueNull = false;

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

	    didWarnValueNull = true;
	  }
	}

	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(298);

	var _react2 = _interopRequireDefault(_react);

	var _videoPlayer = __webpack_require__(469);

	var _videoPlayer2 = _interopRequireDefault(_videoPlayer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// React


	// Containers


	var VideoContainer = function (_Component) {
	  _inherits(VideoContainer, _Component);

	  function VideoContainer(props) {
	    _classCallCheck(this, VideoContainer);

	    return _possibleConstructorReturn(this, (VideoContainer.__proto__ || Object.getPrototypeOf(VideoContainer)).call(this, props));
	  }

	  _createClass(VideoContainer, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var fileUrl = _props.fileUrl;
	      var mime = _props.mime;
	      var playerOptions = _props.playerOptions;
	      var plugins = _props.plugins;

	      return _react2.default.createElement(_videoPlayer2.default, { src: fileUrl, mime: mime, playerOptions: playerOptions, plugins: plugins });
	    }
	  }]);

	  return VideoContainer;
	}(_react.Component);

	VideoContainer.propTypes = {
	  fileUrl: _react.PropTypes.string.isRequired,
	  mime: _react.PropTypes.string.isRequired,
	  playerOptions: _react.PropTypes.object,
	  plugins: _react.PropTypes.array,
	  store: _react.PropTypes.object // option to connect to store or take props in index (must be wrapped in <Provider/>)
	};

	// Connect to redux store

	exports.default = VideoContainer;

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(298);

	var _react2 = _interopRequireDefault(_react);

	var _video = __webpack_require__(470);

	var _video2 = _interopRequireDefault(_video);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// React


	// VideoJS


	var VideoPlayer = function (_Component) {
	  _inherits(VideoPlayer, _Component);

	  function VideoPlayer(props) {
	    _classCallCheck(this, VideoPlayer);

	    return _possibleConstructorReturn(this, (VideoPlayer.__proto__ || Object.getPrototypeOf(VideoPlayer)).call(this, props));
	  }
	  // Lifecycle methods


	  _createClass(VideoPlayer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.initPlayer();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var currentSrc = this.props.src;
	      var newSrc = nextProps.src;
	      if (currentSrc !== newSrc) {
	        this.setSrc(newSrc);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.player.dispose();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'video',
	        { ref: 'videoJSPlayer', className: 'video-js vjs-default-skin vjs-big-play-centered' },
	        this.props.children
	      );
	    }
	    // Player related methods

	  }, {
	    key: 'initPlayer',
	    value: function initPlayer() {
	      var src = this.props.src;
	      var options = this.props.playerOptions;
	      this.player = (0, _video2.default)(this.getPlayerElement(), options);
	      this.player.src(src);
	      this.registerPlugins();
	    }
	    // Assuming all videojs plugins are written according to https://github.com/videojs/video.js/blob/master/docs/guides/plugins.md

	  }, {
	    key: 'registerPlugins',
	    value: function registerPlugins() {
	      var _this2 = this;

	      var plugins = this.props.plugins;
	      plugins.forEach(function (pluginObj) {
	        _video2.default.plugin(pluginObj.name, pluginObj.plugin);
	        _this2.player[pluginObj.name] = pluginObj.plugin.call(_this2.player, pluginObj.options);
	      });
	    }
	  }, {
	    key: 'getPlayerElement',
	    value: function getPlayerElement() {
	      return this.refs.videoJSPlayer;
	    }
	  }, {
	    key: 'setSrc',
	    value: function setSrc(src) {
	      this.player.src = src;
	    }
	  }]);

	  return VideoPlayer;
	}(_react.Component);

	exports.default = VideoPlayer;


	VideoPlayer.propTypes = {
	  src: _react.PropTypes.string.isRequired,
	  playerOptions: _react.PropTypes.object,
	  mime: _react.PropTypes.string.isRequired,
	  plugins: _react.PropTypes.array
	};

/***/ },
/* 470 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Video.js 5.11.6 <http://videojs.com/>
	 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
	 * Available under Apache License Version 2.0
	 * <https://github.com/videojs/video.js/blob/master/LICENSE>
	 *
	 * Includes vtt.js <https://github.com/mozilla/vtt.js>
	 * Available under Apache License Version 2.0
	 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
	 */

	(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.videojs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	(function (global){
	var topLevel = typeof global !== 'undefined' ? global :
	    typeof window !== 'undefined' ? window : {}
	var minDoc = _dereq_('min-document');

	if (typeof document !== 'undefined') {
	    module.exports = document;
	} else {
	    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

	    if (!doccy) {
	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
	    }

	    module.exports = doccy;
	}

	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9nbG9iYWwvZG9jdW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9wTGV2ZWwgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fVxudmFyIG1pbkRvYyA9IHJlcXVpcmUoJ21pbi1kb2N1bWVudCcpO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQ7XG59IGVsc2Uge1xuICAgIHZhciBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J107XG5cbiAgICBpZiAoIWRvY2N5KSB7XG4gICAgICAgIGRvY2N5ID0gdG9wTGV2ZWxbJ19fR0xPQkFMX0RPQ1VNRU5UX0NBQ0hFQDQnXSA9IG1pbkRvYztcbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGRvY2N5O1xufVxuIl19
	},{"min-document":3}],2:[function(_dereq_,module,exports){
	(function (global){
	if (typeof window !== "undefined") {
	    module.exports = window;
	} else if (typeof global !== "undefined") {
	    module.exports = global;
	} else if (typeof self !== "undefined"){
	    module.exports = self;
	} else {
	    module.exports = {};
	}

	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9nbG9iYWwvd2luZG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBzZWxmO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHt9O1xufVxuIl19
	},{}],3:[function(_dereq_,module,exports){

	},{}],4:[function(_dereq_,module,exports){
	var getNative = _dereq_('../internal/getNative');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeNow = getNative(Date, 'now');

	/**
	 * Gets the number of milliseconds that have elapsed since the Unix epoch
	 * (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @category Date
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => logs the number of milliseconds it took for the deferred function to be invoked
	 */
	var now = nativeNow || function() {
	  return new Date().getTime();
	};

	module.exports = now;

	},{"../internal/getNative":20}],5:[function(_dereq_,module,exports){
	var isObject = _dereq_('../lang/isObject'),
	    now = _dereq_('../date/now');

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed invocations. Provide an options object to indicate that `func`
	 * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	 * Subsequent calls to the debounced function return the result of the last
	 * `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	 * on the trailing edge of the timeout only if the the debounced function is
	 * invoked more than once during the `wait` timeout.
	 *
	 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.leading=false] Specify invoking on the leading
	 *  edge of the timeout.
	 * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	 *  delayed before it's invoked.
	 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	 *  edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // avoid costly calculations while the window size is in flux
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	 * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // ensure `batchLog` is invoked once after 1 second of debounced calls
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', _.debounce(batchLog, 250, {
	 *   'maxWait': 1000
	 * }));
	 *
	 * // cancel a debounced call
	 * var todoChanges = _.debounce(batchLog, 1000);
	 * Object.observe(models.todo, todoChanges);
	 *
	 * Object.observe(models, function(changes) {
	 *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	 *     todoChanges.cancel();
	 *   }
	 * }, ['delete']);
	 *
	 * // ...at some point `models.todo` is changed
	 * models.todo.completed = true;
	 *
	 * // ...before 1 second has passed `models.todo` is deleted
	 * // which cancels the debounced `todoChanges` call
	 * delete models.todo;
	 */
	function debounce(func, wait, options) {
	  var args,
	      maxTimeoutId,
	      result,
	      stamp,
	      thisArg,
	      timeoutId,
	      trailingCall,
	      lastCalled = 0,
	      maxWait = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = wait < 0 ? 0 : (+wait || 0);
	  if (options === true) {
	    var leading = true;
	    trailing = false;
	  } else if (isObject(options)) {
	    leading = !!options.leading;
	    maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function cancel() {
	    if (timeoutId) {
	      clearTimeout(timeoutId);
	    }
	    if (maxTimeoutId) {
	      clearTimeout(maxTimeoutId);
	    }
	    lastCalled = 0;
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	  }

	  function complete(isCalled, id) {
	    if (id) {
	      clearTimeout(id);
	    }
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	    if (isCalled) {
	      lastCalled = now();
	      result = func.apply(thisArg, args);
	      if (!timeoutId && !maxTimeoutId) {
	        args = thisArg = undefined;
	      }
	    }
	  }

	  function delayed() {
	    var remaining = wait - (now() - stamp);
	    if (remaining <= 0 || remaining > wait) {
	      complete(trailingCall, maxTimeoutId);
	    } else {
	      timeoutId = setTimeout(delayed, remaining);
	    }
	  }

	  function maxDelayed() {
	    complete(trailing, timeoutId);
	  }

	  function debounced() {
	    args = arguments;
	    stamp = now();
	    thisArg = this;
	    trailingCall = trailing && (timeoutId || !leading);

	    if (maxWait === false) {
	      var leadingCall = leading && !timeoutId;
	    } else {
	      if (!maxTimeoutId && !leading) {
	        lastCalled = stamp;
	      }
	      var remaining = maxWait - (stamp - lastCalled),
	          isCalled = remaining <= 0 || remaining > maxWait;

	      if (isCalled) {
	        if (maxTimeoutId) {
	          maxTimeoutId = clearTimeout(maxTimeoutId);
	        }
	        lastCalled = stamp;
	        result = func.apply(thisArg, args);
	      }
	      else if (!maxTimeoutId) {
	        maxTimeoutId = setTimeout(maxDelayed, remaining);
	      }
	    }
	    if (isCalled && timeoutId) {
	      timeoutId = clearTimeout(timeoutId);
	    }
	    else if (!timeoutId && wait !== maxWait) {
	      timeoutId = setTimeout(delayed, wait);
	    }
	    if (leadingCall) {
	      isCalled = true;
	      result = func.apply(thisArg, args);
	    }
	    if (isCalled && !timeoutId && !maxTimeoutId) {
	      args = thisArg = undefined;
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  return debounced;
	}

	module.exports = debounce;

	},{"../date/now":4,"../lang/isObject":33}],6:[function(_dereq_,module,exports){
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;

	},{}],7:[function(_dereq_,module,exports){
	var debounce = _dereq_('./debounce'),
	    isObject = _dereq_('../lang/isObject');

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed invocations. Provide an options object to indicate
	 * that `func` should be invoked on the leading and/or trailing edge of the
	 * `wait` timeout. Subsequent calls to the throttled function return the
	 * result of the last `func` call.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	 * on the trailing edge of the timeout only if the the throttled function is
	 * invoked more than once during the `wait` timeout.
	 *
	 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.leading=true] Specify invoking on the leading
	 *  edge of the timeout.
	 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	 *  edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // avoid excessively updating the position while scrolling
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	 * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	 *   'trailing': false
	 * }));
	 *
	 * // cancel a trailing throttled call
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  if (options === false) {
	    leading = false;
	  } else if (isObject(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	}

	module.exports = throttle;

	},{"../lang/isObject":33,"./debounce":5}],8:[function(_dereq_,module,exports){
	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function arrayCopy(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = arrayCopy;

	},{}],9:[function(_dereq_,module,exports){
	/**
	 * A specialized version of `_.forEach` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;

	},{}],10:[function(_dereq_,module,exports){
	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property names to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @returns {Object} Returns `object`.
	 */
	function baseCopy(source, props, object) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}

	module.exports = baseCopy;

	},{}],11:[function(_dereq_,module,exports){
	var createBaseFor = _dereq_('./createBaseFor');

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;

	},{"./createBaseFor":18}],12:[function(_dereq_,module,exports){
	var baseFor = _dereq_('./baseFor'),
	    keysIn = _dereq_('../object/keysIn');

	/**
	 * The base implementation of `_.forIn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForIn(object, iteratee) {
	  return baseFor(object, iteratee, keysIn);
	}

	module.exports = baseForIn;

	},{"../object/keysIn":39,"./baseFor":11}],13:[function(_dereq_,module,exports){
	var arrayEach = _dereq_('./arrayEach'),
	    baseMergeDeep = _dereq_('./baseMergeDeep'),
	    isArray = _dereq_('../lang/isArray'),
	    isArrayLike = _dereq_('./isArrayLike'),
	    isObject = _dereq_('../lang/isObject'),
	    isObjectLike = _dereq_('./isObjectLike'),
	    isTypedArray = _dereq_('../lang/isTypedArray'),
	    keys = _dereq_('../object/keys');

	/**
	 * The base implementation of `_.merge` without support for argument juggling,
	 * multiple sources, and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {Object} Returns `object`.
	 */
	function baseMerge(object, source, customizer, stackA, stackB) {
	  if (!isObject(object)) {
	    return object;
	  }
	  var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	      props = isSrcArr ? undefined : keys(source);

	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObjectLike(srcValue)) {
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	      baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	    }
	    else {
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	      }
	      if ((result !== undefined || (isSrcArr && !(key in object))) &&
	          (isCommon || (result === result ? (result !== value) : (value === value)))) {
	        object[key] = result;
	      }
	    }
	  });
	  return object;
	}

	module.exports = baseMerge;

	},{"../lang/isArray":30,"../lang/isObject":33,"../lang/isTypedArray":36,"../object/keys":38,"./arrayEach":9,"./baseMergeDeep":14,"./isArrayLike":21,"./isObjectLike":26}],14:[function(_dereq_,module,exports){
	var arrayCopy = _dereq_('./arrayCopy'),
	    isArguments = _dereq_('../lang/isArguments'),
	    isArray = _dereq_('../lang/isArray'),
	    isArrayLike = _dereq_('./isArrayLike'),
	    isPlainObject = _dereq_('../lang/isPlainObject'),
	    isTypedArray = _dereq_('../lang/isTypedArray'),
	    toPlainObject = _dereq_('../lang/toPlainObject');

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	  var length = stackA.length,
	      srcValue = source[key];

	  while (length--) {
	    if (stackA[length] == srcValue) {
	      object[key] = stackB[length];
	      return;
	    }
	  }
	  var value = object[key],
	      result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	      isCommon = result === undefined;

	  if (isCommon) {
	    result = srcValue;
	    if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	      result = isArray(value)
	        ? value
	        : (isArrayLike(value) ? arrayCopy(value) : []);
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      result = isArguments(value)
	        ? toPlainObject(value)
	        : (isPlainObject(value) ? value : {});
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate
	  // it with its merged value.
	  stackA.push(srcValue);
	  stackB.push(result);

	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	  } else if (result === result ? (result !== value) : (value === value)) {
	    object[key] = result;
	  }
	}

	module.exports = baseMergeDeep;

	},{"../lang/isArguments":29,"../lang/isArray":30,"../lang/isPlainObject":34,"../lang/isTypedArray":36,"../lang/toPlainObject":37,"./arrayCopy":8,"./isArrayLike":21}],15:[function(_dereq_,module,exports){
	var toObject = _dereq_('./toObject');

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : toObject(object)[key];
	  };
	}

	module.exports = baseProperty;

	},{"./toObject":28}],16:[function(_dereq_,module,exports){
	var identity = _dereq_('../utility/identity');

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}

	module.exports = bindCallback;

	},{"../utility/identity":42}],17:[function(_dereq_,module,exports){
	var bindCallback = _dereq_('./bindCallback'),
	    isIterateeCall = _dereq_('./isIterateeCall'),
	    restParam = _dereq_('../function/restParam');

	/**
	 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return restParam(function(object, sources) {
	    var index = -1,
	        length = object == null ? 0 : sources.length,
	        customizer = length > 2 ? sources[length - 2] : undefined,
	        guard = length > 2 ? sources[2] : undefined,
	        thisArg = length > 1 ? sources[length - 1] : undefined;

	    if (typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = typeof thisArg == 'function' ? thisArg : undefined;
	      length -= (customizer ? 1 : 0);
	    }
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;

	},{"../function/restParam":6,"./bindCallback":16,"./isIterateeCall":24}],18:[function(_dereq_,module,exports){
	var toObject = _dereq_('./toObject');

	/**
	 * Creates a base function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var iterable = toObject(object),
	        props = keysFunc(object),
	        length = props.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      var key = props[index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;

	},{"./toObject":28}],19:[function(_dereq_,module,exports){
	var baseProperty = _dereq_('./baseProperty');

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	module.exports = getLength;

	},{"./baseProperty":15}],20:[function(_dereq_,module,exports){
	var isNative = _dereq_('../lang/isNative');

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;

	},{"../lang/isNative":32}],21:[function(_dereq_,module,exports){
	var getLength = _dereq_('./getLength'),
	    isLength = _dereq_('./isLength');

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	module.exports = isArrayLike;

	},{"./getLength":19,"./isLength":25}],22:[function(_dereq_,module,exports){
	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	var isHostObject = (function() {
	  try {
	    Object({ 'toString': 0 } + '');
	  } catch(e) {
	    return function() { return false; };
	  }
	  return function(value) {
	    // IE < 9 presents many host objects as `Object` objects that can coerce
	    // to strings despite having improperly defined `toString` methods.
	    return typeof value.toString != 'function' && typeof (value + '') == 'string';
	  };
	}());

	module.exports = isHostObject;

	},{}],23:[function(_dereq_,module,exports){
	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;

	},{}],24:[function(_dereq_,module,exports){
	var isArrayLike = _dereq_('./isArrayLike'),
	    isIndex = _dereq_('./isIndex'),
	    isObject = _dereq_('../lang/isObject');

	/**
	 * Checks if the provided arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	      ? (isArrayLike(object) && isIndex(index, object.length))
	      : (type == 'string' && index in object)) {
	    var other = object[index];
	    return value === value ? (value === other) : (other !== other);
	  }
	  return false;
	}

	module.exports = isIterateeCall;

	},{"../lang/isObject":33,"./isArrayLike":21,"./isIndex":23}],25:[function(_dereq_,module,exports){
	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;

	},{}],26:[function(_dereq_,module,exports){
	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;

	},{}],27:[function(_dereq_,module,exports){
	var isArguments = _dereq_('../lang/isArguments'),
	    isArray = _dereq_('../lang/isArray'),
	    isIndex = _dereq_('./isIndex'),
	    isLength = _dereq_('./isLength'),
	    isString = _dereq_('../lang/isString'),
	    keysIn = _dereq_('../object/keysIn');

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object) || isString(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = shimKeys;

	},{"../lang/isArguments":29,"../lang/isArray":30,"../lang/isString":35,"../object/keysIn":39,"./isIndex":23,"./isLength":25}],28:[function(_dereq_,module,exports){
	var isObject = _dereq_('../lang/isObject'),
	    isString = _dereq_('../lang/isString'),
	    support = _dereq_('../support');

	/**
	 * Converts `value` to an object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Object} Returns the object.
	 */
	function toObject(value) {
	  if (support.unindexedChars && isString(value)) {
	    var index = -1,
	        length = value.length,
	        result = Object(value);

	    while (++index < length) {
	      result[index] = value.charAt(index);
	    }
	    return result;
	  }
	  return isObject(value) ? value : Object(value);
	}

	module.exports = toObject;

	},{"../lang/isObject":33,"../lang/isString":35,"../support":41}],29:[function(_dereq_,module,exports){
	var isArrayLike = _dereq_('../internal/isArrayLike'),
	    isObjectLike = _dereq_('../internal/isObjectLike');

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is classified as an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  return isObjectLike(value) && isArrayLike(value) &&
	    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	}

	module.exports = isArguments;

	},{"../internal/isArrayLike":21,"../internal/isObjectLike":26}],30:[function(_dereq_,module,exports){
	var getNative = _dereq_('../internal/getNative'),
	    isLength = _dereq_('../internal/isLength'),
	    isObjectLike = _dereq_('../internal/isObjectLike');

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	module.exports = isArray;

	},{"../internal/getNative":20,"../internal/isLength":25,"../internal/isObjectLike":26}],31:[function(_dereq_,module,exports){
	var isObject = _dereq_('./isObject');

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 which returns 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	module.exports = isFunction;

	},{"./isObject":33}],32:[function(_dereq_,module,exports){
	var isFunction = _dereq_('./isFunction'),
	    isHostObject = _dereq_('../internal/isHostObject'),
	    isObjectLike = _dereq_('../internal/isObjectLike');

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
	}

	module.exports = isNative;

	},{"../internal/isHostObject":22,"../internal/isObjectLike":26,"./isFunction":31}],33:[function(_dereq_,module,exports){
	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;

	},{}],34:[function(_dereq_,module,exports){
	var baseForIn = _dereq_('../internal/baseForIn'),
	    isArguments = _dereq_('./isArguments'),
	    isHostObject = _dereq_('../internal/isHostObject'),
	    isObjectLike = _dereq_('../internal/isObjectLike'),
	    support = _dereq_('../support');

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * **Note:** This method assumes objects created by the `Object` constructor
	 * have no inherited enumerable properties.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  var Ctor;

	  // Exit early for non `Object` objects.
	  if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isHostObject(value) && !isArguments(value)) ||
	      (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	    return false;
	  }
	  // IE < 9 iterates inherited properties before own properties. If the first
	  // iterated property is an object's own property then there are no inherited
	  // enumerable properties.
	  var result;
	  if (support.ownLast) {
	    baseForIn(value, function(subValue, key, object) {
	      result = hasOwnProperty.call(object, key);
	      return false;
	    });
	    return result !== false;
	  }
	  // In most environments an object's own properties are iterated before
	  // its inherited properties. If the last iterated property is an object's
	  // own property then there are no inherited enumerable properties.
	  baseForIn(value, function(subValue, key) {
	    result = key;
	  });
	  return result === undefined || hasOwnProperty.call(value, result);
	}

	module.exports = isPlainObject;

	},{"../internal/baseForIn":12,"../internal/isHostObject":22,"../internal/isObjectLike":26,"../support":41,"./isArguments":29}],35:[function(_dereq_,module,exports){
	var isObjectLike = _dereq_('../internal/isObjectLike');

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	}

	module.exports = isString;

	},{"../internal/isObjectLike":26}],36:[function(_dereq_,module,exports){
	var isLength = _dereq_('../internal/isLength'),
	    isObjectLike = _dereq_('../internal/isObjectLike');

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}

	module.exports = isTypedArray;

	},{"../internal/isLength":25,"../internal/isObjectLike":26}],37:[function(_dereq_,module,exports){
	var baseCopy = _dereq_('../internal/baseCopy'),
	    keysIn = _dereq_('../object/keysIn');

	/**
	 * Converts `value` to a plain object flattening inherited enumerable
	 * properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return baseCopy(value, keysIn(value));
	}

	module.exports = toPlainObject;

	},{"../internal/baseCopy":10,"../object/keysIn":39}],38:[function(_dereq_,module,exports){
	var getNative = _dereq_('../internal/getNative'),
	    isArrayLike = _dereq_('../internal/isArrayLike'),
	    isObject = _dereq_('../lang/isObject'),
	    shimKeys = _dereq_('../internal/shimKeys'),
	    support = _dereq_('../support');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object == 'function' ? support.enumPrototypes : isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	module.exports = keys;

	},{"../internal/getNative":20,"../internal/isArrayLike":21,"../internal/shimKeys":27,"../lang/isObject":33,"../support":41}],39:[function(_dereq_,module,exports){
	var arrayEach = _dereq_('../internal/arrayEach'),
	    isArguments = _dereq_('../lang/isArguments'),
	    isArray = _dereq_('../lang/isArray'),
	    isFunction = _dereq_('../lang/isFunction'),
	    isIndex = _dereq_('../internal/isIndex'),
	    isLength = _dereq_('../internal/isLength'),
	    isObject = _dereq_('../lang/isObject'),
	    isString = _dereq_('../lang/isString'),
	    support = _dereq_('../support');

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	/** Used to fix the JScript `[[DontEnum]]` bug. */
	var shadowProps = [
	  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
	  'toLocaleString', 'toString', 'valueOf'
	];

	/** Used for native method references. */
	var errorProto = Error.prototype,
	    objectProto = Object.prototype,
	    stringProto = String.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to avoid iterating over non-enumerable properties in IE < 9. */
	var nonEnumProps = {};
	nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
	nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };
	nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };
	nonEnumProps[objectTag] = { 'constructor': true };

	arrayEach(shadowProps, function(key) {
	  for (var tag in nonEnumProps) {
	    if (hasOwnProperty.call(nonEnumProps, tag)) {
	      var props = nonEnumProps[tag];
	      props[key] = hasOwnProperty.call(props, key);
	    }
	  }
	});

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;

	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object) || isString(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,
	      isProto = proto === object,
	      result = Array(length),
	      skipIndexes = length > 0,
	      skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),
	      skipProto = support.enumPrototypes && isFunction(object);

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  // lodash skips the `constructor` property when it infers it's iterating
	  // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`
	  // attribute of an existing property and the `constructor` property of a
	  // prototype defaults to non-enumerable.
	  for (var key in object) {
	    if (!(skipProto && key == 'prototype') &&
	        !(skipErrorProps && (key == 'message' || key == 'name')) &&
	        !(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  if (support.nonEnumShadows && object !== objectProto) {
	    var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),
	        nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];

	    if (tag == objectTag) {
	      proto = objectProto;
	    }
	    length = shadowProps.length;
	    while (length--) {
	      key = shadowProps[length];
	      var nonEnum = nonEnums[key];
	      if (!(isProto && nonEnum) &&
	          (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {
	        result.push(key);
	      }
	    }
	  }
	  return result;
	}

	module.exports = keysIn;

	},{"../internal/arrayEach":9,"../internal/isIndex":23,"../internal/isLength":25,"../lang/isArguments":29,"../lang/isArray":30,"../lang/isFunction":31,"../lang/isObject":33,"../lang/isString":35,"../support":41}],40:[function(_dereq_,module,exports){
	var baseMerge = _dereq_('../internal/baseMerge'),
	    createAssigner = _dereq_('../internal/createAssigner');

	/**
	 * Recursively merges own enumerable properties of the source object(s), that
	 * don't resolve to `undefined` into the destination object. Subsequent sources
	 * overwrite property assignments of previous sources. If `customizer` is
	 * provided it's invoked to produce the merged values of the destination and
	 * source properties. If `customizer` returns `undefined` merging is handled
	 * by the method instead. The `customizer` is bound to `thisArg` and invoked
	 * with five arguments: (objectValue, sourceValue, key, object, source).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var users = {
	 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	 * };
	 *
	 * var ages = {
	 *   'data': [{ 'age': 36 }, { 'age': 40 }]
	 * };
	 *
	 * _.merge(users, ages);
	 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	 *
	 * // using a customizer callback
	 * var object = {
	 *   'fruits': ['apple'],
	 *   'vegetables': ['beet']
	 * };
	 *
	 * var other = {
	 *   'fruits': ['banana'],
	 *   'vegetables': ['carrot']
	 * };
	 *
	 * _.merge(object, other, function(a, b) {
	 *   if (_.isArray(a)) {
	 *     return a.concat(b);
	 *   }
	 * });
	 * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	 */
	var merge = createAssigner(baseMerge);

	module.exports = merge;

	},{"../internal/baseMerge":13,"../internal/createAssigner":17}],41:[function(_dereq_,module,exports){
	/** Used for native method references. */
	var arrayProto = Array.prototype,
	    errorProto = Error.prototype,
	    objectProto = Object.prototype;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/**
	 * An object environment feature flags.
	 *
	 * @static
	 * @memberOf _
	 * @type Object
	 */
	var support = {};

	(function(x) {
	  var Ctor = function() { this.x = x; },
	      object = { '0': x, 'length': x },
	      props = [];

	  Ctor.prototype = { 'valueOf': x, 'y': x };
	  for (var key in new Ctor) { props.push(key); }

	  /**
	   * Detect if `name` or `message` properties of `Error.prototype` are
	   * enumerable by default (IE < 9, Safari < 5.1).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||
	    propertyIsEnumerable.call(errorProto, 'name');

	  /**
	   * Detect if `prototype` properties are enumerable by default.
	   *
	   * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
	   * (if the prototype or a property on the prototype has been set)
	   * incorrectly set the `[[Enumerable]]` value of a function's `prototype`
	   * property to `true`.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');

	  /**
	   * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	   *
	   * In IE < 9 an object's own properties, shadowing non-enumerable ones,
	   * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.nonEnumShadows = !/valueOf/.test(props);

	  /**
	   * Detect if own properties are iterated after inherited properties (IE < 9).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.ownLast = props[0] != 'x';

	  /**
	   * Detect if `Array#shift` and `Array#splice` augment array-like objects
	   * correctly.
	   *
	   * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array
	   * `shift()` and `splice()` functions that fail to remove the last element,
	   * `value[0]`, of array-like objects even though the "length" property is
	   * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,
	   * while `splice()` is buggy regardless of mode in IE < 9.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.spliceObjects = (splice.call(object, 0, 1), !object[0]);

	  /**
	   * Detect lack of support for accessing string characters by index.
	   *
	   * IE < 8 can't access characters by index. IE 8 can only access characters
	   * by index on string literals, not string objects.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';
	}(1, 0));

	module.exports = support;

	},{}],42:[function(_dereq_,module,exports){
	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;

	},{}],43:[function(_dereq_,module,exports){
	'use strict';

	var keys = _dereq_('object-keys');

	module.exports = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		if (typeof sym === 'string') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(Object(sym) instanceof Symbol)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; }
		if (keys(obj).length !== 0) { return false; }
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};

	},{"object-keys":50}],44:[function(_dereq_,module,exports){
	'use strict';

	// modified from https://github.com/es-shims/es6-shim
	var keys = _dereq_('object-keys');
	var bind = _dereq_('function-bind');
	var canBeObject = function (obj) {
		return typeof obj !== 'undefined' && obj !== null;
	};
	var hasSymbols = _dereq_('./hasSymbols')();
	var toObject = Object;
	var push = bind.call(Function.call, Array.prototype.push);
	var propIsEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);

	module.exports = function assign(target, source1) {
		if (!canBeObject(target)) { throw new TypeError('target must be an object'); }
		var objTarget = toObject(target);
		var s, source, i, props, syms, value, key;
		for (s = 1; s < arguments.length; ++s) {
			source = toObject(arguments[s]);
			props = keys(source);
			if (hasSymbols && Object.getOwnPropertySymbols) {
				syms = Object.getOwnPropertySymbols(source);
				for (i = 0; i < syms.length; ++i) {
					key = syms[i];
					if (propIsEnumerable(source, key)) {
						push(props, key);
					}
				}
			}
			for (i = 0; i < props.length; ++i) {
				key = props[i];
				value = source[key];
				if (propIsEnumerable(source, key)) {
					objTarget[key] = value;
				}
			}
		}
		return objTarget;
	};

	},{"./hasSymbols":43,"function-bind":49,"object-keys":50}],45:[function(_dereq_,module,exports){
	'use strict';

	var defineProperties = _dereq_('define-properties');

	var implementation = _dereq_('./implementation');
	var getPolyfill = _dereq_('./polyfill');
	var shim = _dereq_('./shim');

	defineProperties(implementation, {
		implementation: implementation,
		getPolyfill: getPolyfill,
		shim: shim
	});

	module.exports = implementation;

	},{"./implementation":44,"./polyfill":52,"./shim":53,"define-properties":46}],46:[function(_dereq_,module,exports){
	'use strict';

	var keys = _dereq_('object-keys');
	var foreach = _dereq_('foreach');
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

	var toStr = Object.prototype.toString;

	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
	};

	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
	        /* eslint-disable no-unused-vars, no-restricted-syntax */
	        for (var _ in obj) { return false; }
	        /* eslint-enable no-unused-vars, no-restricted-syntax */
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			Object.defineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};

	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = keys(map);
		if (hasSymbols) {
			props = props.concat(Object.getOwnPropertySymbols(map));
		}
		foreach(props, function (name) {
			defineProperty(object, name, map[name], predicates[name]);
		});
	};

	defineProperties.supportsDescriptors = !!supportsDescriptors;

	module.exports = defineProperties;

	},{"foreach":47,"object-keys":50}],47:[function(_dereq_,module,exports){

	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;

	module.exports = function forEach (obj, fn, ctx) {
	    if (toString.call(fn) !== '[object Function]') {
	        throw new TypeError('iterator must be a function');
	    }
	    var l = obj.length;
	    if (l === +l) {
	        for (var i = 0; i < l; i++) {
	            fn.call(ctx, obj[i], i, obj);
	        }
	    } else {
	        for (var k in obj) {
	            if (hasOwn.call(obj, k)) {
	                fn.call(ctx, obj[k], k, obj);
	            }
	        }
	    }
	};


	},{}],48:[function(_dereq_,module,exports){
	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice = Array.prototype.slice;
	var toStr = Object.prototype.toString;
	var funcType = '[object Function]';

	module.exports = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};

	},{}],49:[function(_dereq_,module,exports){
	var implementation = _dereq_('./implementation');

	module.exports = Function.prototype.bind || implementation;

	},{"./implementation":48}],50:[function(_dereq_,module,exports){
	'use strict';

	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var slice = Array.prototype.slice;
	var isArgs = _dereq_('./isArguments');
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	var keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};

	keysShim.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				return (Object.keys(arguments) || '').length === 2;
			}(1, 2));
			if (!keysWorksWithArguments) {
				var originalKeys = Object.keys;
				Object.keys = function keys(object) {
					if (isArgs(object)) {
						return originalKeys(slice.call(object));
					} else {
						return originalKeys(object);
					}
				};
			}
		} else {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};

	module.exports = keysShim;

	},{"./isArguments":51}],51:[function(_dereq_,module,exports){
	'use strict';

	var toStr = Object.prototype.toString;

	module.exports = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};

	},{}],52:[function(_dereq_,module,exports){
	'use strict';

	var implementation = _dereq_('./implementation');

	var lacksProperEnumerationOrder = function () {
		if (!Object.assign) {
			return false;
		}
		// v8, specifically in node 4.x, has a bug with incorrect property enumeration order
		// note: this does not detect the bug unless there's 20 characters
		var str = 'abcdefghijklmnopqrst';
		var letters = str.split('');
		var map = {};
		for (var i = 0; i < letters.length; ++i) {
			map[letters[i]] = letters[i];
		}
		var obj = Object.assign({}, map);
		var actual = '';
		for (var k in obj) {
			actual += k;
		}
		return str !== actual;
	};

	var assignHasPendingExceptions = function () {
		if (!Object.assign || !Object.preventExtensions) {
			return false;
		}
		// Firefox 37 still has "pending exception" logic in its Object.assign implementation,
		// which is 72% slower than our shim, and Firefox 40's native implementation.
		var thrower = Object.preventExtensions({ 1: 2 });
		try {
			Object.assign(thrower, 'xy');
		} catch (e) {
			return thrower[1] === 'y';
		}
	};

	module.exports = function getPolyfill() {
		if (!Object.assign) {
			return implementation;
		}
		if (lacksProperEnumerationOrder()) {
			return implementation;
		}
		if (assignHasPendingExceptions()) {
			return implementation;
		}
		return Object.assign;
	};

	},{"./implementation":44}],53:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('define-properties');
	var getPolyfill = _dereq_('./polyfill');

	module.exports = function shimAssign() {
		var polyfill = getPolyfill();
		define(
			Object,
			{ assign: polyfill },
			{ assign: function () { return Object.assign !== polyfill; } }
		);
		return polyfill;
	};

	},{"./polyfill":52,"define-properties":46}],54:[function(_dereq_,module,exports){
	module.exports = SafeParseTuple

	function SafeParseTuple(obj, reviver) {
	    var json
	    var error = null

	    try {
	        json = JSON.parse(obj, reviver)
	    } catch (err) {
	        error = err
	    }

	    return [error, json]
	}

	},{}],55:[function(_dereq_,module,exports){
	function clean (s) {
	  return s.replace(/\n\r?\s*/g, '')
	}


	module.exports = function tsml (sa) {
	  var s = ''
	    , i = 0

	  for (; i < arguments.length; i++)
	    s += clean(sa[i]) + (arguments[i + 1] || '')

	  return s
	}
	},{}],56:[function(_dereq_,module,exports){
	"use strict";
	var window = _dereq_("global/window")
	var once = _dereq_("once")
	var isFunction = _dereq_("is-function")
	var parseHeaders = _dereq_("parse-headers")
	var xtend = _dereq_("xtend")

	module.exports = createXHR
	createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
	createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

	forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
	    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
	        options = initParams(uri, options, callback)
	        options.method = method.toUpperCase()
	        return _createXHR(options)
	    }
	})

	function forEachArray(array, iterator) {
	    for (var i = 0; i < array.length; i++) {
	        iterator(array[i])
	    }
	}

	function isEmpty(obj){
	    for(var i in obj){
	        if(obj.hasOwnProperty(i)) return false
	    }
	    return true
	}

	function initParams(uri, options, callback) {
	    var params = uri

	    if (isFunction(options)) {
	        callback = options
	        if (typeof uri === "string") {
	            params = {uri:uri}
	        }
	    } else {
	        params = xtend(options, {uri: uri})
	    }

	    params.callback = callback
	    return params
	}

	function createXHR(uri, options, callback) {
	    options = initParams(uri, options, callback)
	    return _createXHR(options)
	}

	function _createXHR(options) {
	    var callback = options.callback
	    if(typeof callback === "undefined"){
	        throw new Error("callback argument missing")
	    }
	    callback = once(callback)

	    function readystatechange() {
	        if (xhr.readyState === 4) {
	            loadFunc()
	        }
	    }

	    function getBody() {
	        // Chrome with requestType=blob throws errors arround when even testing access to responseText
	        var body = undefined

	        if (xhr.response) {
	            body = xhr.response
	        } else if (xhr.responseType === "text" || !xhr.responseType) {
	            body = xhr.responseText || xhr.responseXML
	        }

	        if (isJson) {
	            try {
	                body = JSON.parse(body)
	            } catch (e) {}
	        }

	        return body
	    }

	    var failureResponse = {
	                body: undefined,
	                headers: {},
	                statusCode: 0,
	                method: method,
	                url: uri,
	                rawRequest: xhr
	            }

	    function errorFunc(evt) {
	        clearTimeout(timeoutTimer)
	        if(!(evt instanceof Error)){
	            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
	        }
	        evt.statusCode = 0
	        callback(evt, failureResponse)
	    }

	    // will load the data & process the response in a special response object
	    function loadFunc() {
	        if (aborted) return
	        var status
	        clearTimeout(timeoutTimer)
	        if(options.useXDR && xhr.status===undefined) {
	            //IE8 CORS GET successful response doesn't have a status field, but body is fine
	            status = 200
	        } else {
	            status = (xhr.status === 1223 ? 204 : xhr.status)
	        }
	        var response = failureResponse
	        var err = null

	        if (status !== 0){
	            response = {
	                body: getBody(),
	                statusCode: status,
	                method: method,
	                headers: {},
	                url: uri,
	                rawRequest: xhr
	            }
	            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
	                response.headers = parseHeaders(xhr.getAllResponseHeaders())
	            }
	        } else {
	            err = new Error("Internal XMLHttpRequest Error")
	        }
	        callback(err, response, response.body)

	    }

	    var xhr = options.xhr || null

	    if (!xhr) {
	        if (options.cors || options.useXDR) {
	            xhr = new createXHR.XDomainRequest()
	        }else{
	            xhr = new createXHR.XMLHttpRequest()
	        }
	    }

	    var key
	    var aborted
	    var uri = xhr.url = options.uri || options.url
	    var method = xhr.method = options.method || "GET"
	    var body = options.body || options.data || null
	    var headers = xhr.headers = options.headers || {}
	    var sync = !!options.sync
	    var isJson = false
	    var timeoutTimer

	    if ("json" in options) {
	        isJson = true
	        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
	        if (method !== "GET" && method !== "HEAD") {
	            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
	            body = JSON.stringify(options.json)
	        }
	    }

	    xhr.onreadystatechange = readystatechange
	    xhr.onload = loadFunc
	    xhr.onerror = errorFunc
	    // IE9 must have onprogress be set to a unique function.
	    xhr.onprogress = function () {
	        // IE must die
	    }
	    xhr.ontimeout = errorFunc
	    xhr.open(method, uri, !sync, options.username, options.password)
	    //has to be after open
	    if(!sync) {
	        xhr.withCredentials = !!options.withCredentials
	    }
	    // Cannot set timeout with sync request
	    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
	    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
	    if (!sync && options.timeout > 0 ) {
	        timeoutTimer = setTimeout(function(){
	            aborted=true//IE9 may still call readystatechange
	            xhr.abort("timeout")
	            var e = new Error("XMLHttpRequest timeout")
	            e.code = "ETIMEDOUT"
	            errorFunc(e)
	        }, options.timeout )
	    }

	    if (xhr.setRequestHeader) {
	        for(key in headers){
	            if(headers.hasOwnProperty(key)){
	                xhr.setRequestHeader(key, headers[key])
	            }
	        }
	    } else if (options.headers && !isEmpty(options.headers)) {
	        throw new Error("Headers cannot be set on an XDomainRequest object")
	    }

	    if ("responseType" in options) {
	        xhr.responseType = options.responseType
	    }

	    if ("beforeSend" in options &&
	        typeof options.beforeSend === "function"
	    ) {
	        options.beforeSend(xhr)
	    }

	    xhr.send(body)

	    return xhr


	}

	function noop() {}

	},{"global/window":2,"is-function":57,"once":58,"parse-headers":61,"xtend":62}],57:[function(_dereq_,module,exports){
	module.exports = isFunction

	var toString = Object.prototype.toString

	function isFunction (fn) {
	  var string = toString.call(fn)
	  return string === '[object Function]' ||
	    (typeof fn === 'function' && string !== '[object RegExp]') ||
	    (typeof window !== 'undefined' &&
	     // IE8 and below
	     (fn === window.setTimeout ||
	      fn === window.alert ||
	      fn === window.confirm ||
	      fn === window.prompt))
	};

	},{}],58:[function(_dereq_,module,exports){
	module.exports = once

	once.proto = once(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once(this)
	    },
	    configurable: true
	  })
	})

	function once (fn) {
	  var called = false
	  return function () {
	    if (called) return
	    called = true
	    return fn.apply(this, arguments)
	  }
	}

	},{}],59:[function(_dereq_,module,exports){
	var isFunction = _dereq_('is-function')

	module.exports = forEach

	var toString = Object.prototype.toString
	var hasOwnProperty = Object.prototype.hasOwnProperty

	function forEach(list, iterator, context) {
	    if (!isFunction(iterator)) {
	        throw new TypeError('iterator must be a function')
	    }

	    if (arguments.length < 3) {
	        context = this
	    }
	    
	    if (toString.call(list) === '[object Array]')
	        forEachArray(list, iterator, context)
	    else if (typeof list === 'string')
	        forEachString(list, iterator, context)
	    else
	        forEachObject(list, iterator, context)
	}

	function forEachArray(array, iterator, context) {
	    for (var i = 0, len = array.length; i < len; i++) {
	        if (hasOwnProperty.call(array, i)) {
	            iterator.call(context, array[i], i, array)
	        }
	    }
	}

	function forEachString(string, iterator, context) {
	    for (var i = 0, len = string.length; i < len; i++) {
	        // no such thing as a sparse string.
	        iterator.call(context, string.charAt(i), i, string)
	    }
	}

	function forEachObject(object, iterator, context) {
	    for (var k in object) {
	        if (hasOwnProperty.call(object, k)) {
	            iterator.call(context, object[k], k, object)
	        }
	    }
	}

	},{"is-function":57}],60:[function(_dereq_,module,exports){

	exports = module.exports = trim;

	function trim(str){
	  return str.replace(/^\s*|\s*$/g, '');
	}

	exports.left = function(str){
	  return str.replace(/^\s*/, '');
	};

	exports.right = function(str){
	  return str.replace(/\s*$/, '');
	};

	},{}],61:[function(_dereq_,module,exports){
	var trim = _dereq_('trim')
	  , forEach = _dereq_('for-each')
	  , isArray = function(arg) {
	      return Object.prototype.toString.call(arg) === '[object Array]';
	    }

	module.exports = function (headers) {
	  if (!headers)
	    return {}

	  var result = {}

	  forEach(
	      trim(headers).split('\n')
	    , function (row) {
	        var index = row.indexOf(':')
	          , key = trim(row.slice(0, index)).toLowerCase()
	          , value = trim(row.slice(index + 1))

	        if (typeof(result[key]) === 'undefined') {
	          result[key] = value
	        } else if (isArray(result[key])) {
	          result[key].push(value)
	        } else {
	          result[key] = [ result[key], value ]
	        }
	      }
	  )

	  return result
	}
	},{"for-each":59,"trim":60}],62:[function(_dereq_,module,exports){
	module.exports = extend

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}

	},{}],63:[function(_dereq_,module,exports){
	/**
	 * @file big-play-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _buttonJs = _dereq_('./button.js');

	var _buttonJs2 = _interopRequireDefault(_buttonJs);

	var _componentJs = _dereq_('./component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * Initial play button. Shows before the video has played. The hiding of the
	 * big play button is done via CSS and player states.
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @extends Button
	 * @class BigPlayButton
	 */

	var BigPlayButton = (function (_Button) {
	  _inherits(BigPlayButton, _Button);

	  function BigPlayButton(player, options) {
	    _classCallCheck(this, BigPlayButton);

	    _Button.call(this, player, options);
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-big-play-button';
	  };

	  /**
	   * Handles click for play
	   *
	   * @method handleClick
	   */

	  BigPlayButton.prototype.handleClick = function handleClick() {
	    this.player_.play();
	  };

	  return BigPlayButton;
	})(_buttonJs2['default']);

	BigPlayButton.prototype.controlText_ = 'Play Video';

	_componentJs2['default'].registerComponent('BigPlayButton', BigPlayButton);
	exports['default'] = BigPlayButton;
	module.exports = exports['default'];

	},{"./button.js":64,"./component.js":67}],64:[function(_dereq_,module,exports){
	/**
	 * @file button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _clickableComponentJs = _dereq_('./clickable-component.js');

	var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

	var _component = _dereq_('./component');

	var _component2 = _interopRequireDefault(_component);

	var _utilsEventsJs = _dereq_('./utils/events.js');

	var Events = _interopRequireWildcard(_utilsEventsJs);

	var _utilsFnJs = _dereq_('./utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsLogJs = _dereq_('./utils/log.js');

	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _objectAssign = _dereq_('object.assign');

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	/**
	 * Base class for all buttons
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @extends ClickableComponent
	 * @class Button
	 */

	var Button = (function (_ClickableComponent) {
	  _inherits(Button, _ClickableComponent);

	  function Button(player, options) {
	    _classCallCheck(this, Button);

	    _ClickableComponent.call(this, player, options);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @param {String=} type Element's node type. e.g. 'div'
	   * @param {Object=} props An object of properties that should be set on the element
	   * @param {Object=} attributes An object of attributes that should be set on the element
	   * @return {Element}
	   * @method createEl
	   */

	  Button.prototype.createEl = function createEl() {
	    var tag = arguments.length <= 0 || arguments[0] === undefined ? 'button' : arguments[0];
	    var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    props = _objectAssign2['default']({
	      className: this.buildCSSClass()
	    }, props);

	    if (tag !== 'button') {
	      _utilsLogJs2['default'].warn('Creating a Button with an HTML element of ' + tag + ' is deprecated; use ClickableComponent instead.');

	      // Add properties for clickable element which is not a native HTML button
	      props = _objectAssign2['default']({
	        tabIndex: 0
	      }, props);

	      // Add ARIA attributes for clickable element which is not a native HTML button
	      attributes = _objectAssign2['default']({
	        role: 'button'
	      }, attributes);
	    }

	    // Add attributes for button element
	    attributes = _objectAssign2['default']({
	      type: 'button', // Necessary since the default button type is "submit"
	      'aria-live': 'polite' // let the screen reader user know that the text of the button may change
	    }, attributes);

	    var el = _component2['default'].prototype.createEl.call(this, tag, props, attributes);

	    this.createControlTextEl(el);

	    return el;
	  };

	  /**
	   * Adds a child component inside this button
	   *
	   * @param {String|Component} child The class name or instance of a child to add
	   * @param {Object=} options Options, including options to be passed to children of the child.
	   * @return {Component} The child component (created by this process if a string was used)
	   * @deprecated
	   * @method addChild
	   */

	  Button.prototype.addChild = function addChild(child) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var className = this.constructor.name;
	    _utilsLogJs2['default'].warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');

	    // Avoid the error message generated by ClickableComponent's addChild method
	    return _component2['default'].prototype.addChild.call(this, child, options);
	  };

	  /**
	   * Handle KeyPress (document level) - Extend with specific functionality for button
	   *
	   * @method handleKeyPress
	   */

	  Button.prototype.handleKeyPress = function handleKeyPress(event) {
	    // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
	    if (event.which === 32 || event.which === 13) {} else {
	      _ClickableComponent.prototype.handleKeyPress.call(this, event); // Pass keypress handling up for unsupported keys
	    }
	  };

	  return Button;
	})(_clickableComponentJs2['default']);

	_component2['default'].registerComponent('Button', Button);
	exports['default'] = Button;
	module.exports = exports['default'];

	},{"./clickable-component.js":65,"./component":67,"./utils/events.js":143,"./utils/fn.js":144,"./utils/log.js":147,"global/document":1,"object.assign":45}],65:[function(_dereq_,module,exports){
	/**
	 * @file button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _component = _dereq_('./component');

	var _component2 = _interopRequireDefault(_component);

	var _utilsDomJs = _dereq_('./utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsEventsJs = _dereq_('./utils/events.js');

	var Events = _interopRequireWildcard(_utilsEventsJs);

	var _utilsFnJs = _dereq_('./utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsLogJs = _dereq_('./utils/log.js');

	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _objectAssign = _dereq_('object.assign');

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	/**
	 * Clickable Component which is clickable or keyboard actionable, but is not a native HTML button
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @extends Component
	 * @class ClickableComponent
	 */

	var ClickableComponent = (function (_Component) {
	  _inherits(ClickableComponent, _Component);

	  function ClickableComponent(player, options) {
	    _classCallCheck(this, ClickableComponent);

	    _Component.call(this, player, options);

	    this.emitTapEvents();

	    this.on('tap', this.handleClick);
	    this.on('click', this.handleClick);
	    this.on('focus', this.handleFocus);
	    this.on('blur', this.handleBlur);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @param {String=} type Element's node type. e.g. 'div'
	   * @param {Object=} props An object of properties that should be set on the element
	   * @param {Object=} attributes An object of attributes that should be set on the element
	   * @return {Element}
	   * @method createEl
	   */

	  ClickableComponent.prototype.createEl = function createEl() {
	    var tag = arguments.length <= 0 || arguments[0] === undefined ? 'div' : arguments[0];
	    var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    props = _objectAssign2['default']({
	      className: this.buildCSSClass(),
	      tabIndex: 0
	    }, props);

	    if (tag === 'button') {
	      _utilsLogJs2['default'].error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
	    }

	    // Add ARIA attributes for clickable element which is not a native HTML button
	    attributes = _objectAssign2['default']({
	      role: 'button',
	      'aria-live': 'polite' // let the screen reader user know that the text of the element may change
	    }, attributes);

	    var el = _Component.prototype.createEl.call(this, tag, props, attributes);

	    this.createControlTextEl(el);

	    return el;
	  };

	  /**
	   * create control text
	   *
	   * @param {Element} el Parent element for the control text
	   * @return {Element}
	   * @method controlText
	   */

	  ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
	    this.controlTextEl_ = Dom.createEl('span', {
	      className: 'vjs-control-text'
	    });

	    if (el) {
	      el.appendChild(this.controlTextEl_);
	    }

	    this.controlText(this.controlText_, el);

	    return this.controlTextEl_;
	  };

	  /**
	   * Controls text - both request and localize
	   *
	   * @param {String}  text Text for element
	   * @param {Element=} el Element to set the title on
	   * @return {String}
	   * @method controlText
	   */

	  ClickableComponent.prototype.controlText = function controlText(text) {
	    var el = arguments.length <= 1 || arguments[1] === undefined ? this.el() : arguments[1];

	    if (!text) return this.controlText_ || 'Need Text';

	    var localizedText = this.localize(text);

	    this.controlText_ = text;
	    this.controlTextEl_.innerHTML = localizedText;
	    el.setAttribute('title', localizedText);

	    return this;
	  };

	  /**
	   * Allows sub components to stack CSS class names
	   *
	   * @return {String}
	   * @method buildCSSClass
	   */

	  ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Adds a child component inside this clickable-component
	   *
	   * @param {String|Component} child The class name or instance of a child to add
	   * @param {Object=} options Options, including options to be passed to children of the child.
	   * @return {Component} The child component (created by this process if a string was used)
	   * @method addChild
	   */

	  ClickableComponent.prototype.addChild = function addChild(child) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    // TODO: Fix adding an actionable child to a ClickableComponent; currently
	    // it will cause issues with assistive technology (e.g. screen readers)
	    // which support ARIA, since an element with role="button" cannot have
	    // actionable child elements.

	    //let className = this.constructor.name;
	    //log.warn(`Adding a child to a ClickableComponent (${className}) can cause issues with assistive technology which supports ARIA, since an element with role="button" cannot have actionable child elements.`);

	    return _Component.prototype.addChild.call(this, child, options);
	  };

	  /**
	   * Enable the component element
	   *
	   * @return {Component}
	   * @method enable
	   */

	  ClickableComponent.prototype.enable = function enable() {
	    this.removeClass('vjs-disabled');
	    this.el_.setAttribute('aria-disabled', 'false');
	    return this;
	  };

	  /**
	   * Disable the component element
	   *
	   * @return {Component}
	   * @method disable
	   */

	  ClickableComponent.prototype.disable = function disable() {
	    this.addClass('vjs-disabled');
	    this.el_.setAttribute('aria-disabled', 'true');
	    return this;
	  };

	  /**
	   * Handle Click - Override with specific functionality for component
	   *
	   * @method handleClick
	   */

	  ClickableComponent.prototype.handleClick = function handleClick() {};

	  /**
	   * Handle Focus - Add keyboard functionality to element
	   *
	   * @method handleFocus
	   */

	  ClickableComponent.prototype.handleFocus = function handleFocus() {
	    Events.on(_globalDocument2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
	  };

	  /**
	   * Handle KeyPress (document level) - Trigger click when Space or Enter key is pressed
	   *
	   * @method handleKeyPress
	   */

	  ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {
	    // Support Space (32) or Enter (13) key operation to fire a click event
	    if (event.which === 32 || event.which === 13) {
	      event.preventDefault();
	      this.handleClick(event);
	    } else if (_Component.prototype.handleKeyPress) {
	      _Component.prototype.handleKeyPress.call(this, event); // Pass keypress handling up for unsupported keys
	    }
	  };

	  /**
	   * Handle Blur - Remove keyboard triggers
	   *
	   * @method handleBlur
	   */

	  ClickableComponent.prototype.handleBlur = function handleBlur() {
	    Events.off(_globalDocument2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
	  };

	  return ClickableComponent;
	})(_component2['default']);

	_component2['default'].registerComponent('ClickableComponent', ClickableComponent);
	exports['default'] = ClickableComponent;
	module.exports = exports['default'];

	},{"./component":67,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/log.js":147,"global/document":1,"object.assign":45}],66:[function(_dereq_,module,exports){
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _button = _dereq_('./button');

	var _button2 = _interopRequireDefault(_button);

	var _component = _dereq_('./component');

	var _component2 = _interopRequireDefault(_component);

	/**
	 * The `CloseButton` component is a button which fires a "close" event
	 * when it is activated.
	 *
	 * @extends Button
	 * @class CloseButton
	 */

	var CloseButton = (function (_Button) {
	  _inherits(CloseButton, _Button);

	  function CloseButton(player, options) {
	    _classCallCheck(this, CloseButton);

	    _Button.call(this, player, options);
	    this.controlText(options && options.controlText || this.localize('Close'));
	  }

	  CloseButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  CloseButton.prototype.handleClick = function handleClick() {
	    this.trigger({ type: 'close', bubbles: false });
	  };

	  return CloseButton;
	})(_button2['default']);

	_component2['default'].registerComponent('CloseButton', CloseButton);
	exports['default'] = CloseButton;
	module.exports = exports['default'];

	},{"./button":64,"./component":67}],67:[function(_dereq_,module,exports){
	/**
	 * @file component.js
	 *
	 * Player Component - Base class for all UI objects
	 */

	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _utilsDomJs = _dereq_('./utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFnJs = _dereq_('./utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsGuidJs = _dereq_('./utils/guid.js');

	var Guid = _interopRequireWildcard(_utilsGuidJs);

	var _utilsEventsJs = _dereq_('./utils/events.js');

	var Events = _interopRequireWildcard(_utilsEventsJs);

	var _utilsLogJs = _dereq_('./utils/log.js');

	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

	var _utilsToTitleCaseJs = _dereq_('./utils/to-title-case.js');

	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

	var _utilsMergeOptionsJs = _dereq_('./utils/merge-options.js');

	var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

	/**
	 * Base UI Component class
	 * Components are embeddable UI objects that are represented by both a
	 * javascript object and an element in the DOM. They can be children of other
	 * components, and can have many children themselves.
	 * ```js
	 *     // adding a button to the player
	 *     var button = player.addChild('button');
	 *     button.el(); // -> button element
	 * ```
	 * ```html
	 *     <div class="video-js">
	 *       <div class="vjs-button">Button</div>
	 *     </div>
	 * ```
	 * Components are also event targets.
	 * ```js
	 *     button.on('click', function(){
	 *       console.log('Button Clicked!');
	 *     });
	 *     button.trigger('customevent');
	 * ```
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @class Component
	 */

	var Component = (function () {
	  function Component(player, options, ready) {
	    _classCallCheck(this, Component);

	    // The component might be the player itself and we can't pass `this` to super
	    if (!player && this.play) {
	      this.player_ = player = this; // eslint-disable-line
	    } else {
	        this.player_ = player;
	      }

	    // Make a copy of prototype.options_ to protect against overriding defaults
	    this.options_ = _utilsMergeOptionsJs2['default']({}, this.options_);

	    // Updated options with supplied options
	    options = this.options_ = _utilsMergeOptionsJs2['default'](this.options_, options);

	    // Get ID from options or options element if one is supplied
	    this.id_ = options.id || options.el && options.el.id;

	    // If there was no ID from the options, generate one
	    if (!this.id_) {
	      // Don't require the player ID function in the case of mock players
	      var id = player && player.id && player.id() || 'no_player';

	      this.id_ = id + '_component_' + Guid.newGUID();
	    }

	    this.name_ = options.name || null;

	    // Create element if one wasn't provided in options
	    if (options.el) {
	      this.el_ = options.el;
	    } else if (options.createEl !== false) {
	      this.el_ = this.createEl();
	    }

	    this.children_ = [];
	    this.childIndex_ = {};
	    this.childNameIndex_ = {};

	    // Add any child components in options
	    if (options.initChildren !== false) {
	      this.initChildren();
	    }

	    this.ready(ready);
	    // Don't want to trigger ready here or it will before init is actually
	    // finished for all children that run this constructor

	    if (options.reportTouchActivity !== false) {
	      this.enableTouchActivity();
	    }
	  }

	  /**
	   * Dispose of the component and all child components
	   *
	   * @method dispose
	   */

	  Component.prototype.dispose = function dispose() {
	    this.trigger({ type: 'dispose', bubbles: false });

	    // Dispose all children.
	    if (this.children_) {
	      for (var i = this.children_.length - 1; i >= 0; i--) {
	        if (this.children_[i].dispose) {
	          this.children_[i].dispose();
	        }
	      }
	    }

	    // Delete child references
	    this.children_ = null;
	    this.childIndex_ = null;
	    this.childNameIndex_ = null;

	    // Remove all event listeners.
	    this.off();

	    // Remove element from DOM
	    if (this.el_.parentNode) {
	      this.el_.parentNode.removeChild(this.el_);
	    }

	    Dom.removeElData(this.el_);
	    this.el_ = null;
	  };

	  /**
	   * Return the component's player
	   *
	   * @return {Player}
	   * @method player
	   */

	  Component.prototype.player = function player() {
	    return this.player_;
	  };

	  /**
	   * Deep merge of options objects
	   * Whenever a property is an object on both options objects
	   * the two properties will be merged using mergeOptions.
	   *
	   * ```js
	   *     Parent.prototype.options_ = {
	   *       optionSet: {
	   *         'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },
	   *         'childTwo': {},
	   *         'childThree': {}
	   *       }
	   *     }
	   *     newOptions = {
	   *       optionSet: {
	   *         'childOne': { 'foo': 'baz', 'abc': '123' }
	   *         'childTwo': null,
	   *         'childFour': {}
	   *       }
	   *     }
	   *
	   *     this.options(newOptions);
	   * ```
	   * RESULT
	   * ```js
	   *     {
	   *       optionSet: {
	   *         'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },
	   *         'childTwo': null, // Disabled. Won't be initialized.
	   *         'childThree': {},
	   *         'childFour': {}
	   *       }
	   *     }
	   * ```
	   *
	   * @param  {Object} obj Object of new option values
	   * @return {Object}     A NEW object of this.options_ and obj merged
	   * @method options
	   */

	  Component.prototype.options = function options(obj) {
	    _utilsLogJs2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');

	    if (!obj) {
	      return this.options_;
	    }

	    this.options_ = _utilsMergeOptionsJs2['default'](this.options_, obj);
	    return this.options_;
	  };

	  /**
	   * Get the component's DOM element
	   * ```js
	   *     var domEl = myComponent.el();
	   * ```
	   *
	   * @return {Element}
	   * @method el
	   */

	  Component.prototype.el = function el() {
	    return this.el_;
	  };

	  /**
	   * Create the component's DOM element
	   *
	   * @param  {String=} tagName  Element's node type. e.g. 'div'
	   * @param  {Object=} properties An object of properties that should be set
	   * @param  {Object=} attributes An object of attributes that should be set
	   * @return {Element}
	   * @method createEl
	   */

	  Component.prototype.createEl = function createEl(tagName, properties, attributes) {
	    return Dom.createEl(tagName, properties, attributes);
	  };

	  Component.prototype.localize = function localize(string) {
	    var code = this.player_.language && this.player_.language();
	    var languages = this.player_.languages && this.player_.languages();

	    if (!code || !languages) {
	      return string;
	    }

	    var language = languages[code];

	    if (language && language[string]) {
	      return language[string];
	    }

	    var primaryCode = code.split('-')[0];
	    var primaryLang = languages[primaryCode];

	    if (primaryLang && primaryLang[string]) {
	      return primaryLang[string];
	    }

	    return string;
	  };

	  /**
	   * Return the component's DOM element where children are inserted.
	   * Will either be the same as el() or a new element defined in createEl().
	   *
	   * @return {Element}
	   * @method contentEl
	   */

	  Component.prototype.contentEl = function contentEl() {
	    return this.contentEl_ || this.el_;
	  };

	  /**
	   * Get the component's ID
	   * ```js
	   *     var id = myComponent.id();
	   * ```
	   *
	   * @return {String}
	   * @method id
	   */

	  Component.prototype.id = function id() {
	    return this.id_;
	  };

	  /**
	   * Get the component's name. The name is often used to reference the component.
	   * ```js
	   *     var name = myComponent.name();
	   * ```
	   *
	   * @return {String}
	   * @method name
	   */

	  Component.prototype.name = function name() {
	    return this.name_;
	  };

	  /**
	   * Get an array of all child components
	   * ```js
	   *     var kids = myComponent.children();
	   * ```
	   *
	   * @return {Array} The children
	   * @method children
	   */

	  Component.prototype.children = function children() {
	    return this.children_;
	  };

	  /**
	   * Returns a child component with the provided ID
	   *
	   * @return {Component}
	   * @method getChildById
	   */

	  Component.prototype.getChildById = function getChildById(id) {
	    return this.childIndex_[id];
	  };

	  /**
	   * Returns a child component with the provided name
	   *
	   * @return {Component}
	   * @method getChild
	   */

	  Component.prototype.getChild = function getChild(name) {
	    return this.childNameIndex_[name];
	  };

	  /**
	   * Adds a child component inside this component
	   * ```js
	   *     myComponent.el();
	   *     // -> <div class='my-component'></div>
	   *     myComponent.children();
	   *     // [empty array]
	   *
	   *     var myButton = myComponent.addChild('MyButton');
	   *     // -> <div class='my-component'><div class="my-button">myButton<div></div>
	   *     // -> myButton === myComponent.children()[0];
	   * ```
	   * Pass in options for child constructors and options for children of the child
	   * ```js
	   *     var myButton = myComponent.addChild('MyButton', {
	   *       text: 'Press Me',
	   *       buttonChildExample: {
	   *         buttonChildOption: true
	   *       }
	   *     });
	   * ```
	   *
	   * @param {String|Component} child The class name or instance of a child to add
	   * @param {Object=} options Options, including options to be passed to children of the child.
	   * @param {Number} index into our children array to attempt to add the child
	   * @return {Component} The child component (created by this process if a string was used)
	   * @method addChild
	   */

	  Component.prototype.addChild = function addChild(child) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var index = arguments.length <= 2 || arguments[2] === undefined ? this.children_.length : arguments[2];

	    var component = undefined;
	    var componentName = undefined;

	    // If child is a string, create nt with options
	    if (typeof child === 'string') {
	      componentName = child;

	      // Options can also be specified as a boolean, so convert to an empty object if false.
	      if (!options) {
	        options = {};
	      }

	      // Same as above, but true is deprecated so show a warning.
	      if (options === true) {
	        _utilsLogJs2['default'].warn('Initializing a child component with `true` is deprecated. Children should be defined in an array when possible, but if necessary use an object instead of `true`.');
	        options = {};
	      }

	      // If no componentClass in options, assume componentClass is the name lowercased
	      // (e.g. playButton)
	      var componentClassName = options.componentClass || _utilsToTitleCaseJs2['default'](componentName);

	      // Set name through options
	      options.name = componentName;

	      // Create a new object & element for this controls set
	      // If there's no .player_, this is a player
	      var ComponentClass = Component.getComponent(componentClassName);

	      if (!ComponentClass) {
	        throw new Error('Component ' + componentClassName + ' does not exist');
	      }

	      // data stored directly on the videojs object may be
	      // misidentified as a component to retain
	      // backwards-compatibility with 4.x. check to make sure the
	      // component class can be instantiated.
	      if (typeof ComponentClass !== 'function') {
	        return null;
	      }

	      component = new ComponentClass(this.player_ || this, options);

	      // child is a component instance
	    } else {
	        component = child;
	      }

	    this.children_.splice(index, 0, component);

	    if (typeof component.id === 'function') {
	      this.childIndex_[component.id()] = component;
	    }

	    // If a name wasn't used to create the component, check if we can use the
	    // name function of the component
	    componentName = componentName || component.name && component.name();

	    if (componentName) {
	      this.childNameIndex_[componentName] = component;
	    }

	    // Add the UI object's element to the container div (box)
	    // Having an element is not required
	    if (typeof component.el === 'function' && component.el()) {
	      var childNodes = this.contentEl().children;
	      var refNode = childNodes[index] || null;
	      this.contentEl().insertBefore(component.el(), refNode);
	    }

	    // Return so it can stored on parent object if desired.
	    return component;
	  };

	  /**
	   * Remove a child component from this component's list of children, and the
	   * child component's element from this component's element
	   *
	   * @param  {Component} component Component to remove
	   * @method removeChild
	   */

	  Component.prototype.removeChild = function removeChild(component) {
	    if (typeof component === 'string') {
	      component = this.getChild(component);
	    }

	    if (!component || !this.children_) {
	      return;
	    }

	    var childFound = false;

	    for (var i = this.children_.length - 1; i >= 0; i--) {
	      if (this.children_[i] === component) {
	        childFound = true;
	        this.children_.splice(i, 1);
	        break;
	      }
	    }

	    if (!childFound) {
	      return;
	    }

	    this.childIndex_[component.id()] = null;
	    this.childNameIndex_[component.name()] = null;

	    var compEl = component.el();

	    if (compEl && compEl.parentNode === this.contentEl()) {
	      this.contentEl().removeChild(component.el());
	    }
	  };

	  /**
	   * Add and initialize default child components from options
	   * ```js
	   *     // when an instance of MyComponent is created, all children in options
	   *     // will be added to the instance by their name strings and options
	   *     MyComponent.prototype.options_ = {
	   *       children: [
	   *         'myChildComponent'
	   *       ],
	   *       myChildComponent: {
	   *         myChildOption: true
	   *       }
	   *     };
	   *
	   *     // Or when creating the component
	   *     var myComp = new MyComponent(player, {
	   *       children: [
	   *         'myChildComponent'
	   *       ],
	   *       myChildComponent: {
	   *         myChildOption: true
	   *       }
	   *     });
	   * ```
	   * The children option can also be an array of
	   * child options objects (that also include a 'name' key).
	   * This can be used if you have two child components of the
	   * same type that need different options.
	   * ```js
	   *     var myComp = new MyComponent(player, {
	   *       children: [
	   *         'button',
	   *         {
	   *           name: 'button',
	   *           someOtherOption: true
	   *         },
	   *         {
	   *           name: 'button',
	   *           someOtherOption: false
	   *         }
	   *       ]
	   *     });
	   * ```
	   *
	   * @method initChildren
	   */

	  Component.prototype.initChildren = function initChildren() {
	    var _this = this;

	    var children = this.options_.children;

	    if (children) {
	      (function () {
	        // `this` is `parent`
	        var parentOptions = _this.options_;

	        var handleAdd = function handleAdd(child) {
	          var name = child.name;
	          var opts = child.opts;

	          // Allow options for children to be set at the parent options
	          // e.g. videojs(id, { controlBar: false });
	          // instead of videojs(id, { children: { controlBar: false });
	          if (parentOptions[name] !== undefined) {
	            opts = parentOptions[name];
	          }

	          // Allow for disabling default components
	          // e.g. options['children']['posterImage'] = false
	          if (opts === false) {
	            return;
	          }

	          // Allow options to be passed as a simple boolean if no configuration
	          // is necessary.
	          if (opts === true) {
	            opts = {};
	          }

	          // We also want to pass the original player options to each component as well so they don't need to
	          // reach back into the player for options later.
	          opts.playerOptions = _this.options_.playerOptions;

	          // Create and add the child component.
	          // Add a direct reference to the child by name on the parent instance.
	          // If two of the same component are used, different names should be supplied
	          // for each
	          var newChild = _this.addChild(name, opts);
	          if (newChild) {
	            _this[name] = newChild;
	          }
	        };

	        // Allow for an array of children details to passed in the options
	        var workingChildren = undefined;
	        var Tech = Component.getComponent('Tech');

	        if (Array.isArray(children)) {
	          workingChildren = children;
	        } else {
	          workingChildren = Object.keys(children);
	        }

	        workingChildren
	        // children that are in this.options_ but also in workingChildren  would
	        // give us extra children we do not want. So, we want to filter them out.
	        .concat(Object.keys(_this.options_).filter(function (child) {
	          return !workingChildren.some(function (wchild) {
	            if (typeof wchild === 'string') {
	              return child === wchild;
	            } else {
	              return child === wchild.name;
	            }
	          });
	        })).map(function (child) {
	          var name = undefined,
	              opts = undefined;

	          if (typeof child === 'string') {
	            name = child;
	            opts = children[name] || _this.options_[name] || {};
	          } else {
	            name = child.name;
	            opts = child;
	          }

	          return { name: name, opts: opts };
	        }).filter(function (child) {
	          // we have to make sure that child.name isn't in the techOrder since
	          // techs are registerd as Components but can't aren't compatible
	          // See https://github.com/videojs/video.js/issues/2772
	          var c = Component.getComponent(child.opts.componentClass || _utilsToTitleCaseJs2['default'](child.name));
	          return c && !Tech.isTech(c);
	        }).forEach(handleAdd);
	      })();
	    }
	  };

	  /**
	   * Allows sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  Component.prototype.buildCSSClass = function buildCSSClass() {
	    // Child classes can include a function that does:
	    // return 'CLASS NAME' + this._super();
	    return '';
	  };

	  /**
	   * Add an event listener to this component's element
	   * ```js
	   *     var myFunc = function(){
	   *       var myComponent = this;
	   *       // Do something when the event is fired
	   *     };
	   *
	   *     myComponent.on('eventType', myFunc);
	   * ```
	   * The context of myFunc will be myComponent unless previously bound.
	   * Alternatively, you can add a listener to another element or component.
	   * ```js
	   *     myComponent.on(otherElement, 'eventName', myFunc);
	   *     myComponent.on(otherComponent, 'eventName', myFunc);
	   * ```
	   * The benefit of using this over `VjsEvents.on(otherElement, 'eventName', myFunc)`
	   * and `otherComponent.on('eventName', myFunc)` is that this way the listeners
	   * will be automatically cleaned up when either component is disposed.
	   * It will also bind myComponent as the context of myFunc.
	   * **NOTE**: When using this on elements in the page other than window
	   * and document (both permanent), if you remove the element from the DOM
	   * you need to call `myComponent.trigger(el, 'dispose')` on it to clean up
	   * references to it and allow the browser to garbage collect it.
	   *
	   * @param  {String|Component} first   The event type or other component
	   * @param  {Function|String}      second  The event handler or event type
	   * @param  {Function}             third   The event handler
	   * @return {Component}
	   * @method on
	   */

	  Component.prototype.on = function on(first, second, third) {
	    var _this2 = this;

	    if (typeof first === 'string' || Array.isArray(first)) {
	      Events.on(this.el_, first, Fn.bind(this, second));

	      // Targeting another component or element
	    } else {
	        (function () {
	          var target = first;
	          var type = second;
	          var fn = Fn.bind(_this2, third);

	          // When this component is disposed, remove the listener from the other component
	          var removeOnDispose = function removeOnDispose() {
	            return _this2.off(target, type, fn);
	          };

	          // Use the same function ID so we can remove it later it using the ID
	          // of the original listener
	          removeOnDispose.guid = fn.guid;
	          _this2.on('dispose', removeOnDispose);

	          // If the other component is disposed first we need to clean the reference
	          // to the other component in this component's removeOnDispose listener
	          // Otherwise we create a memory leak.
	          var cleanRemover = function cleanRemover() {
	            return _this2.off('dispose', removeOnDispose);
	          };

	          // Add the same function ID so we can easily remove it later
	          cleanRemover.guid = fn.guid;

	          // Check if this is a DOM node
	          if (first.nodeName) {
	            // Add the listener to the other element
	            Events.on(target, type, fn);
	            Events.on(target, 'dispose', cleanRemover);

	            // Should be a component
	            // Not using `instanceof Component` because it makes mock players difficult
	          } else if (typeof first.on === 'function') {
	              // Add the listener to the other component
	              target.on(type, fn);
	              target.on('dispose', cleanRemover);
	            }
	        })();
	      }

	    return this;
	  };

	  /**
	   * Remove an event listener from this component's element
	   * ```js
	   *     myComponent.off('eventType', myFunc);
	   * ```
	   * If myFunc is excluded, ALL listeners for the event type will be removed.
	   * If eventType is excluded, ALL listeners will be removed from the component.
	   * Alternatively you can use `off` to remove listeners that were added to other
	   * elements or components using `myComponent.on(otherComponent...`.
	   * In this case both the event type and listener function are REQUIRED.
	   * ```js
	   *     myComponent.off(otherElement, 'eventType', myFunc);
	   *     myComponent.off(otherComponent, 'eventType', myFunc);
	   * ```
	   *
	   * @param  {String=|Component}  first  The event type or other component
	   * @param  {Function=|String}       second The listener function or event type
	   * @param  {Function=}              third  The listener for other component
	   * @return {Component}
	   * @method off
	   */

	  Component.prototype.off = function off(first, second, third) {
	    if (!first || typeof first === 'string' || Array.isArray(first)) {
	      Events.off(this.el_, first, second);
	    } else {
	      var target = first;
	      var type = second;
	      // Ensure there's at least a guid, even if the function hasn't been used
	      var fn = Fn.bind(this, third);

	      // Remove the dispose listener on this component,
	      // which was given the same guid as the event listener
	      this.off('dispose', fn);

	      if (first.nodeName) {
	        // Remove the listener
	        Events.off(target, type, fn);
	        // Remove the listener for cleaning the dispose listener
	        Events.off(target, 'dispose', fn);
	      } else {
	        target.off(type, fn);
	        target.off('dispose', fn);
	      }
	    }

	    return this;
	  };

	  /**
	   * Add an event listener to be triggered only once and then removed
	   * ```js
	   *     myComponent.one('eventName', myFunc);
	   * ```
	   * Alternatively you can add a listener to another element or component
	   * that will be triggered only once.
	   * ```js
	   *     myComponent.one(otherElement, 'eventName', myFunc);
	   *     myComponent.one(otherComponent, 'eventName', myFunc);
	   * ```
	   *
	   * @param  {String|Component}  first   The event type or other component
	   * @param  {Function|String}       second  The listener function or event type
	   * @param  {Function=}             third   The listener function for other component
	   * @return {Component}
	   * @method one
	   */

	  Component.prototype.one = function one(first, second, third) {
	    var _this3 = this,
	        _arguments = arguments;

	    if (typeof first === 'string' || Array.isArray(first)) {
	      Events.one(this.el_, first, Fn.bind(this, second));
	    } else {
	      (function () {
	        var target = first;
	        var type = second;
	        var fn = Fn.bind(_this3, third);

	        var newFunc = function newFunc() {
	          _this3.off(target, type, newFunc);
	          fn.apply(null, _arguments);
	        };

	        // Keep the same function ID so we can remove it later
	        newFunc.guid = fn.guid;

	        _this3.on(target, type, newFunc);
	      })();
	    }

	    return this;
	  };

	  /**
	   * Trigger an event on an element
	   * ```js
	   *     myComponent.trigger('eventName');
	   *     myComponent.trigger({'type':'eventName'});
	   *     myComponent.trigger('eventName', {data: 'some data'});
	   *     myComponent.trigger({'type':'eventName'}, {data: 'some data'});
	   * ```
	   *
	   * @param  {Event|Object|String} event  A string (the type) or an event object with a type attribute
	   * @param  {Object} [hash] data hash to pass along with the event
	   * @return {Component}       self
	   * @method trigger
	   */

	  Component.prototype.trigger = function trigger(event, hash) {
	    Events.trigger(this.el_, event, hash);
	    return this;
	  };

	  /**
	   * Bind a listener to the component's ready state.
	   * Different from event listeners in that if the ready event has already happened
	   * it will trigger the function immediately.
	   *
	   * @param  {Function} fn Ready listener
	   * @param  {Boolean} sync Exec the listener synchronously if component is ready
	   * @return {Component}
	   * @method ready
	   */

	  Component.prototype.ready = function ready(fn) {
	    var sync = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

	    if (fn) {
	      if (this.isReady_) {
	        if (sync) {
	          fn.call(this);
	        } else {
	          // Call the function asynchronously by default for consistency
	          this.setTimeout(fn, 1);
	        }
	      } else {
	        this.readyQueue_ = this.readyQueue_ || [];
	        this.readyQueue_.push(fn);
	      }
	    }
	    return this;
	  };

	  /**
	   * Trigger the ready listeners
	   *
	   * @return {Component}
	   * @method triggerReady
	   */

	  Component.prototype.triggerReady = function triggerReady() {
	    this.isReady_ = true;

	    // Ensure ready is triggerd asynchronously
	    this.setTimeout(function () {
	      var readyQueue = this.readyQueue_;

	      // Reset Ready Queue
	      this.readyQueue_ = [];

	      if (readyQueue && readyQueue.length > 0) {
	        readyQueue.forEach(function (fn) {
	          fn.call(this);
	        }, this);
	      }

	      // Allow for using event listeners also
	      this.trigger('ready');
	    }, 1);
	  };

	  /**
	   * Finds a single DOM element matching `selector` within the component's
	   * `contentEl` or another custom context.
	   *
	   * @method $
	   * @param  {String} selector
	   *         A valid CSS selector, which will be passed to `querySelector`.
	   *
	   * @param  {Element|String} [context=document]
	   *         A DOM element within which to query. Can also be a selector
	   *         string in which case the first matching element will be used
	   *         as context. If missing (or no element matches selector), falls
	   *         back to `document`.
	   *
	   * @return {Element|null}
	   */

	  Component.prototype.$ = function $(selector, context) {
	    return Dom.$(selector, context || this.contentEl());
	  };

	  /**
	   * Finds a all DOM elements matching `selector` within the component's
	   * `contentEl` or another custom context.
	   *
	   * @method $$
	   * @param  {String} selector
	   *         A valid CSS selector, which will be passed to `querySelectorAll`.
	   *
	   * @param  {Element|String} [context=document]
	   *         A DOM element within which to query. Can also be a selector
	   *         string in which case the first matching element will be used
	   *         as context. If missing (or no element matches selector), falls
	   *         back to `document`.
	   *
	   * @return {NodeList}
	   */

	  Component.prototype.$$ = function $$(selector, context) {
	    return Dom.$$(selector, context || this.contentEl());
	  };

	  /**
	   * Check if a component's element has a CSS class name
	   *
	   * @param {String} classToCheck Classname to check
	   * @return {Component}
	   * @method hasClass
	   */

	  Component.prototype.hasClass = function hasClass(classToCheck) {
	    return Dom.hasElClass(this.el_, classToCheck);
	  };

	  /**
	   * Add a CSS class name to the component's element
	   *
	   * @param {String} classToAdd Classname to add
	   * @return {Component}
	   * @method addClass
	   */

	  Component.prototype.addClass = function addClass(classToAdd) {
	    Dom.addElClass(this.el_, classToAdd);
	    return this;
	  };

	  /**
	   * Remove a CSS class name from the component's element
	   *
	   * @param {String} classToRemove Classname to remove
	   * @return {Component}
	   * @method removeClass
	   */

	  Component.prototype.removeClass = function removeClass(classToRemove) {
	    Dom.removeElClass(this.el_, classToRemove);
	    return this;
	  };

	  /**
	   * Add or remove a CSS class name from the component's element
	   *
	   * @param  {String} classToToggle
	   * @param  {Boolean|Function} [predicate]
	   *         Can be a function that returns a Boolean. If `true`, the class
	   *         will be added; if `false`, the class will be removed. If not
	   *         given, the class will be added if not present and vice versa.
	   *
	   * @return {Component}
	   * @method toggleClass
	   */

	  Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {
	    Dom.toggleElClass(this.el_, classToToggle, predicate);
	    return this;
	  };

	  /**
	   * Show the component element if hidden
	   *
	   * @return {Component}
	   * @method show
	   */

	  Component.prototype.show = function show() {
	    this.removeClass('vjs-hidden');
	    return this;
	  };

	  /**
	   * Hide the component element if currently showing
	   *
	   * @return {Component}
	   * @method hide
	   */

	  Component.prototype.hide = function hide() {
	    this.addClass('vjs-hidden');
	    return this;
	  };

	  /**
	   * Lock an item in its visible state
	   * To be used with fadeIn/fadeOut.
	   *
	   * @return {Component}
	   * @private
	   * @method lockShowing
	   */

	  Component.prototype.lockShowing = function lockShowing() {
	    this.addClass('vjs-lock-showing');
	    return this;
	  };

	  /**
	   * Unlock an item to be hidden
	   * To be used with fadeIn/fadeOut.
	   *
	   * @return {Component}
	   * @private
	   * @method unlockShowing
	   */

	  Component.prototype.unlockShowing = function unlockShowing() {
	    this.removeClass('vjs-lock-showing');
	    return this;
	  };

	  /**
	   * Set or get the width of the component (CSS values)
	   * Setting the video tag dimension values only works with values in pixels.
	   * Percent values will not work.
	   * Some percents can be used, but width()/height() will return the number + %,
	   * not the actual computed width/height.
	   *
	   * @param  {Number|String=} num   Optional width number
	   * @param  {Boolean} skipListeners Skip the 'resize' event trigger
	   * @return {Component} This component, when setting the width
	   * @return {Number|String} The width, when getting
	   * @method width
	   */

	  Component.prototype.width = function width(num, skipListeners) {
	    return this.dimension('width', num, skipListeners);
	  };

	  /**
	   * Get or set the height of the component (CSS values)
	   * Setting the video tag dimension values only works with values in pixels.
	   * Percent values will not work.
	   * Some percents can be used, but width()/height() will return the number + %,
	   * not the actual computed width/height.
	   *
	   * @param  {Number|String=} num     New component height
	   * @param  {Boolean=} skipListeners Skip the resize event trigger
	   * @return {Component} This component, when setting the height
	   * @return {Number|String} The height, when getting
	   * @method height
	   */

	  Component.prototype.height = function height(num, skipListeners) {
	    return this.dimension('height', num, skipListeners);
	  };

	  /**
	   * Set both width and height at the same time
	   *
	   * @param  {Number|String} width Width of player
	   * @param  {Number|String} height Height of player
	   * @return {Component} The component
	   * @method dimensions
	   */

	  Component.prototype.dimensions = function dimensions(width, height) {
	    // Skip resize listeners on width for optimization
	    return this.width(width, true).height(height);
	  };

	  /**
	   * Get or set width or height
	   * This is the shared code for the width() and height() methods.
	   * All for an integer, integer + 'px' or integer + '%';
	   * Known issue: Hidden elements officially have a width of 0. We're defaulting
	   * to the style.width value and falling back to computedStyle which has the
	   * hidden element issue. Info, but probably not an efficient fix:
	   * http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/
	   *
	   * @param  {String} widthOrHeight  'width' or 'height'
	   * @param  {Number|String=} num     New dimension
	   * @param  {Boolean=} skipListeners Skip resize event trigger
	   * @return {Component} The component if a dimension was set
	   * @return {Number|String} The dimension if nothing was set
	   * @private
	   * @method dimension
	   */

	  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
	    if (num !== undefined) {
	      // Set to zero if null or literally NaN (NaN !== NaN)
	      if (num === null || num !== num) {
	        num = 0;
	      }

	      // Check if using css width/height (% or px) and adjust
	      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
	        this.el_.style[widthOrHeight] = num;
	      } else if (num === 'auto') {
	        this.el_.style[widthOrHeight] = '';
	      } else {
	        this.el_.style[widthOrHeight] = num + 'px';
	      }

	      // skipListeners allows us to avoid triggering the resize event when setting both width and height
	      if (!skipListeners) {
	        this.trigger('resize');
	      }

	      // Return component
	      return this;
	    }

	    // Not setting a value, so getting it
	    // Make sure element exists
	    if (!this.el_) {
	      return 0;
	    }

	    // Get dimension value from style
	    var val = this.el_.style[widthOrHeight];
	    var pxIndex = val.indexOf('px');

	    if (pxIndex !== -1) {
	      // Return the pixel value with no 'px'
	      return parseInt(val.slice(0, pxIndex), 10);
	    }

	    // No px so using % or no style was set, so falling back to offsetWidth/height
	    // If component has display:none, offset will return 0
	    // TODO: handle display:none and no dimension style using px
	    return parseInt(this.el_['offset' + _utilsToTitleCaseJs2['default'](widthOrHeight)], 10);
	  };

	  /**
	   * Get width or height of computed style
	   * @param  {String} widthOrHeight  'width' or 'height'
	   * @return {Number|Boolean} The bolean false if nothing was set
	   * @method currentDimension
	   */

	  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
	    var computedWidthOrHeight = 0;

	    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
	      throw new Error('currentDimension only accepts width or height value');
	    }

	    if (typeof _globalWindow2['default'].getComputedStyle === 'function') {
	      var computedStyle = _globalWindow2['default'].getComputedStyle(this.el_);
	      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
	    } else if (this.el_.currentStyle) {
	      // ie 8 doesn't support computed style, shim it
	      // return clientWidth or clientHeight instead for better accuracy
	      var rule = 'offset' + _utilsToTitleCaseJs2['default'](widthOrHeight);
	      computedWidthOrHeight = this.el_[rule];
	    }

	    // remove 'px' from variable and parse as integer
	    computedWidthOrHeight = parseFloat(computedWidthOrHeight);
	    return computedWidthOrHeight;
	  };

	  /**
	   * Get an object which contains width and height values of computed style
	   * @return {Object} The dimensions of element
	   * @method currentDimensions
	   */

	  Component.prototype.currentDimensions = function currentDimensions() {
	    return {
	      width: this.currentDimension('width'),
	      height: this.currentDimension('height')
	    };
	  };

	  /**
	   * Get width of computed style
	   * @return {Integer}
	   * @method currentWidth
	   */

	  Component.prototype.currentWidth = function currentWidth() {
	    return this.currentDimension('width');
	  };

	  /**
	   * Get height of computed style
	   * @return {Integer}
	   * @method currentHeight
	   */

	  Component.prototype.currentHeight = function currentHeight() {
	    return this.currentDimension('height');
	  };

	  /**
	   * Emit 'tap' events when touch events are supported
	   * This is used to support toggling the controls through a tap on the video.
	   * We're requiring them to be enabled because otherwise every component would
	   * have this extra overhead unnecessarily, on mobile devices where extra
	   * overhead is especially bad.
	   *
	   * @private
	   * @method emitTapEvents
	   */

	  Component.prototype.emitTapEvents = function emitTapEvents() {
	    // Track the start time so we can determine how long the touch lasted
	    var touchStart = 0;
	    var firstTouch = null;

	    // Maximum movement allowed during a touch event to still be considered a tap
	    // Other popular libs use anywhere from 2 (hammer.js) to 15, so 10 seems like a nice, round number.
	    var tapMovementThreshold = 10;

	    // The maximum length a touch can be while still being considered a tap
	    var touchTimeThreshold = 200;

	    var couldBeTap = undefined;

	    this.on('touchstart', function (event) {
	      // If more than one finger, don't consider treating this as a click
	      if (event.touches.length === 1) {
	        // Copy pageX/pageY from the object
	        firstTouch = {
	          pageX: event.touches[0].pageX,
	          pageY: event.touches[0].pageY
	        };
	        // Record start time so we can detect a tap vs. "touch and hold"
	        touchStart = new Date().getTime();
	        // Reset couldBeTap tracking
	        couldBeTap = true;
	      }
	    });

	    this.on('touchmove', function (event) {
	      // If more than one finger, don't consider treating this as a click
	      if (event.touches.length > 1) {
	        couldBeTap = false;
	      } else if (firstTouch) {
	        // Some devices will throw touchmoves for all but the slightest of taps.
	        // So, if we moved only a small distance, this could still be a tap
	        var xdiff = event.touches[0].pageX - firstTouch.pageX;
	        var ydiff = event.touches[0].pageY - firstTouch.pageY;
	        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

	        if (touchDistance > tapMovementThreshold) {
	          couldBeTap = false;
	        }
	      }
	    });

	    var noTap = function noTap() {
	      couldBeTap = false;
	    };

	    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
	    this.on('touchleave', noTap);
	    this.on('touchcancel', noTap);

	    // When the touch ends, measure how long it took and trigger the appropriate
	    // event
	    this.on('touchend', function (event) {
	      firstTouch = null;
	      // Proceed only if the touchmove/leave/cancel event didn't happen
	      if (couldBeTap === true) {
	        // Measure how long the touch lasted
	        var touchTime = new Date().getTime() - touchStart;

	        // Make sure the touch was less than the threshold to be considered a tap
	        if (touchTime < touchTimeThreshold) {
	          // Don't let browser turn this into a click
	          event.preventDefault();
	          this.trigger('tap');
	          // It may be good to copy the touchend event object and change the
	          // type to tap, if the other event properties aren't exact after
	          // Events.fixEvent runs (e.g. event.target)
	        }
	      }
	    });
	  };

	  /**
	   * Report user touch activity when touch events occur
	   * User activity is used to determine when controls should show/hide. It's
	   * relatively simple when it comes to mouse events, because any mouse event
	   * should show the controls. So we capture mouse events that bubble up to the
	   * player and report activity when that happens.
	   * With touch events it isn't as easy. We can't rely on touch events at the
	   * player level, because a tap (touchstart + touchend) on the video itself on
	   * mobile devices is meant to turn controls off (and on). User activity is
	   * checked asynchronously, so what could happen is a tap event on the video
	   * turns the controls off, then the touchend event bubbles up to the player,
	   * which if it reported user activity, would turn the controls right back on.
	   * (We also don't want to completely block touch events from bubbling up)
	   * Also a touchmove, touch+hold, and anything other than a tap is not supposed
	   * to turn the controls back on on a mobile device.
	   * Here we're setting the default component behavior to report user activity
	   * whenever touch events happen, and this can be turned off by components that
	   * want touch events to act differently.
	   *
	   * @method enableTouchActivity
	   */

	  Component.prototype.enableTouchActivity = function enableTouchActivity() {
	    // Don't continue if the root player doesn't support reporting user activity
	    if (!this.player() || !this.player().reportUserActivity) {
	      return;
	    }

	    // listener for reporting that the user is active
	    var report = Fn.bind(this.player(), this.player().reportUserActivity);

	    var touchHolding = undefined;

	    this.on('touchstart', function () {
	      report();
	      // For as long as the they are touching the device or have their mouse down,
	      // we consider them active even if they're not moving their finger or mouse.
	      // So we want to continue to update that they are active
	      this.clearInterval(touchHolding);
	      // report at the same interval as activityCheck
	      touchHolding = this.setInterval(report, 250);
	    });

	    var touchEnd = function touchEnd(event) {
	      report();
	      // stop the interval that maintains activity if the touch is holding
	      this.clearInterval(touchHolding);
	    };

	    this.on('touchmove', report);
	    this.on('touchend', touchEnd);
	    this.on('touchcancel', touchEnd);
	  };

	  /**
	   * Creates timeout and sets up disposal automatically.
	   *
	   * @param {Function} fn The function to run after the timeout.
	   * @param {Number} timeout Number of ms to delay before executing specified function.
	   * @return {Number} Returns the timeout ID
	   * @method setTimeout
	   */

	  Component.prototype.setTimeout = function setTimeout(fn, timeout) {
	    fn = Fn.bind(this, fn);

	    // window.setTimeout would be preferable here, but due to some bizarre issue with Sinon and/or Phantomjs, we can't.
	    var timeoutId = _globalWindow2['default'].setTimeout(fn, timeout);

	    var disposeFn = function disposeFn() {
	      this.clearTimeout(timeoutId);
	    };

	    disposeFn.guid = 'vjs-timeout-' + timeoutId;

	    this.on('dispose', disposeFn);

	    return timeoutId;
	  };

	  /**
	   * Clears a timeout and removes the associated dispose listener
	   *
	   * @param {Number} timeoutId The id of the timeout to clear
	   * @return {Number} Returns the timeout ID
	   * @method clearTimeout
	   */

	  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
	    _globalWindow2['default'].clearTimeout(timeoutId);

	    var disposeFn = function disposeFn() {};

	    disposeFn.guid = 'vjs-timeout-' + timeoutId;

	    this.off('dispose', disposeFn);

	    return timeoutId;
	  };

	  /**
	   * Creates an interval and sets up disposal automatically.
	   *
	   * @param {Function} fn The function to run every N seconds.
	   * @param {Number} interval Number of ms to delay before executing specified function.
	   * @return {Number} Returns the interval ID
	   * @method setInterval
	   */

	  Component.prototype.setInterval = function setInterval(fn, interval) {
	    fn = Fn.bind(this, fn);

	    var intervalId = _globalWindow2['default'].setInterval(fn, interval);

	    var disposeFn = function disposeFn() {
	      this.clearInterval(intervalId);
	    };

	    disposeFn.guid = 'vjs-interval-' + intervalId;

	    this.on('dispose', disposeFn);

	    return intervalId;
	  };

	  /**
	   * Clears an interval and removes the associated dispose listener
	   *
	   * @param {Number} intervalId The id of the interval to clear
	   * @return {Number} Returns the interval ID
	   * @method clearInterval
	   */

	  Component.prototype.clearInterval = function clearInterval(intervalId) {
	    _globalWindow2['default'].clearInterval(intervalId);

	    var disposeFn = function disposeFn() {};

	    disposeFn.guid = 'vjs-interval-' + intervalId;

	    this.off('dispose', disposeFn);

	    return intervalId;
	  };

	  /**
	   * Registers a component
	   *
	   * @param {String} name Name of the component to register
	   * @param {Object} comp The component to register
	   * @static
	   * @method registerComponent
	   */

	  Component.registerComponent = function registerComponent(name, comp) {
	    if (!Component.components_) {
	      Component.components_ = {};
	    }

	    Component.components_[name] = comp;
	    return comp;
	  };

	  /**
	   * Gets a component by name
	   *
	   * @param {String} name Name of the component to get
	   * @return {Component}
	   * @static
	   * @method getComponent
	   */

	  Component.getComponent = function getComponent(name) {
	    if (Component.components_ && Component.components_[name]) {
	      return Component.components_[name];
	    }

	    if (_globalWindow2['default'] && _globalWindow2['default'].videojs && _globalWindow2['default'].videojs[name]) {
	      _utilsLogJs2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');
	      return _globalWindow2['default'].videojs[name];
	    }
	  };

	  /**
	   * Sets up the constructor using the supplied init method
	   * or uses the init of the parent object
	   *
	   * @param {Object} props An object of properties
	   * @static
	   * @deprecated
	   * @method extend
	   */

	  Component.extend = function extend(props) {
	    props = props || {};

	    _utilsLogJs2['default'].warn('Component.extend({}) has been deprecated, use videojs.extend(Component, {}) instead');

	    // Set up the constructor using the supplied init method
	    // or using the init of the parent object
	    // Make sure to check the unobfuscated version for external libs
	    var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};
	    // In Resig's simple class inheritance (previously used) the constructor
	    //  is a function that calls `this.init.apply(arguments)`
	    // However that would prevent us from using `ParentObject.call(this);`
	    //  in a Child constructor because the `this` in `this.init`
	    //  would still refer to the Child and cause an infinite loop.
	    // We would instead have to do
	    //    `ParentObject.prototype.init.apply(this, arguments);`
	    //  Bleh. We're not creating a _super() function, so it's good to keep
	    //  the parent constructor reference simple.
	    var subObj = function subObj() {
	      init.apply(this, arguments);
	    };

	    // Inherit from this object's prototype
	    subObj.prototype = Object.create(this.prototype);
	    // Reset the constructor property for subObj otherwise
	    // instances of subObj would have the constructor of the parent Object
	    subObj.prototype.constructor = subObj;

	    // Make the class extendable
	    subObj.extend = Component.extend;

	    // Extend subObj's prototype with functions and other properties from props
	    for (var _name in props) {
	      if (props.hasOwnProperty(_name)) {
	        subObj.prototype[_name] = props[_name];
	      }
	    }

	    return subObj;
	  };

	  return Component;
	})();

	Component.registerComponent('Component', Component);
	exports['default'] = Component;
	module.exports = exports['default'];

	},{"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/guid.js":146,"./utils/log.js":147,"./utils/merge-options.js":148,"./utils/to-title-case.js":151,"global/window":2}],68:[function(_dereq_,module,exports){
	/**
	 * @file audio-track-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _trackButtonJs = _dereq_('../track-button.js');

	var _trackButtonJs2 = _interopRequireDefault(_trackButtonJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _audioTrackMenuItemJs = _dereq_('./audio-track-menu-item.js');

	var _audioTrackMenuItemJs2 = _interopRequireDefault(_audioTrackMenuItemJs);

	/**
	 * The base class for buttons that toggle specific text track types (e.g. subtitles)
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends TrackButton
	 * @class AudioTrackButton
	 */

	var AudioTrackButton = (function (_TrackButton) {
	  _inherits(AudioTrackButton, _TrackButton);

	  function AudioTrackButton(player) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, AudioTrackButton);

	    options.tracks = player.audioTracks && player.audioTracks();

	    _TrackButton.call(this, player, options);

	    this.el_.setAttribute('aria-label', 'Audio Menu');
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create a menu item for each audio track
	   *
	   * @return {Array} Array of menu items
	   * @method createItems
	   */

	  AudioTrackButton.prototype.createItems = function createItems() {
	    var items = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	    var tracks = this.player_.audioTracks && this.player_.audioTracks();

	    if (!tracks) {
	      return items;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      items.push(new _audioTrackMenuItemJs2['default'](this.player_, {
	        // MenuItem is selectable
	        'selectable': true,
	        'track': track
	      }));
	    }

	    return items;
	  };

	  return AudioTrackButton;
	})(_trackButtonJs2['default']);

	AudioTrackButton.prototype.controlText_ = 'Audio Track';
	_componentJs2['default'].registerComponent('AudioTrackButton', AudioTrackButton);
	exports['default'] = AudioTrackButton;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../utils/fn.js":144,"../track-button.js":98,"./audio-track-menu-item.js":69}],69:[function(_dereq_,module,exports){
	/**
	 * @file audio-track-menu-item.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

	var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	/**
	 * The audio track menu item
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuItem
	 * @class AudioTrackMenuItem
	 */

	var AudioTrackMenuItem = (function (_MenuItem) {
	  _inherits(AudioTrackMenuItem, _MenuItem);

	  function AudioTrackMenuItem(player, options) {
	    var _this = this;

	    _classCallCheck(this, AudioTrackMenuItem);

	    var track = options.track;
	    var tracks = player.audioTracks();

	    // Modify options for parent MenuItem class's init.
	    options.label = track.label || track.language || 'Unknown';
	    options.selected = track.enabled;

	    _MenuItem.call(this, player, options);

	    this.track = track;

	    if (tracks) {
	      (function () {
	        var changeHandler = Fn.bind(_this, _this.handleTracksChange);

	        tracks.addEventListener('change', changeHandler);
	        _this.on('dispose', function () {
	          tracks.removeEventListener('change', changeHandler);
	        });
	      })();
	    }
	  }

	  /**
	   * Handle click on audio track
	   *
	   * @method handleClick
	   */

	  AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    var tracks = this.player_.audioTracks();

	    _MenuItem.prototype.handleClick.call(this, event);

	    if (!tracks) return;

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      track.enabled = track === this.track;
	    }
	  };

	  /**
	   * Handle audio track change
	   *
	   * @method handleTracksChange
	   */

	  AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    this.selected(this.track.enabled);
	  };

	  return AudioTrackMenuItem;
	})(_menuMenuItemJs2['default']);

	_componentJs2['default'].registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);
	exports['default'] = AudioTrackMenuItem;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144}],70:[function(_dereq_,module,exports){
	/**
	 * @file control-bar.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	// Required children

	var _playToggleJs = _dereq_('./play-toggle.js');

	var _playToggleJs2 = _interopRequireDefault(_playToggleJs);

	var _timeControlsCurrentTimeDisplayJs = _dereq_('./time-controls/current-time-display.js');

	var _timeControlsCurrentTimeDisplayJs2 = _interopRequireDefault(_timeControlsCurrentTimeDisplayJs);

	var _timeControlsDurationDisplayJs = _dereq_('./time-controls/duration-display.js');

	var _timeControlsDurationDisplayJs2 = _interopRequireDefault(_timeControlsDurationDisplayJs);

	var _timeControlsTimeDividerJs = _dereq_('./time-controls/time-divider.js');

	var _timeControlsTimeDividerJs2 = _interopRequireDefault(_timeControlsTimeDividerJs);

	var _timeControlsRemainingTimeDisplayJs = _dereq_('./time-controls/remaining-time-display.js');

	var _timeControlsRemainingTimeDisplayJs2 = _interopRequireDefault(_timeControlsRemainingTimeDisplayJs);

	var _liveDisplayJs = _dereq_('./live-display.js');

	var _liveDisplayJs2 = _interopRequireDefault(_liveDisplayJs);

	var _progressControlProgressControlJs = _dereq_('./progress-control/progress-control.js');

	var _progressControlProgressControlJs2 = _interopRequireDefault(_progressControlProgressControlJs);

	var _fullscreenToggleJs = _dereq_('./fullscreen-toggle.js');

	var _fullscreenToggleJs2 = _interopRequireDefault(_fullscreenToggleJs);

	var _volumeControlVolumeControlJs = _dereq_('./volume-control/volume-control.js');

	var _volumeControlVolumeControlJs2 = _interopRequireDefault(_volumeControlVolumeControlJs);

	var _volumeMenuButtonJs = _dereq_('./volume-menu-button.js');

	var _volumeMenuButtonJs2 = _interopRequireDefault(_volumeMenuButtonJs);

	var _muteToggleJs = _dereq_('./mute-toggle.js');

	var _muteToggleJs2 = _interopRequireDefault(_muteToggleJs);

	var _textTrackControlsChaptersButtonJs = _dereq_('./text-track-controls/chapters-button.js');

	var _textTrackControlsChaptersButtonJs2 = _interopRequireDefault(_textTrackControlsChaptersButtonJs);

	var _textTrackControlsDescriptionsButtonJs = _dereq_('./text-track-controls/descriptions-button.js');

	var _textTrackControlsDescriptionsButtonJs2 = _interopRequireDefault(_textTrackControlsDescriptionsButtonJs);

	var _textTrackControlsSubtitlesButtonJs = _dereq_('./text-track-controls/subtitles-button.js');

	var _textTrackControlsSubtitlesButtonJs2 = _interopRequireDefault(_textTrackControlsSubtitlesButtonJs);

	var _textTrackControlsCaptionsButtonJs = _dereq_('./text-track-controls/captions-button.js');

	var _textTrackControlsCaptionsButtonJs2 = _interopRequireDefault(_textTrackControlsCaptionsButtonJs);

	var _audioTrackControlsAudioTrackButtonJs = _dereq_('./audio-track-controls/audio-track-button.js');

	var _audioTrackControlsAudioTrackButtonJs2 = _interopRequireDefault(_audioTrackControlsAudioTrackButtonJs);

	var _playbackRateMenuPlaybackRateMenuButtonJs = _dereq_('./playback-rate-menu/playback-rate-menu-button.js');

	var _playbackRateMenuPlaybackRateMenuButtonJs2 = _interopRequireDefault(_playbackRateMenuPlaybackRateMenuButtonJs);

	var _spacerControlsCustomControlSpacerJs = _dereq_('./spacer-controls/custom-control-spacer.js');

	var _spacerControlsCustomControlSpacerJs2 = _interopRequireDefault(_spacerControlsCustomControlSpacerJs);

	/**
	 * Container of main controls
	 *
	 * @extends Component
	 * @class ControlBar
	 */

	var ControlBar = (function (_Component) {
	  _inherits(ControlBar, _Component);

	  function ControlBar() {
	    _classCallCheck(this, ControlBar);

	    _Component.apply(this, arguments);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  ControlBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-control-bar',
	      dir: 'ltr'
	    }, {
	      'role': 'group' // The control bar is a group, so it can contain menuitems
	    });
	  };

	  return ControlBar;
	})(_componentJs2['default']);

	ControlBar.prototype.options_ = {
	  children: ['playToggle', 'volumeMenuButton', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subtitlesButton', 'captionsButton', 'audioTrackButton', 'fullscreenToggle']
	};

	_componentJs2['default'].registerComponent('ControlBar', ControlBar);
	exports['default'] = ControlBar;
	module.exports = exports['default'];

	},{"../component.js":67,"./audio-track-controls/audio-track-button.js":68,"./fullscreen-toggle.js":71,"./live-display.js":72,"./mute-toggle.js":73,"./play-toggle.js":74,"./playback-rate-menu/playback-rate-menu-button.js":75,"./progress-control/progress-control.js":80,"./spacer-controls/custom-control-spacer.js":83,"./text-track-controls/captions-button.js":86,"./text-track-controls/chapters-button.js":87,"./text-track-controls/descriptions-button.js":89,"./text-track-controls/subtitles-button.js":91,"./time-controls/current-time-display.js":94,"./time-controls/duration-display.js":95,"./time-controls/remaining-time-display.js":96,"./time-controls/time-divider.js":97,"./volume-control/volume-control.js":100,"./volume-menu-button.js":102}],71:[function(_dereq_,module,exports){
	/**
	 * @file fullscreen-toggle.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _buttonJs = _dereq_('../button.js');

	var _buttonJs2 = _interopRequireDefault(_buttonJs);

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * Toggle fullscreen video
	 *
	 * @extends Button
	 * @class FullscreenToggle
	 */

	var FullscreenToggle = (function (_Button) {
	  _inherits(FullscreenToggle, _Button);

	  function FullscreenToggle(player, options) {
	    _classCallCheck(this, FullscreenToggle);

	    _Button.call(this, player, options);
	    this.on(player, 'fullscreenchange', this.handleFullscreenChange);
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handles Fullscreenchange on the component and change control text accordingly
	   *
	   * @method handleFullscreenChange
	   */

	  FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange() {
	    if (this.player_.isFullscreen()) {
	      this.controlText('Non-Fullscreen');
	    } else {
	      this.controlText('Fullscreen');
	    }
	  };

	  /**
	   * Handles click for full screen
	   *
	   * @method handleClick
	   */

	  FullscreenToggle.prototype.handleClick = function handleClick() {
	    if (!this.player_.isFullscreen()) {
	      this.player_.requestFullscreen();
	    } else {
	      this.player_.exitFullscreen();
	    }
	  };

	  return FullscreenToggle;
	})(_buttonJs2['default']);

	FullscreenToggle.prototype.controlText_ = 'Fullscreen';

	_componentJs2['default'].registerComponent('FullscreenToggle', FullscreenToggle);
	exports['default'] = FullscreenToggle;
	module.exports = exports['default'];

	},{"../button.js":64,"../component.js":67}],72:[function(_dereq_,module,exports){
	/**
	 * @file live-display.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _component = _dereq_('../component');

	var _component2 = _interopRequireDefault(_component);

	var _utilsDomJs = _dereq_('../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	/**
	 * Displays the live indicator
	 * TODO - Future make it click to snap to live
	 *
	 * @extends Component
	 * @class LiveDisplay
	 */

	var LiveDisplay = (function (_Component) {
	  _inherits(LiveDisplay, _Component);

	  function LiveDisplay(player, options) {
	    _classCallCheck(this, LiveDisplay);

	    _Component.call(this, player, options);

	    this.updateShowing();
	    this.on(this.player(), 'durationchange', this.updateShowing);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  LiveDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-live-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-live-display',
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')
	    }, {
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  LiveDisplay.prototype.updateShowing = function updateShowing() {
	    if (this.player().duration() === Infinity) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };

	  return LiveDisplay;
	})(_component2['default']);

	_component2['default'].registerComponent('LiveDisplay', LiveDisplay);
	exports['default'] = LiveDisplay;
	module.exports = exports['default'];

	},{"../component":67,"../utils/dom.js":142}],73:[function(_dereq_,module,exports){
	/**
	 * @file mute-toggle.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _button = _dereq_('../button');

	var _button2 = _interopRequireDefault(_button);

	var _component = _dereq_('../component');

	var _component2 = _interopRequireDefault(_component);

	var _utilsDomJs = _dereq_('../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	/**
	 * A button component for muting the audio
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Button
	 * @class MuteToggle
	 */

	var MuteToggle = (function (_Button) {
	  _inherits(MuteToggle, _Button);

	  function MuteToggle(player, options) {
	    _classCallCheck(this, MuteToggle);

	    _Button.call(this, player, options);

	    this.on(player, 'volumechange', this.update);

	    // hide mute toggle if the current tech doesn't support volume control
	    if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
	      this.addClass('vjs-hidden');
	    }

	    this.on(player, 'loadstart', function () {
	      this.update(); // We need to update the button to account for a default muted state.

	      if (player.tech_['featuresVolumeControl'] === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    });
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handle click on mute
	   *
	   * @method handleClick
	   */

	  MuteToggle.prototype.handleClick = function handleClick() {
	    this.player_.muted(this.player_.muted() ? false : true);
	  };

	  /**
	   * Update volume
	   *
	   * @method update
	   */

	  MuteToggle.prototype.update = function update() {
	    var vol = this.player_.volume(),
	        level = 3;

	    if (vol === 0 || this.player_.muted()) {
	      level = 0;
	    } else if (vol < 0.33) {
	      level = 1;
	    } else if (vol < 0.67) {
	      level = 2;
	    }

	    // Don't rewrite the button text if the actual text doesn't change.
	    // This causes unnecessary and confusing information for screen reader users.
	    // This check is needed because this function gets called every time the volume level is changed.
	    var toMute = this.player_.muted() ? 'Unmute' : 'Mute';
	    if (this.controlText() !== toMute) {
	      this.controlText(toMute);
	    }

	    /* TODO improve muted icon classes */
	    for (var i = 0; i < 4; i++) {
	      Dom.removeElClass(this.el_, 'vjs-vol-' + i);
	    }
	    Dom.addElClass(this.el_, 'vjs-vol-' + level);
	  };

	  return MuteToggle;
	})(_button2['default']);

	MuteToggle.prototype.controlText_ = 'Mute';

	_component2['default'].registerComponent('MuteToggle', MuteToggle);
	exports['default'] = MuteToggle;
	module.exports = exports['default'];

	},{"../button":64,"../component":67,"../utils/dom.js":142}],74:[function(_dereq_,module,exports){
	/**
	 * @file play-toggle.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _buttonJs = _dereq_('../button.js');

	var _buttonJs2 = _interopRequireDefault(_buttonJs);

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * Button to toggle between play and pause
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Button
	 * @class PlayToggle
	 */

	var PlayToggle = (function (_Button) {
	  _inherits(PlayToggle, _Button);

	  function PlayToggle(player, options) {
	    _classCallCheck(this, PlayToggle);

	    _Button.call(this, player, options);

	    this.on(player, 'play', this.handlePlay);
	    this.on(player, 'pause', this.handlePause);
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handle click to toggle between play and pause
	   *
	   * @method handleClick
	   */

	  PlayToggle.prototype.handleClick = function handleClick() {
	    if (this.player_.paused()) {
	      this.player_.play();
	    } else {
	      this.player_.pause();
	    }
	  };

	  /**
	   * Add the vjs-playing class to the element so it can change appearance
	   *
	   * @method handlePlay
	   */

	  PlayToggle.prototype.handlePlay = function handlePlay() {
	    this.removeClass('vjs-paused');
	    this.addClass('vjs-playing');
	    this.controlText('Pause'); // change the button text to "Pause"
	  };

	  /**
	   * Add the vjs-paused class to the element so it can change appearance
	   *
	   * @method handlePause
	   */

	  PlayToggle.prototype.handlePause = function handlePause() {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-paused');
	    this.controlText('Play'); // change the button text to "Play"
	  };

	  return PlayToggle;
	})(_buttonJs2['default']);

	PlayToggle.prototype.controlText_ = 'Play';

	_componentJs2['default'].registerComponent('PlayToggle', PlayToggle);
	exports['default'] = PlayToggle;
	module.exports = exports['default'];

	},{"../button.js":64,"../component.js":67}],75:[function(_dereq_,module,exports){
	/**
	 * @file playback-rate-menu-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _menuMenuButtonJs = _dereq_('../../menu/menu-button.js');

	var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

	var _menuMenuJs = _dereq_('../../menu/menu.js');

	var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

	var _playbackRateMenuItemJs = _dereq_('./playback-rate-menu-item.js');

	var _playbackRateMenuItemJs2 = _interopRequireDefault(_playbackRateMenuItemJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsDomJs = _dereq_('../../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	/**
	 * The component for controlling the playback rate
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuButton
	 * @class PlaybackRateMenuButton
	 */

	var PlaybackRateMenuButton = (function (_MenuButton) {
	  _inherits(PlaybackRateMenuButton, _MenuButton);

	  function PlaybackRateMenuButton(player, options) {
	    _classCallCheck(this, PlaybackRateMenuButton);

	    _MenuButton.call(this, player, options);

	    this.updateVisibility();
	    this.updateLabel();

	    this.on(player, 'loadstart', this.updateVisibility);
	    this.on(player, 'ratechange', this.updateLabel);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  PlaybackRateMenuButton.prototype.createEl = function createEl() {
	    var el = _MenuButton.prototype.createEl.call(this);

	    this.labelEl_ = Dom.createEl('div', {
	      className: 'vjs-playback-rate-value',
	      innerHTML: 1.0
	    });

	    el.appendChild(this.labelEl_);

	    return el;
	  };

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the playback rate menu
	   *
	   * @return {Menu} Menu object populated with items
	   * @method createMenu
	   */

	  PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
	    var menu = new _menuMenuJs2['default'](this.player());
	    var rates = this.playbackRates();

	    if (rates) {
	      for (var i = rates.length - 1; i >= 0; i--) {
	        menu.addChild(new _playbackRateMenuItemJs2['default'](this.player(), { 'rate': rates[i] + 'x' }));
	      }
	    }

	    return menu;
	  };

	  /**
	   * Updates ARIA accessibility attributes
	   *
	   * @method updateARIAAttributes
	   */

	  PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
	    // Current playback rate
	    this.el().setAttribute('aria-valuenow', this.player().playbackRate());
	  };

	  /**
	   * Handle menu item click
	   *
	   * @method handleClick
	   */

	  PlaybackRateMenuButton.prototype.handleClick = function handleClick() {
	    // select next rate option
	    var currentRate = this.player().playbackRate();
	    var rates = this.playbackRates();

	    // this will select first one if the last one currently selected
	    var newRate = rates[0];
	    for (var i = 0; i < rates.length; i++) {
	      if (rates[i] > currentRate) {
	        newRate = rates[i];
	        break;
	      }
	    }
	    this.player().playbackRate(newRate);
	  };

	  /**
	   * Get possible playback rates
	   *
	   * @return {Array} Possible playback rates
	   * @method playbackRates
	   */

	  PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
	    return this.options_['playbackRates'] || this.options_.playerOptions && this.options_.playerOptions['playbackRates'];
	  };

	  /**
	   * Get whether playback rates is supported by the tech
	   * and an array of playback rates exists
	   *
	   * @return {Boolean} Whether changing playback rate is supported
	   * @method playbackRateSupported
	   */

	  PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
	    return this.player().tech_ && this.player().tech_['featuresPlaybackRate'] && this.playbackRates() && this.playbackRates().length > 0;
	  };

	  /**
	   * Hide playback rate controls when they're no playback rate options to select
	   *
	   * @method updateVisibility
	   */

	  PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility() {
	    if (this.playbackRateSupported()) {
	      this.removeClass('vjs-hidden');
	    } else {
	      this.addClass('vjs-hidden');
	    }
	  };

	  /**
	   * Update button label when rate changed
	   *
	   * @method updateLabel
	   */

	  PlaybackRateMenuButton.prototype.updateLabel = function updateLabel() {
	    if (this.playbackRateSupported()) {
	      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
	    }
	  };

	  return PlaybackRateMenuButton;
	})(_menuMenuButtonJs2['default']);

	PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';

	_componentJs2['default'].registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);
	exports['default'] = PlaybackRateMenuButton;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../menu/menu-button.js":109,"../../menu/menu.js":111,"../../utils/dom.js":142,"./playback-rate-menu-item.js":76}],76:[function(_dereq_,module,exports){
	/**
	 * @file playback-rate-menu-item.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

	var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * The specific menu item type for selecting a playback rate
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuItem
	 * @class PlaybackRateMenuItem
	 */

	var PlaybackRateMenuItem = (function (_MenuItem) {
	  _inherits(PlaybackRateMenuItem, _MenuItem);

	  function PlaybackRateMenuItem(player, options) {
	    _classCallCheck(this, PlaybackRateMenuItem);

	    var label = options['rate'];
	    var rate = parseFloat(label, 10);

	    // Modify options for parent MenuItem class's init.
	    options['label'] = label;
	    options['selected'] = rate === 1;
	    _MenuItem.call(this, player, options);

	    this.label = label;
	    this.rate = rate;

	    this.on(player, 'ratechange', this.update);
	  }

	  /**
	   * Handle click on menu item
	   *
	   * @method handleClick
	   */

	  PlaybackRateMenuItem.prototype.handleClick = function handleClick() {
	    _MenuItem.prototype.handleClick.call(this);
	    this.player().playbackRate(this.rate);
	  };

	  /**
	   * Update playback rate with selected rate
	   *
	   * @method update
	   */

	  PlaybackRateMenuItem.prototype.update = function update() {
	    this.selected(this.player().playbackRate() === this.rate);
	  };

	  return PlaybackRateMenuItem;
	})(_menuMenuItemJs2['default']);

	PlaybackRateMenuItem.prototype.contentElType = 'button';

	_componentJs2['default'].registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);
	exports['default'] = PlaybackRateMenuItem;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../menu/menu-item.js":110}],77:[function(_dereq_,module,exports){
	/**
	 * @file load-progress-bar.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsDomJs = _dereq_('../../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	/**
	 * Shows load progress
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class LoadProgressBar
	 */

	var LoadProgressBar = (function (_Component) {
	  _inherits(LoadProgressBar, _Component);

	  function LoadProgressBar(player, options) {
	    _classCallCheck(this, LoadProgressBar);

	    _Component.call(this, player, options);
	    this.on(player, 'progress', this.update);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  LoadProgressBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-load-progress',
	      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
	    });
	  };

	  /**
	   * Update progress bar
	   *
	   * @method update
	   */

	  LoadProgressBar.prototype.update = function update() {
	    var buffered = this.player_.buffered();
	    var duration = this.player_.duration();
	    var bufferedEnd = this.player_.bufferedEnd();
	    var children = this.el_.children;

	    // get the percent width of a time compared to the total end
	    var percentify = function percentify(time, end) {
	      var percent = time / end || 0; // no NaN
	      return (percent >= 1 ? 1 : percent) * 100 + '%';
	    };

	    // update the width of the progress bar
	    this.el_.style.width = percentify(bufferedEnd, duration);

	    // add child elements to represent the individual buffered time ranges
	    for (var i = 0; i < buffered.length; i++) {
	      var start = buffered.start(i);
	      var end = buffered.end(i);
	      var part = children[i];

	      if (!part) {
	        part = this.el_.appendChild(Dom.createEl());
	      }

	      // set the percent based on the width of the progress bar (bufferedEnd)
	      part.style.left = percentify(start, bufferedEnd);
	      part.style.width = percentify(end - start, bufferedEnd);
	    }

	    // remove unused buffered range elements
	    for (var i = children.length; i > buffered.length; i--) {
	      this.el_.removeChild(children[i - 1]);
	    }
	  };

	  return LoadProgressBar;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('LoadProgressBar', LoadProgressBar);
	exports['default'] = LoadProgressBar;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../utils/dom.js":142}],78:[function(_dereq_,module,exports){
	/**
	 * @file mouse-time-display.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsDomJs = _dereq_('../../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

	var _lodashCompatFunctionThrottle = _dereq_('lodash-compat/function/throttle');

	var _lodashCompatFunctionThrottle2 = _interopRequireDefault(_lodashCompatFunctionThrottle);

	/**
	 * The Mouse Time Display component shows the time you will seek to
	 * when hovering over the progress bar
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class MouseTimeDisplay
	 */

	var MouseTimeDisplay = (function (_Component) {
	  _inherits(MouseTimeDisplay, _Component);

	  function MouseTimeDisplay(player, options) {
	    var _this = this;

	    _classCallCheck(this, MouseTimeDisplay);

	    _Component.call(this, player, options);

	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }

	    if (this.keepTooltipsInside) {
	      this.tooltip = Dom.createEl('div', { className: 'vjs-time-tooltip' });
	      this.el().appendChild(this.tooltip);
	      this.addClass('vjs-keep-tooltips-inside');
	    }

	    this.update(0, 0);

	    player.on('ready', function () {
	      _this.on(player.controlBar.progressControl.el(), 'mousemove', _lodashCompatFunctionThrottle2['default'](Fn.bind(_this, _this.handleMouseMove), 25));
	    });
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  MouseTimeDisplay.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-mouse-display'
	    });
	  };

	  MouseTimeDisplay.prototype.handleMouseMove = function handleMouseMove(event) {
	    var duration = this.player_.duration();
	    var newTime = this.calculateDistance(event) * duration;
	    var position = event.pageX - Dom.findElPosition(this.el().parentNode).left;

	    this.update(newTime, position);
	  };

	  MouseTimeDisplay.prototype.update = function update(newTime, position) {
	    var time = _utilsFormatTimeJs2['default'](newTime, this.player_.duration());

	    this.el().style.left = position + 'px';
	    this.el().setAttribute('data-current-time', time);

	    if (this.keepTooltipsInside) {
	      var clampedPosition = this.clampPosition_(position);
	      var difference = position - clampedPosition + 1;
	      var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltip).width);
	      var tooltipWidthHalf = tooltipWidth / 2;

	      this.tooltip.innerHTML = time;
	      this.tooltip.style.right = '-' + (tooltipWidthHalf - difference) + 'px';
	    }
	  };

	  MouseTimeDisplay.prototype.calculateDistance = function calculateDistance(event) {
	    return Dom.getPointerPosition(this.el().parentNode, event).x;
	  };

	  /**
	   * This takes in a horizontal position for the bar and returns a clamped position.
	   * Clamped position means that it will keep the position greater than half the width
	   * of the tooltip and smaller than the player width minus half the width o the tooltip.
	   * It will only clamp the position if `keepTooltipsInside` option is set.
	   *
	   * @param {Number} position the position the bar wants to be
	   * @return {Number} newPosition the (potentially) clamped position
	   * @method clampPosition_
	   */

	  MouseTimeDisplay.prototype.clampPosition_ = function clampPosition_(position) {
	    if (!this.keepTooltipsInside) {
	      return position;
	    }

	    var playerWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.player().el()).width);
	    var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltip).width);
	    var tooltipWidthHalf = tooltipWidth / 2;
	    var actualPosition = position;

	    if (position < tooltipWidthHalf) {
	      actualPosition = Math.ceil(tooltipWidthHalf);
	    } else if (position > playerWidth - tooltipWidthHalf) {
	      actualPosition = Math.floor(playerWidth - tooltipWidthHalf);
	    }

	    return actualPosition;
	  };

	  return MouseTimeDisplay;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('MouseTimeDisplay', MouseTimeDisplay);
	exports['default'] = MouseTimeDisplay;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145,"global/window":2,"lodash-compat/function/throttle":7}],79:[function(_dereq_,module,exports){
	/**
	 * @file play-progress-bar.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsDomJs = _dereq_('../../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

	/**
	 * Shows play progress
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class PlayProgressBar
	 */

	var PlayProgressBar = (function (_Component) {
	  _inherits(PlayProgressBar, _Component);

	  function PlayProgressBar(player, options) {
	    _classCallCheck(this, PlayProgressBar);

	    _Component.call(this, player, options);
	    this.updateDataAttr();
	    this.on(player, 'timeupdate', this.updateDataAttr);
	    player.ready(Fn.bind(this, this.updateDataAttr));

	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }

	    if (this.keepTooltipsInside) {
	      this.addClass('vjs-keep-tooltips-inside');
	    }
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  PlayProgressBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-play-progress vjs-slider-bar',
	      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
	    });
	  };

	  PlayProgressBar.prototype.updateDataAttr = function updateDataAttr() {
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    this.el_.setAttribute('data-current-time', _utilsFormatTimeJs2['default'](time, this.player_.duration()));
	  };

	  return PlayProgressBar;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('PlayProgressBar', PlayProgressBar);
	exports['default'] = PlayProgressBar;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145}],80:[function(_dereq_,module,exports){
	/**
	 * @file progress-control.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _seekBarJs = _dereq_('./seek-bar.js');

	var _seekBarJs2 = _interopRequireDefault(_seekBarJs);

	var _mouseTimeDisplayJs = _dereq_('./mouse-time-display.js');

	var _mouseTimeDisplayJs2 = _interopRequireDefault(_mouseTimeDisplayJs);

	/**
	 * The Progress Control component contains the seek bar, load progress,
	 * and play progress
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class ProgressControl
	 */

	var ProgressControl = (function (_Component) {
	  _inherits(ProgressControl, _Component);

	  function ProgressControl() {
	    _classCallCheck(this, ProgressControl);

	    _Component.apply(this, arguments);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  ProgressControl.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-progress-control vjs-control'
	    });
	  };

	  return ProgressControl;
	})(_componentJs2['default']);

	ProgressControl.prototype.options_ = {
	  children: ['seekBar']
	};

	_componentJs2['default'].registerComponent('ProgressControl', ProgressControl);
	exports['default'] = ProgressControl;
	module.exports = exports['default'];

	},{"../../component.js":67,"./mouse-time-display.js":78,"./seek-bar.js":81}],81:[function(_dereq_,module,exports){
	/**
	 * @file seek-bar.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _sliderSliderJs = _dereq_('../../slider/slider.js');

	var _sliderSliderJs2 = _interopRequireDefault(_sliderSliderJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _loadProgressBarJs = _dereq_('./load-progress-bar.js');

	var _loadProgressBarJs2 = _interopRequireDefault(_loadProgressBarJs);

	var _playProgressBarJs = _dereq_('./play-progress-bar.js');

	var _playProgressBarJs2 = _interopRequireDefault(_playProgressBarJs);

	var _tooltipProgressBarJs = _dereq_('./tooltip-progress-bar.js');

	var _tooltipProgressBarJs2 = _interopRequireDefault(_tooltipProgressBarJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

	var _objectAssign = _dereq_('object.assign');

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	/**
	 * Seek Bar and holder for the progress bars
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Slider
	 * @class SeekBar
	 */

	var SeekBar = (function (_Slider) {
	  _inherits(SeekBar, _Slider);

	  function SeekBar(player, options) {
	    _classCallCheck(this, SeekBar);

	    _Slider.call(this, player, options);
	    this.on(player, 'timeupdate', this.updateProgress);
	    this.on(player, 'ended', this.updateProgress);
	    player.ready(Fn.bind(this, this.updateProgress));

	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }

	    if (this.keepTooltipsInside) {
	      this.tooltipProgressBar = this.addChild('TooltipProgressBar');
	    }
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  SeekBar.prototype.createEl = function createEl() {
	    return _Slider.prototype.createEl.call(this, 'div', {
	      className: 'vjs-progress-holder'
	    }, {
	      'aria-label': 'progress bar'
	    });
	  };

	  /**
	   * Update ARIA accessibility attributes
	   *
	   * @method updateARIAAttributes
	   */

	  SeekBar.prototype.updateProgress = function updateProgress() {
	    this.updateAriaAttributes(this.el_);

	    if (this.keepTooltipsInside) {
	      this.updateAriaAttributes(this.tooltipProgressBar.el_);
	      this.tooltipProgressBar.el_.style.width = this.bar.el_.style.width;

	      var playerWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.player().el()).width);
	      var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltipProgressBar.tooltip).width);
	      var tooltipStyle = this.tooltipProgressBar.el().style;
	      tooltipStyle.maxWidth = Math.floor(playerWidth - tooltipWidth / 2) + 'px';
	      tooltipStyle.minWidth = Math.ceil(tooltipWidth / 2) + 'px';
	      tooltipStyle.right = '-' + tooltipWidth / 2 + 'px';
	    }
	  };

	  SeekBar.prototype.updateAriaAttributes = function updateAriaAttributes(el) {
	    // Allows for smooth scrubbing, when player can't keep up.
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    el.setAttribute('aria-valuenow', (this.getPercent() * 100).toFixed(2)); // machine readable value of progress bar (percentage complete)
	    el.setAttribute('aria-valuetext', _utilsFormatTimeJs2['default'](time, this.player_.duration())); // human readable value of progress bar (time complete)
	  };

	  /**
	   * Get percentage of video played
	   *
	   * @return {Number} Percentage played
	   * @method getPercent
	   */

	  SeekBar.prototype.getPercent = function getPercent() {
	    var percent = this.player_.currentTime() / this.player_.duration();
	    return percent >= 1 ? 1 : percent;
	  };

	  /**
	   * Handle mouse down on seek bar
	   *
	   * @method handleMouseDown
	   */

	  SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
	    _Slider.prototype.handleMouseDown.call(this, event);

	    this.player_.scrubbing(true);

	    this.videoWasPlaying = !this.player_.paused();
	    this.player_.pause();
	  };

	  /**
	   * Handle mouse move on seek bar
	   *
	   * @method handleMouseMove
	   */

	  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
	    var newTime = this.calculateDistance(event) * this.player_.duration();

	    // Don't let video end while scrubbing.
	    if (newTime === this.player_.duration()) {
	      newTime = newTime - 0.1;
	    }

	    // Set new time (tell player to seek to new time)
	    this.player_.currentTime(newTime);
	  };

	  /**
	   * Handle mouse up on seek bar
	   *
	   * @method handleMouseUp
	   */

	  SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
	    _Slider.prototype.handleMouseUp.call(this, event);

	    this.player_.scrubbing(false);
	    if (this.videoWasPlaying) {
	      this.player_.play();
	    }
	  };

	  /**
	   * Move more quickly fast forward for keyboard-only users
	   *
	   * @method stepForward
	   */

	  SeekBar.prototype.stepForward = function stepForward() {
	    this.player_.currentTime(this.player_.currentTime() + 5); // more quickly fast forward for keyboard-only users
	  };

	  /**
	   * Move more quickly rewind for keyboard-only users
	   *
	   * @method stepBack
	   */

	  SeekBar.prototype.stepBack = function stepBack() {
	    this.player_.currentTime(this.player_.currentTime() - 5); // more quickly rewind for keyboard-only users
	  };

	  return SeekBar;
	})(_sliderSliderJs2['default']);

	SeekBar.prototype.options_ = {
	  children: ['loadProgressBar', 'mouseTimeDisplay', 'playProgressBar'],
	  'barName': 'playProgressBar'
	};

	SeekBar.prototype.playerEvent = 'timeupdate';

	_componentJs2['default'].registerComponent('SeekBar', SeekBar);
	exports['default'] = SeekBar;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../slider/slider.js":119,"../../utils/fn.js":144,"../../utils/format-time.js":145,"./load-progress-bar.js":77,"./play-progress-bar.js":79,"./tooltip-progress-bar.js":82,"global/window":2,"object.assign":45}],82:[function(_dereq_,module,exports){
	/**
	 * @file play-progress-bar.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsDomJs = _dereq_('../../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

	/**
	 * Shows play progress
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class PlayProgressBar
	 */

	var TooltipProgressBar = (function (_Component) {
	  _inherits(TooltipProgressBar, _Component);

	  function TooltipProgressBar(player, options) {
	    _classCallCheck(this, TooltipProgressBar);

	    _Component.call(this, player, options);
	    this.updateDataAttr();
	    this.on(player, 'timeupdate', this.updateDataAttr);
	    player.ready(Fn.bind(this, this.updateDataAttr));
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  TooltipProgressBar.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-tooltip-progress-bar vjs-slider-bar',
	      innerHTML: '<div class="vjs-time-tooltip"></div>\n        <span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
	    });

	    this.tooltip = el.querySelector('.vjs-time-tooltip');

	    return el;
	  };

	  TooltipProgressBar.prototype.updateDataAttr = function updateDataAttr() {
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    var formattedTime = _utilsFormatTimeJs2['default'](time, this.player_.duration());
	    this.el_.setAttribute('data-current-time', formattedTime);
	    this.tooltip.innerHTML = formattedTime;
	  };

	  return TooltipProgressBar;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('TooltipProgressBar', TooltipProgressBar);
	exports['default'] = TooltipProgressBar;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145}],83:[function(_dereq_,module,exports){
	/**
	 * @file custom-control-spacer.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _spacerJs = _dereq_('./spacer.js');

	var _spacerJs2 = _interopRequireDefault(_spacerJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
	 *
	 * @extends Spacer
	 * @class CustomControlSpacer
	 */

	var CustomControlSpacer = (function (_Spacer) {
	  _inherits(CustomControlSpacer, _Spacer);

	  function CustomControlSpacer() {
	    _classCallCheck(this, CustomControlSpacer);

	    _Spacer.apply(this, arguments);
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  CustomControlSpacer.prototype.createEl = function createEl() {
	    var el = _Spacer.prototype.createEl.call(this, {
	      className: this.buildCSSClass()
	    });

	    // No-flex/table-cell mode requires there be some content
	    // in the cell to fill the remaining space of the table.
	    el.innerHTML = '&nbsp;';
	    return el;
	  };

	  return CustomControlSpacer;
	})(_spacerJs2['default']);

	_componentJs2['default'].registerComponent('CustomControlSpacer', CustomControlSpacer);
	exports['default'] = CustomControlSpacer;
	module.exports = exports['default'];

	},{"../../component.js":67,"./spacer.js":84}],84:[function(_dereq_,module,exports){
	/**
	 * @file spacer.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * Just an empty spacer element that can be used as an append point for plugins, etc.
	 * Also can be used to create space between elements when necessary.
	 *
	 * @extends Component
	 * @class Spacer
	 */

	var Spacer = (function (_Component) {
	  _inherits(Spacer, _Component);

	  function Spacer() {
	    _classCallCheck(this, Spacer);

	    _Component.apply(this, arguments);
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  Spacer.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  Spacer.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };

	  return Spacer;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('Spacer', Spacer);

	exports['default'] = Spacer;
	module.exports = exports['default'];

	},{"../../component.js":67}],85:[function(_dereq_,module,exports){
	/**
	 * @file caption-settings-menu-item.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

	var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * The menu item for caption track settings menu
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends TextTrackMenuItem
	 * @class CaptionSettingsMenuItem
	 */

	var CaptionSettingsMenuItem = (function (_TextTrackMenuItem) {
	  _inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

	  function CaptionSettingsMenuItem(player, options) {
	    _classCallCheck(this, CaptionSettingsMenuItem);

	    options['track'] = {
	      'kind': options['kind'],
	      'player': player,
	      'label': options['kind'] + ' settings',
	      'selectable': false,
	      'default': false,
	      mode: 'disabled'
	    };

	    // CaptionSettingsMenuItem has no concept of 'selected'
	    options['selectable'] = false;

	    _TextTrackMenuItem.call(this, player, options);
	    this.addClass('vjs-texttrack-settings');
	    this.controlText(', opens ' + options['kind'] + ' settings dialog');
	  }

	  /**
	   * Handle click on menu item
	   *
	   * @method handleClick
	   */

	  CaptionSettingsMenuItem.prototype.handleClick = function handleClick() {
	    this.player().getChild('textTrackSettings').show();
	    this.player().getChild('textTrackSettings').el_.focus();
	  };

	  return CaptionSettingsMenuItem;
	})(_textTrackMenuItemJs2['default']);

	_componentJs2['default'].registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);
	exports['default'] = CaptionSettingsMenuItem;
	module.exports = exports['default'];

	},{"../../component.js":67,"./text-track-menu-item.js":93}],86:[function(_dereq_,module,exports){
	/**
	 * @file captions-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _textTrackButtonJs = _dereq_('./text-track-button.js');

	var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _captionSettingsMenuItemJs = _dereq_('./caption-settings-menu-item.js');

	var _captionSettingsMenuItemJs2 = _interopRequireDefault(_captionSettingsMenuItemJs);

	/**
	 * The button component for toggling and selecting captions
	 *
	 * @param {Object} player  Player object
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends TextTrackButton
	 * @class CaptionsButton
	 */

	var CaptionsButton = (function (_TextTrackButton) {
	  _inherits(CaptionsButton, _TextTrackButton);

	  function CaptionsButton(player, options, ready) {
	    _classCallCheck(this, CaptionsButton);

	    _TextTrackButton.call(this, player, options, ready);
	    this.el_.setAttribute('aria-label', 'Captions Menu');
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Update caption menu items
	   *
	   * @method update
	   */

	  CaptionsButton.prototype.update = function update() {
	    var threshold = 2;
	    _TextTrackButton.prototype.update.call(this);

	    // if native, then threshold is 1 because no settings button
	    if (this.player().tech_ && this.player().tech_['featuresNativeTextTracks']) {
	      threshold = 1;
	    }

	    if (this.items && this.items.length > threshold) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };

	  /**
	   * Create caption menu items
	   *
	   * @return {Array} Array of menu items
	   * @method createItems
	   */

	  CaptionsButton.prototype.createItems = function createItems() {
	    var items = [];

	    if (!(this.player().tech_ && this.player().tech_['featuresNativeTextTracks'])) {
	      items.push(new _captionSettingsMenuItemJs2['default'](this.player_, { 'kind': this.kind_ }));
	    }

	    return _TextTrackButton.prototype.createItems.call(this, items);
	  };

	  return CaptionsButton;
	})(_textTrackButtonJs2['default']);

	CaptionsButton.prototype.kind_ = 'captions';
	CaptionsButton.prototype.controlText_ = 'Captions';

	_componentJs2['default'].registerComponent('CaptionsButton', CaptionsButton);
	exports['default'] = CaptionsButton;
	module.exports = exports['default'];

	},{"../../component.js":67,"./caption-settings-menu-item.js":85,"./text-track-button.js":92}],87:[function(_dereq_,module,exports){
	/**
	 * @file chapters-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _textTrackButtonJs = _dereq_('./text-track-button.js');

	var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

	var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

	var _chaptersTrackMenuItemJs = _dereq_('./chapters-track-menu-item.js');

	var _chaptersTrackMenuItemJs2 = _interopRequireDefault(_chaptersTrackMenuItemJs);

	var _menuMenuJs = _dereq_('../../menu/menu.js');

	var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

	var _utilsDomJs = _dereq_('../../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsToTitleCaseJs = _dereq_('../../utils/to-title-case.js');

	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	/**
	 * The button component for toggling and selecting chapters
	 * Chapters act much differently than other text tracks
	 * Cues are navigation vs. other tracks of alternative languages
	 *
	 * @param {Object} player  Player object
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends TextTrackButton
	 * @class ChaptersButton
	 */

	var ChaptersButton = (function (_TextTrackButton) {
	  _inherits(ChaptersButton, _TextTrackButton);

	  function ChaptersButton(player, options, ready) {
	    _classCallCheck(this, ChaptersButton);

	    _TextTrackButton.call(this, player, options, ready);
	    this.el_.setAttribute('aria-label', 'Chapters Menu');
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create a menu item for each text track
	   *
	   * @return {Array} Array of menu items
	   * @method createItems
	   */

	  ChaptersButton.prototype.createItems = function createItems() {
	    var items = [];

	    var tracks = this.player_.textTracks();

	    if (!tracks) {
	      return items;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];
	      if (track['kind'] === this.kind_) {
	        items.push(new _textTrackMenuItemJs2['default'](this.player_, {
	          'track': track
	        }));
	      }
	    }

	    return items;
	  };

	  /**
	   * Create menu from chapter buttons
	   *
	   * @return {Menu} Menu of chapter buttons
	   * @method createMenu
	   */

	  ChaptersButton.prototype.createMenu = function createMenu() {
	    var _this = this;

	    var tracks = this.player_.textTracks() || [];
	    var chaptersTrack = undefined;
	    var items = this.items || [];

	    for (var i = tracks.length - 1; i >= 0; i--) {

	      // We will always choose the last track as our chaptersTrack
	      var track = tracks[i];

	      if (track['kind'] === this.kind_) {
	        chaptersTrack = track;

	        break;
	      }
	    }

	    var menu = this.menu;
	    if (menu === undefined) {
	      menu = new _menuMenuJs2['default'](this.player_);
	      var title = Dom.createEl('li', {
	        className: 'vjs-menu-title',
	        innerHTML: _utilsToTitleCaseJs2['default'](this.kind_),
	        tabIndex: -1
	      });
	      menu.children_.unshift(title);
	      Dom.insertElFirst(title, menu.contentEl());
	    } else {
	      // We will empty out the menu children each time because we want a
	      // fresh new menu child list each time
	      items.forEach(function (item) {
	        return menu.removeChild(item);
	      });
	      // Empty out the ChaptersButton menu items because we no longer need them
	      items = [];
	    }

	    if (chaptersTrack && chaptersTrack.cues == null) {
	      chaptersTrack['mode'] = 'hidden';

	      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(chaptersTrack);

	      if (remoteTextTrackEl) {
	        remoteTextTrackEl.addEventListener('load', function (event) {
	          return _this.update();
	        });
	      }
	    }

	    if (chaptersTrack && chaptersTrack.cues && chaptersTrack.cues.length > 0) {
	      var cues = chaptersTrack['cues'],
	          cue = undefined;

	      for (var i = 0, l = cues.length; i < l; i++) {
	        cue = cues[i];

	        var mi = new _chaptersTrackMenuItemJs2['default'](this.player_, {
	          'track': chaptersTrack,
	          'cue': cue
	        });

	        items.push(mi);

	        menu.addChild(mi);
	      }
	    }

	    if (items.length > 0) {
	      this.show();
	    }
	    // Assigning the value of items back to this.items for next iteration
	    this.items = items;
	    return menu;
	  };

	  return ChaptersButton;
	})(_textTrackButtonJs2['default']);

	ChaptersButton.prototype.kind_ = 'chapters';
	ChaptersButton.prototype.controlText_ = 'Chapters';

	_componentJs2['default'].registerComponent('ChaptersButton', ChaptersButton);
	exports['default'] = ChaptersButton;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../menu/menu.js":111,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/to-title-case.js":151,"./chapters-track-menu-item.js":88,"./text-track-button.js":92,"./text-track-menu-item.js":93,"global/window":2}],88:[function(_dereq_,module,exports){
	/**
	 * @file chapters-track-menu-item.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

	var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	/**
	 * The chapter track menu item
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuItem
	 * @class ChaptersTrackMenuItem
	 */

	var ChaptersTrackMenuItem = (function (_MenuItem) {
	  _inherits(ChaptersTrackMenuItem, _MenuItem);

	  function ChaptersTrackMenuItem(player, options) {
	    _classCallCheck(this, ChaptersTrackMenuItem);

	    var track = options['track'];
	    var cue = options['cue'];
	    var currentTime = player.currentTime();

	    // Modify options for parent MenuItem class's init.
	    options['label'] = cue.text;
	    options['selected'] = cue['startTime'] <= currentTime && currentTime < cue['endTime'];
	    _MenuItem.call(this, player, options);

	    this.track = track;
	    this.cue = cue;
	    track.addEventListener('cuechange', Fn.bind(this, this.update));
	  }

	  /**
	   * Handle click on menu item
	   *
	   * @method handleClick
	   */

	  ChaptersTrackMenuItem.prototype.handleClick = function handleClick() {
	    _MenuItem.prototype.handleClick.call(this);
	    this.player_.currentTime(this.cue.startTime);
	    this.update(this.cue.startTime);
	  };

	  /**
	   * Update chapter menu item
	   *
	   * @method update
	   */

	  ChaptersTrackMenuItem.prototype.update = function update() {
	    var cue = this.cue;
	    var currentTime = this.player_.currentTime();

	    // vjs.log(currentTime, cue.startTime);
	    this.selected(cue['startTime'] <= currentTime && currentTime < cue['endTime']);
	  };

	  return ChaptersTrackMenuItem;
	})(_menuMenuItemJs2['default']);

	_componentJs2['default'].registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);
	exports['default'] = ChaptersTrackMenuItem;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144}],89:[function(_dereq_,module,exports){
	/**
	 * @file descriptions-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _textTrackButtonJs = _dereq_('./text-track-button.js');

	var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	/**
	 * The button component for toggling and selecting descriptions
	 *
	 * @param {Object} player  Player object
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends TextTrackButton
	 * @class DescriptionsButton
	 */

	var DescriptionsButton = (function (_TextTrackButton) {
	  _inherits(DescriptionsButton, _TextTrackButton);

	  function DescriptionsButton(player, options, ready) {
	    var _this = this;

	    _classCallCheck(this, DescriptionsButton);

	    _TextTrackButton.call(this, player, options, ready);
	    this.el_.setAttribute('aria-label', 'Descriptions Menu');

	    var tracks = player.textTracks();

	    if (tracks) {
	      (function () {
	        var changeHandler = Fn.bind(_this, _this.handleTracksChange);

	        tracks.addEventListener('change', changeHandler);
	        _this.on('dispose', function () {
	          tracks.removeEventListener('change', changeHandler);
	        });
	      })();
	    }
	  }

	  /**
	   * Handle text track change
	   *
	   * @method handleTracksChange
	   */

	  DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
	    var tracks = this.player().textTracks();
	    var disabled = false;

	    // Check whether a track of a different kind is showing
	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];
	      if (track['kind'] !== this.kind_ && track['mode'] === 'showing') {
	        disabled = true;
	        break;
	      }
	    }

	    // If another track is showing, disable this menu button
	    if (disabled) {
	      this.disable();
	    } else {
	      this.enable();
	    }
	  };

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  return DescriptionsButton;
	})(_textTrackButtonJs2['default']);

	DescriptionsButton.prototype.kind_ = 'descriptions';
	DescriptionsButton.prototype.controlText_ = 'Descriptions';

	_componentJs2['default'].registerComponent('DescriptionsButton', DescriptionsButton);
	exports['default'] = DescriptionsButton;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../utils/fn.js":144,"./text-track-button.js":92}],90:[function(_dereq_,module,exports){
	/**
	 * @file off-text-track-menu-item.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

	var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * A special menu item for turning of a specific type of text track
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends TextTrackMenuItem
	 * @class OffTextTrackMenuItem
	 */

	var OffTextTrackMenuItem = (function (_TextTrackMenuItem) {
	  _inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

	  function OffTextTrackMenuItem(player, options) {
	    _classCallCheck(this, OffTextTrackMenuItem);

	    // Create pseudo track info
	    // Requires options['kind']
	    options['track'] = {
	      'kind': options['kind'],
	      'player': player,
	      'label': options['kind'] + ' off',
	      'default': false,
	      'mode': 'disabled'
	    };

	    // MenuItem is selectable
	    options['selectable'] = true;

	    _TextTrackMenuItem.call(this, player, options);
	    this.selected(true);
	  }

	  /**
	   * Handle text track change
	   *
	   * @param {Object} event Event object
	   * @method handleTracksChange
	   */

	  OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    var tracks = this.player().textTracks();
	    var selected = true;

	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];
	      if (track['kind'] === this.track['kind'] && track['mode'] === 'showing') {
	        selected = false;
	        break;
	      }
	    }

	    this.selected(selected);
	  };

	  return OffTextTrackMenuItem;
	})(_textTrackMenuItemJs2['default']);

	_componentJs2['default'].registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);
	exports['default'] = OffTextTrackMenuItem;
	module.exports = exports['default'];

	},{"../../component.js":67,"./text-track-menu-item.js":93}],91:[function(_dereq_,module,exports){
	/**
	 * @file subtitles-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _textTrackButtonJs = _dereq_('./text-track-button.js');

	var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * The button component for toggling and selecting subtitles
	 *
	 * @param {Object} player  Player object
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends TextTrackButton
	 * @class SubtitlesButton
	 */

	var SubtitlesButton = (function (_TextTrackButton) {
	  _inherits(SubtitlesButton, _TextTrackButton);

	  function SubtitlesButton(player, options, ready) {
	    _classCallCheck(this, SubtitlesButton);

	    _TextTrackButton.call(this, player, options, ready);
	    this.el_.setAttribute('aria-label', 'Subtitles Menu');
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  return SubtitlesButton;
	})(_textTrackButtonJs2['default']);

	SubtitlesButton.prototype.kind_ = 'subtitles';
	SubtitlesButton.prototype.controlText_ = 'Subtitles';

	_componentJs2['default'].registerComponent('SubtitlesButton', SubtitlesButton);
	exports['default'] = SubtitlesButton;
	module.exports = exports['default'];

	},{"../../component.js":67,"./text-track-button.js":92}],92:[function(_dereq_,module,exports){
	/**
	 * @file text-track-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _trackButtonJs = _dereq_('../track-button.js');

	var _trackButtonJs2 = _interopRequireDefault(_trackButtonJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

	var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

	var _offTextTrackMenuItemJs = _dereq_('./off-text-track-menu-item.js');

	var _offTextTrackMenuItemJs2 = _interopRequireDefault(_offTextTrackMenuItemJs);

	/**
	 * The base class for buttons that toggle specific text track types (e.g. subtitles)
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuButton
	 * @class TextTrackButton
	 */

	var TextTrackButton = (function (_TrackButton) {
	  _inherits(TextTrackButton, _TrackButton);

	  function TextTrackButton(player) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, TextTrackButton);

	    options.tracks = player.textTracks();

	    _TrackButton.call(this, player, options);
	  }

	  /**
	   * Create a menu item for each text track
	   *
	   * @return {Array} Array of menu items
	   * @method createItems
	   */

	  TextTrackButton.prototype.createItems = function createItems() {
	    var items = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	    // Add an OFF menu item to turn all tracks off
	    items.push(new _offTextTrackMenuItemJs2['default'](this.player_, { 'kind': this.kind_ }));

	    var tracks = this.player_.textTracks();

	    if (!tracks) {
	      return items;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      // only add tracks that are of the appropriate kind and have a label
	      if (track['kind'] === this.kind_) {
	        items.push(new _textTrackMenuItemJs2['default'](this.player_, {
	          // MenuItem is selectable
	          'selectable': true,
	          'track': track
	        }));
	      }
	    }

	    return items;
	  };

	  return TextTrackButton;
	})(_trackButtonJs2['default']);

	_componentJs2['default'].registerComponent('TextTrackButton', TextTrackButton);
	exports['default'] = TextTrackButton;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../utils/fn.js":144,"../track-button.js":98,"./off-text-track-menu-item.js":90,"./text-track-menu-item.js":93}],93:[function(_dereq_,module,exports){
	/**
	 * @file text-track-menu-item.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

	var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	/**
	 * The specific menu item type for selecting a language within a text track kind
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuItem
	 * @class TextTrackMenuItem
	 */

	var TextTrackMenuItem = (function (_MenuItem) {
	  _inherits(TextTrackMenuItem, _MenuItem);

	  function TextTrackMenuItem(player, options) {
	    var _this = this;

	    _classCallCheck(this, TextTrackMenuItem);

	    var track = options['track'];
	    var tracks = player.textTracks();

	    // Modify options for parent MenuItem class's init.
	    options['label'] = track['label'] || track['language'] || 'Unknown';
	    options['selected'] = track['default'] || track['mode'] === 'showing';

	    _MenuItem.call(this, player, options);

	    this.track = track;

	    if (tracks) {
	      (function () {
	        var changeHandler = Fn.bind(_this, _this.handleTracksChange);

	        tracks.addEventListener('change', changeHandler);
	        _this.on('dispose', function () {
	          tracks.removeEventListener('change', changeHandler);
	        });
	      })();
	    }

	    // iOS7 doesn't dispatch change events to TextTrackLists when an
	    // associated track's mode changes. Without something like
	    // Object.observe() (also not present on iOS7), it's not
	    // possible to detect changes to the mode attribute and polyfill
	    // the change event. As a poor substitute, we manually dispatch
	    // change events whenever the controls modify the mode.
	    if (tracks && tracks.onchange === undefined) {
	      (function () {
	        var event = undefined;

	        _this.on(['tap', 'click'], function () {
	          if (typeof _globalWindow2['default'].Event !== 'object') {
	            // Android 2.3 throws an Illegal Constructor error for window.Event
	            try {
	              event = new _globalWindow2['default'].Event('change');
	            } catch (err) {}
	          }

	          if (!event) {
	            event = _globalDocument2['default'].createEvent('Event');
	            event.initEvent('change', true, true);
	          }

	          tracks.dispatchEvent(event);
	        });
	      })();
	    }
	  }

	  /**
	   * Handle click on text track
	   *
	   * @method handleClick
	   */

	  TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    var kind = this.track['kind'];
	    var tracks = this.player_.textTracks();

	    _MenuItem.prototype.handleClick.call(this, event);

	    if (!tracks) return;

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      if (track['kind'] !== kind) {
	        continue;
	      }

	      if (track === this.track) {
	        track['mode'] = 'showing';
	      } else {
	        track['mode'] = 'disabled';
	      }
	    }
	  };

	  /**
	   * Handle text track change
	   *
	   * @method handleTracksChange
	   */

	  TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    this.selected(this.track['mode'] === 'showing');
	  };

	  return TextTrackMenuItem;
	})(_menuMenuItemJs2['default']);

	_componentJs2['default'].registerComponent('TextTrackMenuItem', TextTrackMenuItem);
	exports['default'] = TextTrackMenuItem;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144,"global/document":1,"global/window":2}],94:[function(_dereq_,module,exports){
	/**
	 * @file current-time-display.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsDomJs = _dereq_('../../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

	/**
	 * Displays the current time
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class CurrentTimeDisplay
	 */

	var CurrentTimeDisplay = (function (_Component) {
	  _inherits(CurrentTimeDisplay, _Component);

	  function CurrentTimeDisplay(player, options) {
	    _classCallCheck(this, CurrentTimeDisplay);

	    _Component.call(this, player, options);

	    this.on(player, 'timeupdate', this.updateContent);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  CurrentTimeDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-current-time vjs-time-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-current-time-display',
	      // label the current time for screen reader users
	      innerHTML: '<span class="vjs-control-text">Current Time </span>' + '0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Update current time display
	   *
	   * @method updateContent
	   */

	  CurrentTimeDisplay.prototype.updateContent = function updateContent() {
	    // Allows for smooth scrubbing, when player can't keep up.
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    var localizedText = this.localize('Current Time');
	    var formattedTime = _utilsFormatTimeJs2['default'](time, this.player_.duration());
	    if (formattedTime !== this.formattedTime_) {
	      this.formattedTime_ = formattedTime;
	      this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime;
	    }
	  };

	  return CurrentTimeDisplay;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);
	exports['default'] = CurrentTimeDisplay;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],95:[function(_dereq_,module,exports){
	/**
	 * @file duration-display.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsDomJs = _dereq_('../../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

	/**
	 * Displays the duration
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class DurationDisplay
	 */

	var DurationDisplay = (function (_Component) {
	  _inherits(DurationDisplay, _Component);

	  function DurationDisplay(player, options) {
	    _classCallCheck(this, DurationDisplay);

	    _Component.call(this, player, options);

	    this.on(player, 'durationchange', this.updateContent);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  DurationDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-duration vjs-time-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-duration-display',
	      // label the duration time for screen reader users
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Duration Time') + '</span> 0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Update duration time display
	   *
	   * @method updateContent
	   */

	  DurationDisplay.prototype.updateContent = function updateContent() {
	    var duration = this.player_.duration();
	    if (duration && this.duration_ !== duration) {
	      this.duration_ = duration;
	      var localizedText = this.localize('Duration Time');
	      var formattedTime = _utilsFormatTimeJs2['default'](duration);
	      this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime; // label the duration time for screen reader users
	    }
	  };

	  return DurationDisplay;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('DurationDisplay', DurationDisplay);
	exports['default'] = DurationDisplay;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],96:[function(_dereq_,module,exports){
	/**
	 * @file remaining-time-display.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsDomJs = _dereq_('../../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

	/**
	 * Displays the time left in the video
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class RemainingTimeDisplay
	 */

	var RemainingTimeDisplay = (function (_Component) {
	  _inherits(RemainingTimeDisplay, _Component);

	  function RemainingTimeDisplay(player, options) {
	    _classCallCheck(this, RemainingTimeDisplay);

	    _Component.call(this, player, options);

	    this.on(player, 'timeupdate', this.updateContent);
	    this.on(player, 'durationchange', this.updateContent);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  RemainingTimeDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-remaining-time vjs-time-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-remaining-time-display',
	      // label the remaining time for screen reader users
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Remaining Time') + '</span> -0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Update remaining time display
	   *
	   * @method updateContent
	   */

	  RemainingTimeDisplay.prototype.updateContent = function updateContent() {
	    if (this.player_.duration()) {
	      var localizedText = this.localize('Remaining Time');
	      var formattedTime = _utilsFormatTimeJs2['default'](this.player_.remainingTime());
	      if (formattedTime !== this.formattedTime_) {
	        this.formattedTime_ = formattedTime;
	        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> -' + formattedTime;
	      }
	    }

	    // Allows for smooth scrubbing, when player can't keep up.
	    // var time = (this.player_.scrubbing()) ? this.player_.getCache().currentTime : this.player_.currentTime();
	    // this.contentEl_.innerHTML = vjs.formatTime(time, this.player_.duration());
	  };

	  return RemainingTimeDisplay;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);
	exports['default'] = RemainingTimeDisplay;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],97:[function(_dereq_,module,exports){
	/**
	 * @file time-divider.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * The separator between the current time and duration.
	 * Can be hidden if it's not needed in the design.
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class TimeDivider
	 */

	var TimeDivider = (function (_Component) {
	  _inherits(TimeDivider, _Component);

	  function TimeDivider() {
	    _classCallCheck(this, TimeDivider);

	    _Component.apply(this, arguments);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  TimeDivider.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-time-control vjs-time-divider',
	      innerHTML: '<div><span>/</span></div>'
	    });
	  };

	  return TimeDivider;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('TimeDivider', TimeDivider);
	exports['default'] = TimeDivider;
	module.exports = exports['default'];

	},{"../../component.js":67}],98:[function(_dereq_,module,exports){
	/**
	 * @file track-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _menuMenuButtonJs = _dereq_('../menu/menu-button.js');

	var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	/**
	 * The base class for buttons that toggle specific text track types (e.g. subtitles)
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuButton
	 * @class TrackButton
	 */

	var TrackButton = (function (_MenuButton) {
	  _inherits(TrackButton, _MenuButton);

	  function TrackButton(player, options) {
	    _classCallCheck(this, TrackButton);

	    var tracks = options.tracks;

	    _MenuButton.call(this, player, options);

	    if (this.items.length <= 1) {
	      this.hide();
	    }

	    if (!tracks) {
	      return;
	    }

	    var updateHandler = Fn.bind(this, this.update);
	    tracks.addEventListener('removetrack', updateHandler);
	    tracks.addEventListener('addtrack', updateHandler);

	    this.player_.on('dispose', function () {
	      tracks.removeEventListener('removetrack', updateHandler);
	      tracks.removeEventListener('addtrack', updateHandler);
	    });
	  }

	  return TrackButton;
	})(_menuMenuButtonJs2['default']);

	_componentJs2['default'].registerComponent('TrackButton', TrackButton);
	exports['default'] = TrackButton;
	module.exports = exports['default'];

	},{"../component.js":67,"../menu/menu-button.js":109,"../utils/fn.js":144}],99:[function(_dereq_,module,exports){
	/**
	 * @file volume-bar.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _sliderSliderJs = _dereq_('../../slider/slider.js');

	var _sliderSliderJs2 = _interopRequireDefault(_sliderSliderJs);

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('../../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	// Required children

	var _volumeLevelJs = _dereq_('./volume-level.js');

	var _volumeLevelJs2 = _interopRequireDefault(_volumeLevelJs);

	/**
	 * The bar that contains the volume level and can be clicked on to adjust the level
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Slider
	 * @class VolumeBar
	 */

	var VolumeBar = (function (_Slider) {
	  _inherits(VolumeBar, _Slider);

	  function VolumeBar(player, options) {
	    _classCallCheck(this, VolumeBar);

	    _Slider.call(this, player, options);
	    this.on(player, 'volumechange', this.updateARIAAttributes);
	    player.ready(Fn.bind(this, this.updateARIAAttributes));
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  VolumeBar.prototype.createEl = function createEl() {
	    return _Slider.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-bar vjs-slider-bar'
	    }, {
	      'aria-label': 'volume level'
	    });
	  };

	  /**
	   * Handle mouse move on volume bar
	   *
	   * @method handleMouseMove
	   */

	  VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
	    this.checkMuted();
	    this.player_.volume(this.calculateDistance(event));
	  };

	  VolumeBar.prototype.checkMuted = function checkMuted() {
	    if (this.player_.muted()) {
	      this.player_.muted(false);
	    }
	  };

	  /**
	   * Get percent of volume level
	   *
	   * @retun {Number} Volume level percent
	   * @method getPercent
	   */

	  VolumeBar.prototype.getPercent = function getPercent() {
	    if (this.player_.muted()) {
	      return 0;
	    } else {
	      return this.player_.volume();
	    }
	  };

	  /**
	   * Increase volume level for keyboard users
	   *
	   * @method stepForward
	   */

	  VolumeBar.prototype.stepForward = function stepForward() {
	    this.checkMuted();
	    this.player_.volume(this.player_.volume() + 0.1);
	  };

	  /**
	   * Decrease volume level for keyboard users
	   *
	   * @method stepBack
	   */

	  VolumeBar.prototype.stepBack = function stepBack() {
	    this.checkMuted();
	    this.player_.volume(this.player_.volume() - 0.1);
	  };

	  /**
	   * Update ARIA accessibility attributes
	   *
	   * @method updateARIAAttributes
	   */

	  VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes() {
	    // Current value of volume bar as a percentage
	    var volume = (this.player_.volume() * 100).toFixed(2);
	    this.el_.setAttribute('aria-valuenow', volume);
	    this.el_.setAttribute('aria-valuetext', volume + '%');
	  };

	  return VolumeBar;
	})(_sliderSliderJs2['default']);

	VolumeBar.prototype.options_ = {
	  children: ['volumeLevel'],
	  'barName': 'volumeLevel'
	};

	VolumeBar.prototype.playerEvent = 'volumechange';

	_componentJs2['default'].registerComponent('VolumeBar', VolumeBar);
	exports['default'] = VolumeBar;
	module.exports = exports['default'];

	},{"../../component.js":67,"../../slider/slider.js":119,"../../utils/fn.js":144,"./volume-level.js":101}],100:[function(_dereq_,module,exports){
	/**
	 * @file volume-control.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	// Required children

	var _volumeBarJs = _dereq_('./volume-bar.js');

	var _volumeBarJs2 = _interopRequireDefault(_volumeBarJs);

	/**
	 * The component for controlling the volume level
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class VolumeControl
	 */

	var VolumeControl = (function (_Component) {
	  _inherits(VolumeControl, _Component);

	  function VolumeControl(player, options) {
	    _classCallCheck(this, VolumeControl);

	    _Component.call(this, player, options);

	    // hide volume controls when they're not supported by the current tech
	    if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
	      this.addClass('vjs-hidden');
	    }
	    this.on(player, 'loadstart', function () {
	      if (player.tech_['featuresVolumeControl'] === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    });
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  VolumeControl.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-control vjs-control'
	    });
	  };

	  return VolumeControl;
	})(_componentJs2['default']);

	VolumeControl.prototype.options_ = {
	  children: ['volumeBar']
	};

	_componentJs2['default'].registerComponent('VolumeControl', VolumeControl);
	exports['default'] = VolumeControl;
	module.exports = exports['default'];

	},{"../../component.js":67,"./volume-bar.js":99}],101:[function(_dereq_,module,exports){
	/**
	 * @file volume-level.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	/**
	 * Shows volume level
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class VolumeLevel
	 */

	var VolumeLevel = (function (_Component) {
	  _inherits(VolumeLevel, _Component);

	  function VolumeLevel() {
	    _classCallCheck(this, VolumeLevel);

	    _Component.apply(this, arguments);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  VolumeLevel.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-level',
	      innerHTML: '<span class="vjs-control-text"></span>'
	    });
	  };

	  return VolumeLevel;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('VolumeLevel', VolumeLevel);
	exports['default'] = VolumeLevel;
	module.exports = exports['default'];

	},{"../../component.js":67}],102:[function(_dereq_,module,exports){
	/**
	 * @file volume-menu-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _popupPopupJs = _dereq_('../popup/popup.js');

	var _popupPopupJs2 = _interopRequireDefault(_popupPopupJs);

	var _popupPopupButtonJs = _dereq_('../popup/popup-button.js');

	var _popupPopupButtonJs2 = _interopRequireDefault(_popupPopupButtonJs);

	var _muteToggleJs = _dereq_('./mute-toggle.js');

	var _muteToggleJs2 = _interopRequireDefault(_muteToggleJs);

	var _volumeControlVolumeBarJs = _dereq_('./volume-control/volume-bar.js');

	var _volumeControlVolumeBarJs2 = _interopRequireDefault(_volumeControlVolumeBarJs);

	/**
	 * Button for volume popup
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends PopupButton
	 * @class VolumeMenuButton
	 */

	var VolumeMenuButton = (function (_PopupButton) {
	  _inherits(VolumeMenuButton, _PopupButton);

	  function VolumeMenuButton(player) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, VolumeMenuButton);

	    // Default to inline
	    if (options.inline === undefined) {
	      options.inline = true;
	    }

	    // If the vertical option isn't passed at all, default to true.
	    if (options.vertical === undefined) {
	      // If an inline volumeMenuButton is used, we should default to using
	      // a horizontal slider for obvious reasons.
	      if (options.inline) {
	        options.vertical = false;
	      } else {
	        options.vertical = true;
	      }
	    }

	    // The vertical option needs to be set on the volumeBar as well,
	    // since that will need to be passed along to the VolumeBar constructor
	    options.volumeBar = options.volumeBar || {};
	    options.volumeBar.vertical = !!options.vertical;

	    _PopupButton.call(this, player, options);

	    // Same listeners as MuteToggle
	    this.on(player, 'volumechange', this.volumeUpdate);
	    this.on(player, 'loadstart', this.volumeUpdate);

	    // hide mute toggle if the current tech doesn't support volume control
	    function updateVisibility() {
	      if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    }

	    updateVisibility.call(this);
	    this.on(player, 'loadstart', updateVisibility);

	    this.on(this.volumeBar, ['slideractive', 'focus'], function () {
	      this.addClass('vjs-slider-active');
	    });

	    this.on(this.volumeBar, ['sliderinactive', 'blur'], function () {
	      this.removeClass('vjs-slider-active');
	    });

	    this.on(this.volumeBar, ['focus'], function () {
	      this.addClass('vjs-lock-showing');
	    });

	    this.on(this.volumeBar, ['blur'], function () {
	      this.removeClass('vjs-lock-showing');
	    });
	  }

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  VolumeMenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    var orientationClass = '';
	    if (!!this.options_.vertical) {
	      orientationClass = 'vjs-volume-menu-button-vertical';
	    } else {
	      orientationClass = 'vjs-volume-menu-button-horizontal';
	    }

	    return 'vjs-volume-menu-button ' + _PopupButton.prototype.buildCSSClass.call(this) + ' ' + orientationClass;
	  };

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {Popup} The volume popup button
	   * @method createPopup
	   */

	  VolumeMenuButton.prototype.createPopup = function createPopup() {
	    var popup = new _popupPopupJs2['default'](this.player_, {
	      contentElType: 'div'
	    });

	    var vb = new _volumeControlVolumeBarJs2['default'](this.player_, this.options_.volumeBar);

	    popup.addChild(vb);

	    this.menuContent = popup;
	    this.volumeBar = vb;

	    this.attachVolumeBarEvents();

	    return popup;
	  };

	  /**
	   * Handle click on volume popup and calls super
	   *
	   * @method handleClick
	   */

	  VolumeMenuButton.prototype.handleClick = function handleClick() {
	    _muteToggleJs2['default'].prototype.handleClick.call(this);
	    _PopupButton.prototype.handleClick.call(this);
	  };

	  VolumeMenuButton.prototype.attachVolumeBarEvents = function attachVolumeBarEvents() {
	    this.menuContent.on(['mousedown', 'touchdown'], Fn.bind(this, this.handleMouseDown));
	  };

	  VolumeMenuButton.prototype.handleMouseDown = function handleMouseDown(event) {
	    this.on(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
	    this.on(this.el_.ownerDocument, ['mouseup', 'touchend'], this.handleMouseUp);
	  };

	  VolumeMenuButton.prototype.handleMouseUp = function handleMouseUp(event) {
	    this.off(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
	  };

	  return VolumeMenuButton;
	})(_popupPopupButtonJs2['default']);

	VolumeMenuButton.prototype.volumeUpdate = _muteToggleJs2['default'].prototype.update;
	VolumeMenuButton.prototype.controlText_ = 'Mute';

	_componentJs2['default'].registerComponent('VolumeMenuButton', VolumeMenuButton);
	exports['default'] = VolumeMenuButton;
	module.exports = exports['default'];

	},{"../component.js":67,"../popup/popup-button.js":115,"../popup/popup.js":116,"../utils/fn.js":144,"./mute-toggle.js":73,"./volume-control/volume-bar.js":99}],103:[function(_dereq_,module,exports){
	/**
	 * @file error-display.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _component = _dereq_('./component');

	var _component2 = _interopRequireDefault(_component);

	var _modalDialog = _dereq_('./modal-dialog');

	var _modalDialog2 = _interopRequireDefault(_modalDialog);

	var _utilsDom = _dereq_('./utils/dom');

	var Dom = _interopRequireWildcard(_utilsDom);

	var _utilsMergeOptions = _dereq_('./utils/merge-options');

	var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);

	/**
	 * Display that an error has occurred making the video unplayable.
	 *
	 * @extends ModalDialog
	 * @class ErrorDisplay
	 */

	var ErrorDisplay = (function (_ModalDialog) {
	  _inherits(ErrorDisplay, _ModalDialog);

	  /**
	   * Constructor for error display modal.
	   *
	   * @param  {Player} player
	   * @param  {Object} [options]
	   */

	  function ErrorDisplay(player, options) {
	    _classCallCheck(this, ErrorDisplay);

	    _ModalDialog.call(this, player, options);
	    this.on(player, 'error', this.open);
	  }

	  /**
	   * Include the old class for backward-compatibility.
	   *
	   * This can be removed in 6.0.
	   *
	   * @method buildCSSClass
	   * @deprecated
	   * @return {String}
	   */

	  ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Generates the modal content based on the player error.
	   *
	   * @return {String|Null}
	   */

	  ErrorDisplay.prototype.content = function content() {
	    var error = this.player().error();
	    return error ? this.localize(error.message) : '';
	  };

	  return ErrorDisplay;
	})(_modalDialog2['default']);

	ErrorDisplay.prototype.options_ = _utilsMergeOptions2['default'](_modalDialog2['default'].prototype.options_, {
	  fillAlways: true,
	  temporary: false,
	  uncloseable: true
	});

	_component2['default'].registerComponent('ErrorDisplay', ErrorDisplay);
	exports['default'] = ErrorDisplay;
	module.exports = exports['default'];

	},{"./component":67,"./modal-dialog":112,"./utils/dom":142,"./utils/merge-options":148}],104:[function(_dereq_,module,exports){
	/**
	 * @file event-target.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _utilsEventsJs = _dereq_('./utils/events.js');

	var Events = _interopRequireWildcard(_utilsEventsJs);

	var EventTarget = function EventTarget() {};

	EventTarget.prototype.allowedEvents_ = {};

	EventTarget.prototype.on = function (type, fn) {
	  // Remove the addEventListener alias before calling Events.on
	  // so we don't get into an infinite type loop
	  var ael = this.addEventListener;
	  this.addEventListener = function () {};
	  Events.on(this, type, fn);
	  this.addEventListener = ael;
	};
	EventTarget.prototype.addEventListener = EventTarget.prototype.on;

	EventTarget.prototype.off = function (type, fn) {
	  Events.off(this, type, fn);
	};
	EventTarget.prototype.removeEventListener = EventTarget.prototype.off;

	EventTarget.prototype.one = function (type, fn) {
	  // Remove the addEventListener alias before calling Events.on
	  // so we don't get into an infinite type loop
	  var ael = this.addEventListener;
	  this.addEventListener = function () {};
	  Events.one(this, type, fn);
	  this.addEventListener = ael;
	};

	EventTarget.prototype.trigger = function (event) {
	  var type = event.type || event;

	  if (typeof event === 'string') {
	    event = {
	      type: type
	    };
	  }
	  event = Events.fixEvent(event);

	  if (this.allowedEvents_[type] && this['on' + type]) {
	    this['on' + type](event);
	  }

	  Events.trigger(this, event);
	};
	// The standard DOM EventTarget.dispatchEvent() is aliased to trigger()
	EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;

	exports['default'] = EventTarget;
	module.exports = exports['default'];

	},{"./utils/events.js":143}],105:[function(_dereq_,module,exports){
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utilsLog = _dereq_('./utils/log');

	var _utilsLog2 = _interopRequireDefault(_utilsLog);

	/*
	 * @file extend.js
	 *
	 * A combination of node inherits and babel's inherits (after transpile).
	 * Both work the same but node adds `super_` to the subClass
	 * and Bable adds the superClass as __proto__. Both seem useful.
	 */
	var _inherits = function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });

	  if (superClass) {
	    // node
	    subClass.super_ = superClass;
	  }
	};

	/*
	 * Function for subclassing using the same inheritance that
	 * videojs uses internally
	 * ```js
	 * var Button = videojs.getComponent('Button');
	 * ```
	 * ```js
	 * var MyButton = videojs.extend(Button, {
	 *   constructor: function(player, options) {
	 *     Button.call(this, player, options);
	 *   },
	 *   onClick: function() {
	 *     // doSomething
	 *   }
	 * });
	 * ```
	 */
	var extendFn = function extendFn(superClass) {
	  var subClassMethods = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  var subClass = function subClass() {
	    superClass.apply(this, arguments);
	  };
	  var methods = {};

	  if (typeof subClassMethods === 'object') {
	    if (typeof subClassMethods.init === 'function') {
	      _utilsLog2['default'].warn('Constructor logic via init() is deprecated; please use constructor() instead.');
	      subClassMethods.constructor = subClassMethods.init;
	    }
	    if (subClassMethods.constructor !== Object.prototype.constructor) {
	      subClass = subClassMethods.constructor;
	    }
	    methods = subClassMethods;
	  } else if (typeof subClassMethods === 'function') {
	    subClass = subClassMethods;
	  }

	  _inherits(subClass, superClass);

	  // Extend subObj's prototype with functions and other properties from props
	  for (var name in methods) {
	    if (methods.hasOwnProperty(name)) {
	      subClass.prototype[name] = methods[name];
	    }
	  }

	  return subClass;
	};

	exports['default'] = extendFn;
	module.exports = exports['default'];

	},{"./utils/log":147}],106:[function(_dereq_,module,exports){
	/**
	 * @file fullscreen-api.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	/*
	 * Store the browser-specific methods for the fullscreen API
	 * @type {Object|undefined}
	 * @private
	 */
	var FullscreenApi = {};

	// browser API methods
	// map approach from Screenful.js - https://github.com/sindresorhus/screenfull.js
	var apiMap = [
	// Spec: https://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html
	['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
	// WebKit
	['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	// Old WebKit (Safari 5.1)
	['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	// Mozilla
	['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
	// Microsoft
	['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

	var specApi = apiMap[0];
	var browserApi = undefined;

	// determine the supported set of functions
	for (var i = 0; i < apiMap.length; i++) {
	  // check for exitFullscreen function
	  if (apiMap[i][1] in _globalDocument2['default']) {
	    browserApi = apiMap[i];
	    break;
	  }
	}

	// map the browser API names to the spec API names
	if (browserApi) {
	  for (var i = 0; i < browserApi.length; i++) {
	    FullscreenApi[specApi[i]] = browserApi[i];
	  }
	}

	exports['default'] = FullscreenApi;
	module.exports = exports['default'];

	},{"global/document":1}],107:[function(_dereq_,module,exports){
	/**
	 * @file loading-spinner.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _component = _dereq_('./component');

	var _component2 = _interopRequireDefault(_component);

	/* Loading Spinner
	================================================================================ */
	/**
	 * Loading spinner for waiting events
	 *
	 * @extends Component
	 * @class LoadingSpinner
	 */

	var LoadingSpinner = (function (_Component) {
	  _inherits(LoadingSpinner, _Component);

	  function LoadingSpinner() {
	    _classCallCheck(this, LoadingSpinner);

	    _Component.apply(this, arguments);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @method createEl
	   */

	  LoadingSpinner.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-loading-spinner',
	      dir: 'ltr'
	    });
	  };

	  return LoadingSpinner;
	})(_component2['default']);

	_component2['default'].registerComponent('LoadingSpinner', LoadingSpinner);
	exports['default'] = LoadingSpinner;
	module.exports = exports['default'];

	},{"./component":67}],108:[function(_dereq_,module,exports){
	/**
	 * @file media-error.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _objectAssign = _dereq_('object.assign');

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	/*
	 * Custom MediaError class which mimics the standard HTML5 MediaError class.
	 *
	 * @param {Number|String|Object|MediaError} value
	 *        This can be of multiple types:
	 *        - Number: should be a standard error code
	 *        - String: an error message (the code will be 0)
	 *        - Object: arbitrary properties
	 *        - MediaError (native): used to populate a video.js MediaError object
	 *        - MediaError (video.js): will return itself if it's already a
	 *          video.js MediaError object.
	 */
	function MediaError(value) {

	  // Allow redundant calls to this constructor to avoid having `instanceof`
	  // checks peppered around the code.
	  if (value instanceof MediaError) {
	    return value;
	  }

	  if (typeof value === 'number') {
	    this.code = value;
	  } else if (typeof value === 'string') {
	    // default code is zero, so this is a custom error
	    this.message = value;
	  } else if (typeof value === 'object') {

	    // We assign the `code` property manually because native MediaError objects
	    // do not expose it as an own/enumerable property of the object.
	    if (typeof value.code === 'number') {
	      this.code = value.code;
	    }

	    _objectAssign2['default'](this, value);
	  }

	  if (!this.message) {
	    this.message = MediaError.defaultMessages[this.code] || '';
	  }
	}

	/*
	 * The error code that refers two one of the defined
	 * MediaError types
	 *
	 * @type {Number}
	 */
	MediaError.prototype.code = 0;

	/*
	 * An optional message to be shown with the error.
	 * Message is not part of the HTML5 video spec
	 * but allows for more informative custom errors.
	 *
	 * @type {String}
	 */
	MediaError.prototype.message = '';

	/*
	 * An optional status code that can be set by plugins
	 * to allow even more detail about the error.
	 * For example the HLS plugin might provide the specific
	 * HTTP status code that was returned when the error
	 * occurred, then allowing a custom error overlay
	 * to display more information.
	 *
	 * @type {Array}
	 */
	MediaError.prototype.status = null;

	MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', // = 0
	'MEDIA_ERR_ABORTED', // = 1
	'MEDIA_ERR_NETWORK', // = 2
	'MEDIA_ERR_DECODE', // = 3
	'MEDIA_ERR_SRC_NOT_SUPPORTED', // = 4
	'MEDIA_ERR_ENCRYPTED' // = 5
	];

	MediaError.defaultMessages = {
	  1: 'You aborted the media playback',
	  2: 'A network error caused the media download to fail part-way.',
	  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
	  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
	  5: 'The media is encrypted and we do not have the keys to decrypt it.'
	};

	// Add types as properties on MediaError
	// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
	for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
	  MediaError[MediaError.errorTypes[errNum]] = errNum;
	  // values should be accessible on both the class and instance
	  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
	}

	exports['default'] = MediaError;
	module.exports = exports['default'];

	},{"object.assign":45}],109:[function(_dereq_,module,exports){
	/**
	 * @file menu-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _clickableComponentJs = _dereq_('../clickable-component.js');

	var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _menuJs = _dereq_('./menu.js');

	var _menuJs2 = _interopRequireDefault(_menuJs);

	var _utilsDomJs = _dereq_('../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

	/**
	 * A button class with a popup menu
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Button
	 * @class MenuButton
	 */

	var MenuButton = (function (_ClickableComponent) {
	  _inherits(MenuButton, _ClickableComponent);

	  function MenuButton(player) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, MenuButton);

	    _ClickableComponent.call(this, player, options);

	    this.update();

	    this.enabled_ = true;

	    this.el_.setAttribute('aria-haspopup', 'true');
	    this.el_.setAttribute('role', 'menuitem');
	    this.on('keydown', this.handleSubmenuKeyPress);
	  }

	  /**
	   * Update menu
	   *
	   * @method update
	   */

	  MenuButton.prototype.update = function update() {
	    var menu = this.createMenu();

	    if (this.menu) {
	      this.removeChild(this.menu);
	    }

	    this.menu = menu;
	    this.addChild(menu);

	    /**
	     * Track the state of the menu button
	     *
	     * @type {Boolean}
	     * @private
	     */
	    this.buttonPressed_ = false;
	    this.el_.setAttribute('aria-expanded', 'false');

	    if (this.items && this.items.length === 0) {
	      this.hide();
	    } else if (this.items && this.items.length > 1) {
	      this.show();
	    }
	  };

	  /**
	   * Create menu
	   *
	   * @return {Menu} The constructed menu
	   * @method createMenu
	   */

	  MenuButton.prototype.createMenu = function createMenu() {
	    var menu = new _menuJs2['default'](this.player_);

	    // Add a title list item to the top
	    if (this.options_.title) {
	      var title = Dom.createEl('li', {
	        className: 'vjs-menu-title',
	        innerHTML: _utilsToTitleCaseJs2['default'](this.options_.title),
	        tabIndex: -1
	      });
	      menu.children_.unshift(title);
	      Dom.insertElFirst(title, menu.contentEl());
	    }

	    this.items = this['createItems']();

	    if (this.items) {
	      // Add menu items to the menu
	      for (var i = 0; i < this.items.length; i++) {
	        menu.addItem(this.items[i]);
	      }
	    }

	    return menu;
	  };

	  /**
	   * Create the list of menu items. Specific to each subclass.
	   *
	   * @method createItems
	   */

	  MenuButton.prototype.createItems = function createItems() {};

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  MenuButton.prototype.createEl = function createEl() {
	    return _ClickableComponent.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  MenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    var menuButtonClass = 'vjs-menu-button';

	    // If the inline option is passed, we want to use different styles altogether.
	    if (this.options_.inline === true) {
	      menuButtonClass += '-inline';
	    } else {
	      menuButtonClass += '-popup';
	    }

	    return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * When you click the button it adds focus, which
	   * will show the menu indefinitely.
	   * So we'll remove focus when the mouse leaves the button.
	   * Focus is needed for tab navigation.
	   * Allow sub components to stack CSS class names
	   *
	   * @method handleClick
	   */

	  MenuButton.prototype.handleClick = function handleClick() {
	    this.one(this.menu.contentEl(), 'mouseleave', Fn.bind(this, function (e) {
	      this.unpressButton();
	      this.el_.blur();
	    }));
	    if (this.buttonPressed_) {
	      this.unpressButton();
	    } else {
	      this.pressButton();
	    }
	  };

	  /**
	   * Handle key press on menu
	   *
	   * @param {Object} event Key press event
	   * @method handleKeyPress
	   */

	  MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Escape (27) key or Tab (9) key unpress the 'button'
	    if (event.which === 27 || event.which === 9) {
	      if (this.buttonPressed_) {
	        this.unpressButton();
	      }
	      // Don't preventDefault for Tab key - we still want to lose focus
	      if (event.which !== 9) {
	        event.preventDefault();
	      }
	      // Up (38) key or Down (40) key press the 'button'
	    } else if (event.which === 38 || event.which === 40) {
	        if (!this.buttonPressed_) {
	          this.pressButton();
	          event.preventDefault();
	        }
	      } else {
	        _ClickableComponent.prototype.handleKeyPress.call(this, event);
	      }
	  };

	  /**
	   * Handle key press on submenu
	   *
	   * @param {Object} event Key press event
	   * @method handleSubmenuKeyPress
	   */

	  MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {

	    // Escape (27) key or Tab (9) key unpress the 'button'
	    if (event.which === 27 || event.which === 9) {
	      if (this.buttonPressed_) {
	        this.unpressButton();
	      }
	      // Don't preventDefault for Tab key - we still want to lose focus
	      if (event.which !== 9) {
	        event.preventDefault();
	      }
	    }
	  };

	  /**
	   * Makes changes based on button pressed
	   *
	   * @method pressButton
	   */

	  MenuButton.prototype.pressButton = function pressButton() {
	    if (this.enabled_) {
	      this.buttonPressed_ = true;
	      this.menu.lockShowing();
	      this.el_.setAttribute('aria-expanded', 'true');
	      this.menu.focus(); // set the focus into the submenu
	    }
	  };

	  /**
	   * Makes changes based on button unpressed
	   *
	   * @method unpressButton
	   */

	  MenuButton.prototype.unpressButton = function unpressButton() {
	    if (this.enabled_) {
	      this.buttonPressed_ = false;
	      this.menu.unlockShowing();
	      this.el_.setAttribute('aria-expanded', 'false');
	      this.el_.focus(); // Set focus back to this menu button
	    }
	  };

	  /**
	   * Disable the menu button
	   *
	   * @return {Component}
	   * @method disable
	   */

	  MenuButton.prototype.disable = function disable() {
	    // Unpress, but don't force focus on this button
	    this.buttonPressed_ = false;
	    this.menu.unlockShowing();
	    this.el_.setAttribute('aria-expanded', 'false');

	    this.enabled_ = false;

	    return _ClickableComponent.prototype.disable.call(this);
	  };

	  /**
	   * Enable the menu button
	   *
	   * @return {Component}
	   * @method disable
	   */

	  MenuButton.prototype.enable = function enable() {
	    this.enabled_ = true;

	    return _ClickableComponent.prototype.enable.call(this);
	  };

	  return MenuButton;
	})(_clickableComponentJs2['default']);

	_componentJs2['default'].registerComponent('MenuButton', MenuButton);
	exports['default'] = MenuButton;
	module.exports = exports['default'];

	},{"../clickable-component.js":65,"../component.js":67,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/to-title-case.js":151,"./menu.js":111}],110:[function(_dereq_,module,exports){
	/**
	 * @file menu-item.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _clickableComponentJs = _dereq_('../clickable-component.js');

	var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _objectAssign = _dereq_('object.assign');

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	/**
	 * The component for a menu item. `<li>`
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Button
	 * @class MenuItem
	 */

	var MenuItem = (function (_ClickableComponent) {
	  _inherits(MenuItem, _ClickableComponent);

	  function MenuItem(player, options) {
	    _classCallCheck(this, MenuItem);

	    _ClickableComponent.call(this, player, options);

	    this.selectable = options['selectable'];

	    this.selected(options['selected']);

	    if (this.selectable) {
	      // TODO: May need to be either menuitemcheckbox or menuitemradio,
	      //       and may need logical grouping of menu items.
	      this.el_.setAttribute('role', 'menuitemcheckbox');
	    } else {
	      this.el_.setAttribute('role', 'menuitem');
	    }
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @param {String=} type Desc
	   * @param {Object=} props Desc
	   * @return {Element}
	   * @method createEl
	   */

	  MenuItem.prototype.createEl = function createEl(type, props, attrs) {
	    return _ClickableComponent.prototype.createEl.call(this, 'li', _objectAssign2['default']({
	      className: 'vjs-menu-item',
	      innerHTML: this.localize(this.options_['label']),
	      tabIndex: -1
	    }, props), attrs);
	  };

	  /**
	   * Handle a click on the menu item, and set it to selected
	   *
	   * @method handleClick
	   */

	  MenuItem.prototype.handleClick = function handleClick() {
	    this.selected(true);
	  };

	  /**
	   * Set this menu item as selected or not
	   *
	   * @param  {Boolean} selected
	   * @method selected
	   */

	  MenuItem.prototype.selected = function selected(_selected) {
	    if (this.selectable) {
	      if (_selected) {
	        this.addClass('vjs-selected');
	        this.el_.setAttribute('aria-checked', 'true');
	        // aria-checked isn't fully supported by browsers/screen readers,
	        // so indicate selected state to screen reader in the control text.
	        this.controlText(', selected');
	      } else {
	        this.removeClass('vjs-selected');
	        this.el_.setAttribute('aria-checked', 'false');
	        // Indicate un-selected state to screen reader
	        // Note that a space clears out the selected state text
	        this.controlText(' ');
	      }
	    }
	  };

	  return MenuItem;
	})(_clickableComponentJs2['default']);

	_componentJs2['default'].registerComponent('MenuItem', MenuItem);
	exports['default'] = MenuItem;
	module.exports = exports['default'];

	},{"../clickable-component.js":65,"../component.js":67,"object.assign":45}],111:[function(_dereq_,module,exports){
	/**
	 * @file menu.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsDomJs = _dereq_('../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsEventsJs = _dereq_('../utils/events.js');

	var Events = _interopRequireWildcard(_utilsEventsJs);

	/**
	 * The Menu component is used to build pop up menus, including subtitle and
	 * captions selection menus.
	 *
	 * @extends Component
	 * @class Menu
	 */

	var Menu = (function (_Component) {
	  _inherits(Menu, _Component);

	  function Menu(player, options) {
	    _classCallCheck(this, Menu);

	    _Component.call(this, player, options);

	    this.focusedChild_ = -1;

	    this.on('keydown', this.handleKeyPress);
	  }

	  /**
	   * Add a menu item to the menu
	   *
	   * @param {Object|String} component Component or component type to add
	   * @method addItem
	   */

	  Menu.prototype.addItem = function addItem(component) {
	    this.addChild(component);
	    component.on('click', Fn.bind(this, function () {
	      this.unlockShowing();
	      //TODO: Need to set keyboard focus back to the menuButton
	    }));
	  };

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  Menu.prototype.createEl = function createEl() {
	    var contentElType = this.options_.contentElType || 'ul';
	    this.contentEl_ = Dom.createEl(contentElType, {
	      className: 'vjs-menu-content'
	    });
	    this.contentEl_.setAttribute('role', 'menu');
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      append: this.contentEl_,
	      className: 'vjs-menu'
	    });
	    el.setAttribute('role', 'presentation');
	    el.appendChild(this.contentEl_);

	    // Prevent clicks from bubbling up. Needed for Menu Buttons,
	    // where a click on the parent is significant
	    Events.on(el, 'click', function (event) {
	      event.preventDefault();
	      event.stopImmediatePropagation();
	    });

	    return el;
	  };

	  /**
	   * Handle key press for menu
	   *
	   * @param {Object} event Event object
	   * @method handleKeyPress
	   */

	  Menu.prototype.handleKeyPress = function handleKeyPress(event) {
	    if (event.which === 37 || event.which === 40) {
	      // Left and Down Arrows
	      event.preventDefault();
	      this.stepForward();
	    } else if (event.which === 38 || event.which === 39) {
	      // Up and Right Arrows
	      event.preventDefault();
	      this.stepBack();
	    }
	  };

	  /**
	   * Move to next (lower) menu item for keyboard users
	   *
	   * @method stepForward
	   */

	  Menu.prototype.stepForward = function stepForward() {
	    var stepChild = 0;

	    if (this.focusedChild_ !== undefined) {
	      stepChild = this.focusedChild_ + 1;
	    }
	    this.focus(stepChild);
	  };

	  /**
	   * Move to previous (higher) menu item for keyboard users
	   *
	   * @method stepBack
	   */

	  Menu.prototype.stepBack = function stepBack() {
	    var stepChild = 0;

	    if (this.focusedChild_ !== undefined) {
	      stepChild = this.focusedChild_ - 1;
	    }
	    this.focus(stepChild);
	  };

	  /**
	   * Set focus on a menu item in the menu
	   *
	   * @param {Object|String} item Index of child item set focus on
	   * @method focus
	   */

	  Menu.prototype.focus = function focus() {
	    var item = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

	    var children = this.children().slice();
	    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);

	    if (haveTitle) {
	      children.shift();
	    }

	    if (children.length > 0) {
	      if (item < 0) {
	        item = 0;
	      } else if (item >= children.length) {
	        item = children.length - 1;
	      }

	      this.focusedChild_ = item;

	      children[item].el_.focus();
	    }
	  };

	  return Menu;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('Menu', Menu);
	exports['default'] = Menu;
	module.exports = exports['default'];

	},{"../component.js":67,"../utils/dom.js":142,"../utils/events.js":143,"../utils/fn.js":144}],112:[function(_dereq_,module,exports){
	/**
	 * @file modal-dialog.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilsDom = _dereq_('./utils/dom');

	var Dom = _interopRequireWildcard(_utilsDom);

	var _utilsFn = _dereq_('./utils/fn');

	var Fn = _interopRequireWildcard(_utilsFn);

	var _utilsLog = _dereq_('./utils/log');

	var _utilsLog2 = _interopRequireDefault(_utilsLog);

	var _component = _dereq_('./component');

	var _component2 = _interopRequireDefault(_component);

	var _closeButton = _dereq_('./close-button');

	var _closeButton2 = _interopRequireDefault(_closeButton);

	var MODAL_CLASS_NAME = 'vjs-modal-dialog';
	var ESC = 27;

	/**
	 * The `ModalDialog` displays over the video and its controls, which blocks
	 * interaction with the player until it is closed.
	 *
	 * Modal dialogs include a "Close" button and will close when that button
	 * is activated - or when ESC is pressed anywhere.
	 *
	 * @extends Component
	 * @class ModalDialog
	 */

	var ModalDialog = (function (_Component) {
	  _inherits(ModalDialog, _Component);

	  /**
	   * Constructor for modals.
	   *
	   * @param  {Player} player
	   * @param  {Object} [options]
	   * @param  {Mixed} [options.content=undefined]
	   *         Provide customized content for this modal.
	   *
	   * @param  {String} [options.description]
	   *         A text description for the modal, primarily for accessibility.
	   *
	   * @param  {Boolean} [options.fillAlways=false]
	   *         Normally, modals are automatically filled only the first time
	   *         they open. This tells the modal to refresh its content
	   *         every time it opens.
	   *
	   * @param  {String} [options.label]
	   *         A text label for the modal, primarily for accessibility.
	   *
	   * @param  {Boolean} [options.temporary=true]
	   *         If `true`, the modal can only be opened once; it will be
	   *         disposed as soon as it's closed.
	   *
	   * @param  {Boolean} [options.uncloseable=false]
	   *         If `true`, the user will not be able to close the modal
	   *         through the UI in the normal ways. Programmatic closing is
	   *         still possible.
	   *
	   */

	  function ModalDialog(player, options) {
	    _classCallCheck(this, ModalDialog);

	    _Component.call(this, player, options);
	    this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = false;

	    this.closeable(!this.options_.uncloseable);
	    this.content(this.options_.content);

	    // Make sure the contentEl is defined AFTER any children are initialized
	    // because we only want the contents of the modal in the contentEl
	    // (not the UI elements like the close button).
	    this.contentEl_ = Dom.createEl('div', {
	      className: MODAL_CLASS_NAME + '-content'
	    }, {
	      role: 'document'
	    });

	    this.descEl_ = Dom.createEl('p', {
	      className: MODAL_CLASS_NAME + '-description vjs-offscreen',
	      id: this.el().getAttribute('aria-describedby')
	    });

	    Dom.textContent(this.descEl_, this.description());
	    this.el_.appendChild(this.descEl_);
	    this.el_.appendChild(this.contentEl_);
	  }

	  /*
	   * Modal dialog default options.
	   *
	   * @type {Object}
	   * @private
	   */

	  /**
	   * Create the modal's DOM element
	   *
	   * @method createEl
	   * @return {Element}
	   */

	  ModalDialog.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass(),
	      tabIndex: -1
	    }, {
	      'aria-describedby': this.id() + '_description',
	      'aria-hidden': 'true',
	      'aria-label': this.label(),
	      role: 'dialog'
	    });
	  };

	  /**
	   * Build the modal's CSS class.
	   *
	   * @method buildCSSClass
	   * @return {String}
	   */

	  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
	    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handles key presses on the document, looking for ESC, which closes
	   * the modal.
	   *
	   * @method handleKeyPress
	   * @param  {Event} e
	   */

	  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
	    if (e.which === ESC && this.closeable()) {
	      this.close();
	    }
	  };

	  /**
	   * Returns the label string for this modal. Primarily used for accessibility.
	   *
	   * @return {String}
	   */

	  ModalDialog.prototype.label = function label() {
	    return this.options_.label || this.localize('Modal Window');
	  };

	  /**
	   * Returns the description string for this modal. Primarily used for
	   * accessibility.
	   *
	   * @return {String}
	   */

	  ModalDialog.prototype.description = function description() {
	    var desc = this.options_.description || this.localize('This is a modal window.');

	    // Append a universal closeability message if the modal is closeable.
	    if (this.closeable()) {
	      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
	    }

	    return desc;
	  };

	  /**
	   * Opens the modal.
	   *
	   * @method open
	   * @return {ModalDialog}
	   */

	  ModalDialog.prototype.open = function open() {
	    if (!this.opened_) {
	      var player = this.player();

	      this.trigger('beforemodalopen');
	      this.opened_ = true;

	      // Fill content if the modal has never opened before and
	      // never been filled.
	      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
	        this.fill();
	      }

	      // If the player was playing, pause it and take note of its previously
	      // playing state.
	      this.wasPlaying_ = !player.paused();

	      if (this.wasPlaying_) {
	        player.pause();
	      }

	      if (this.closeable()) {
	        this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
	      }

	      player.controls(false);
	      this.show();
	      this.el().setAttribute('aria-hidden', 'false');
	      this.trigger('modalopen');
	      this.hasBeenOpened_ = true;
	    }
	    return this;
	  };

	  /**
	   * Whether or not the modal is opened currently.
	   *
	   * @method opened
	   * @param  {Boolean} [value]
	   *         If given, it will open (`true`) or close (`false`) the modal.
	   *
	   * @return {Boolean}
	   */

	  ModalDialog.prototype.opened = function opened(value) {
	    if (typeof value === 'boolean') {
	      this[value ? 'open' : 'close']();
	    }
	    return this.opened_;
	  };

	  /**
	   * Closes the modal.
	   *
	   * @method close
	   * @return {ModalDialog}
	   */

	  ModalDialog.prototype.close = function close() {
	    if (this.opened_) {
	      var player = this.player();

	      this.trigger('beforemodalclose');
	      this.opened_ = false;

	      if (this.wasPlaying_) {
	        player.play();
	      }

	      if (this.closeable()) {
	        this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
	      }

	      player.controls(true);
	      this.hide();
	      this.el().setAttribute('aria-hidden', 'true');
	      this.trigger('modalclose');

	      if (this.options_.temporary) {
	        this.dispose();
	      }
	    }
	    return this;
	  };

	  /**
	   * Whether or not the modal is closeable via the UI.
	   *
	   * @method closeable
	   * @param  {Boolean} [value]
	   *         If given as a Boolean, it will set the `closeable` option.
	   *
	   * @return {Boolean}
	   */

	  ModalDialog.prototype.closeable = function closeable(value) {
	    if (typeof value === 'boolean') {
	      var closeable = this.closeable_ = !!value;
	      var _close = this.getChild('closeButton');

	      // If this is being made closeable and has no close button, add one.
	      if (closeable && !_close) {

	        // The close button should be a child of the modal - not its
	        // content element, so temporarily change the content element.
	        var temp = this.contentEl_;
	        this.contentEl_ = this.el_;
	        _close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });
	        this.contentEl_ = temp;
	        this.on(_close, 'close', this.close);
	      }

	      // If this is being made uncloseable and has a close button, remove it.
	      if (!closeable && _close) {
	        this.off(_close, 'close', this.close);
	        this.removeChild(_close);
	        _close.dispose();
	      }
	    }
	    return this.closeable_;
	  };

	  /**
	   * Fill the modal's content element with the modal's "content" option.
	   *
	   * The content element will be emptied before this change takes place.
	   *
	   * @method fill
	   * @return {ModalDialog}
	   */

	  ModalDialog.prototype.fill = function fill() {
	    return this.fillWith(this.content());
	  };

	  /**
	   * Fill the modal's content element with arbitrary content.
	   *
	   * The content element will be emptied before this change takes place.
	   *
	   * @method fillWith
	   * @param  {Mixed} [content]
	   *         The same rules apply to this as apply to the `content` option.
	   *
	   * @return {ModalDialog}
	   */

	  ModalDialog.prototype.fillWith = function fillWith(content) {
	    var contentEl = this.contentEl();
	    var parentEl = contentEl.parentNode;
	    var nextSiblingEl = contentEl.nextSibling;

	    this.trigger('beforemodalfill');
	    this.hasBeenFilled_ = true;

	    // Detach the content element from the DOM before performing
	    // manipulation to avoid modifying the live DOM multiple times.
	    parentEl.removeChild(contentEl);
	    this.empty();
	    Dom.insertContent(contentEl, content);
	    this.trigger('modalfill');

	    // Re-inject the re-filled content element.
	    if (nextSiblingEl) {
	      parentEl.insertBefore(contentEl, nextSiblingEl);
	    } else {
	      parentEl.appendChild(contentEl);
	    }

	    return this;
	  };

	  /**
	   * Empties the content element.
	   *
	   * This happens automatically anytime the modal is filled.
	   *
	   * @method empty
	   * @return {ModalDialog}
	   */

	  ModalDialog.prototype.empty = function empty() {
	    this.trigger('beforemodalempty');
	    Dom.emptyEl(this.contentEl());
	    this.trigger('modalempty');
	    return this;
	  };

	  /**
	   * Gets or sets the modal content, which gets normalized before being
	   * rendered into the DOM.
	   *
	   * This does not update the DOM or fill the modal, but it is called during
	   * that process.
	   *
	   * @method content
	   * @param  {Mixed} [value]
	   *         If defined, sets the internal content value to be used on the
	   *         next call(s) to `fill`. This value is normalized before being
	   *         inserted. To "clear" the internal content value, pass `null`.
	   *
	   * @return {Mixed}
	   */

	  ModalDialog.prototype.content = function content(value) {
	    if (typeof value !== 'undefined') {
	      this.content_ = value;
	    }
	    return this.content_;
	  };

	  return ModalDialog;
	})(_component2['default']);

	ModalDialog.prototype.options_ = {
	  temporary: true
	};

	_component2['default'].registerComponent('ModalDialog', ModalDialog);
	exports['default'] = ModalDialog;
	module.exports = exports['default'];

	},{"./close-button":66,"./component":67,"./utils/dom":142,"./utils/fn":144,"./utils/log":147}],113:[function(_dereq_,module,exports){
	/**
	 * @file player.js
	 */
	// Subclasses Component
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('./component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _utilsEventsJs = _dereq_('./utils/events.js');

	var Events = _interopRequireWildcard(_utilsEventsJs);

	var _utilsDomJs = _dereq_('./utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFnJs = _dereq_('./utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsGuidJs = _dereq_('./utils/guid.js');

	var Guid = _interopRequireWildcard(_utilsGuidJs);

	var _utilsBrowserJs = _dereq_('./utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _utilsLogJs = _dereq_('./utils/log.js');

	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

	var _utilsToTitleCaseJs = _dereq_('./utils/to-title-case.js');

	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

	var _utilsTimeRangesJs = _dereq_('./utils/time-ranges.js');

	var _utilsBufferJs = _dereq_('./utils/buffer.js');

	var _utilsStylesheetJs = _dereq_('./utils/stylesheet.js');

	var stylesheet = _interopRequireWildcard(_utilsStylesheetJs);

	var _fullscreenApiJs = _dereq_('./fullscreen-api.js');

	var _fullscreenApiJs2 = _interopRequireDefault(_fullscreenApiJs);

	var _mediaErrorJs = _dereq_('./media-error.js');

	var _mediaErrorJs2 = _interopRequireDefault(_mediaErrorJs);

	var _safeJsonParseTuple = _dereq_('safe-json-parse/tuple');

	var _safeJsonParseTuple2 = _interopRequireDefault(_safeJsonParseTuple);

	var _objectAssign = _dereq_('object.assign');

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _utilsMergeOptionsJs = _dereq_('./utils/merge-options.js');

	var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

	var _tracksTextTrackListConverterJs = _dereq_('./tracks/text-track-list-converter.js');

	var _tracksTextTrackListConverterJs2 = _interopRequireDefault(_tracksTextTrackListConverterJs);

	var _tracksAudioTrackListJs = _dereq_('./tracks/audio-track-list.js');

	var _tracksAudioTrackListJs2 = _interopRequireDefault(_tracksAudioTrackListJs);

	var _tracksVideoTrackListJs = _dereq_('./tracks/video-track-list.js');

	var _tracksVideoTrackListJs2 = _interopRequireDefault(_tracksVideoTrackListJs);

	// Include required child components (importing also registers them)

	var _techLoaderJs = _dereq_('./tech/loader.js');

	var _techLoaderJs2 = _interopRequireDefault(_techLoaderJs);

	var _posterImageJs = _dereq_('./poster-image.js');

	var _posterImageJs2 = _interopRequireDefault(_posterImageJs);

	var _tracksTextTrackDisplayJs = _dereq_('./tracks/text-track-display.js');

	var _tracksTextTrackDisplayJs2 = _interopRequireDefault(_tracksTextTrackDisplayJs);

	var _loadingSpinnerJs = _dereq_('./loading-spinner.js');

	var _loadingSpinnerJs2 = _interopRequireDefault(_loadingSpinnerJs);

	var _bigPlayButtonJs = _dereq_('./big-play-button.js');

	var _bigPlayButtonJs2 = _interopRequireDefault(_bigPlayButtonJs);

	var _controlBarControlBarJs = _dereq_('./control-bar/control-bar.js');

	var _controlBarControlBarJs2 = _interopRequireDefault(_controlBarControlBarJs);

	var _errorDisplayJs = _dereq_('./error-display.js');

	var _errorDisplayJs2 = _interopRequireDefault(_errorDisplayJs);

	var _tracksTextTrackSettingsJs = _dereq_('./tracks/text-track-settings.js');

	var _tracksTextTrackSettingsJs2 = _interopRequireDefault(_tracksTextTrackSettingsJs);

	var _modalDialog = _dereq_('./modal-dialog');

	var _modalDialog2 = _interopRequireDefault(_modalDialog);

	// Require html5 tech, at least for disposing the original video tag

	var _techTechJs = _dereq_('./tech/tech.js');

	var _techTechJs2 = _interopRequireDefault(_techTechJs);

	var _techHtml5Js = _dereq_('./tech/html5.js');

	var _techHtml5Js2 = _interopRequireDefault(_techHtml5Js);

	/**
	 * An instance of the `Player` class is created when any of the Video.js setup methods are used to initialize a video.
	 * ```js
	 * var myPlayer = videojs('example_video_1');
	 * ```
	 * In the following example, the `data-setup` attribute tells the Video.js library to create a player instance when the library is ready.
	 * ```html
	 * <video id="example_video_1" data-setup='{}' controls>
	 *   <source src="my-source.mp4" type="video/mp4">
	 * </video>
	 * ```
	 * After an instance has been created it can be accessed globally using `Video('example_video_1')`.
	 *
	 * @param {Element} tag        The original video tag used for configuring options
	 * @param {Object=} options    Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends Component
	 * @class Player
	 */

	var Player = (function (_Component) {
	  _inherits(Player, _Component);

	  /**
	   * player's constructor function
	   *
	   * @constructs
	   * @method init
	   * @param {Element} tag        The original video tag used for configuring options
	   * @param {Object=} options    Player options
	   * @param {Function=} ready    Ready callback function
	   */

	  function Player(tag, options, ready) {
	    var _this = this;

	    _classCallCheck(this, Player);

	    // Make sure tag ID exists
	    tag.id = tag.id || 'vjs_video_' + Guid.newGUID();

	    // Set Options
	    // The options argument overrides options set in the video tag
	    // which overrides globally set options.
	    // This latter part coincides with the load order
	    // (tag must exist before Player)
	    options = _objectAssign2['default'](Player.getTagSettings(tag), options);

	    // Delay the initialization of children because we need to set up
	    // player properties first, and can't use `this` before `super()`
	    options.initChildren = false;

	    // Same with creating the element
	    options.createEl = false;

	    // we don't want the player to report touch activity on itself
	    // see enableTouchActivity in Component
	    options.reportTouchActivity = false;

	    // If language is not set, get the closest lang attribute
	    if (!options.language) {
	      if (typeof tag.closest === 'function') {
	        var closest = tag.closest('[lang]');
	        if (closest) {
	          options.language = closest.getAttribute('lang');
	        }
	      } else {
	        var element = tag;
	        while (element && element.nodeType === 1) {
	          if (Dom.getElAttributes(element).hasOwnProperty('lang')) {
	            options.language = element.getAttribute('lang');
	            break;
	          }
	          element = element.parentNode;
	        }
	      }
	    }

	    // Run base component initializing with new options
	    _Component.call(this, null, options, ready);

	    // if the global option object was accidentally blown away by
	    // someone, bail early with an informative error
	    if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) {
	      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
	    }

	    this.tag = tag; // Store the original tag used to set options

	    // Store the tag attributes used to restore html5 element
	    this.tagAttributes = tag && Dom.getElAttributes(tag);

	    // Update current language
	    this.language(this.options_.language);

	    // Update Supported Languages
	    if (options.languages) {
	      (function () {
	        // Normalise player option languages to lowercase
	        var languagesToLower = {};

	        Object.getOwnPropertyNames(options.languages).forEach(function (name) {
	          languagesToLower[name.toLowerCase()] = options.languages[name];
	        });
	        _this.languages_ = languagesToLower;
	      })();
	    } else {
	      this.languages_ = Player.prototype.options_.languages;
	    }

	    // Cache for video property values.
	    this.cache_ = {};

	    // Set poster
	    this.poster_ = options.poster || '';

	    // Set controls
	    this.controls_ = !!options.controls;

	    // Original tag settings stored in options
	    // now remove immediately so native controls don't flash.
	    // May be turned back on by HTML5 tech if nativeControlsForTouch is true
	    tag.controls = false;

	    /*
	     * Store the internal state of scrubbing
	     *
	     * @private
	     * @return {Boolean} True if the user is scrubbing
	     */
	    this.scrubbing_ = false;

	    this.el_ = this.createEl();

	    // We also want to pass the original player options to each component and plugin
	    // as well so they don't need to reach back into the player for options later.
	    // We also need to do another copy of this.options_ so we don't end up with
	    // an infinite loop.
	    var playerOptionsCopy = _utilsMergeOptionsJs2['default'](this.options_);

	    // Load plugins
	    if (options.plugins) {
	      (function () {
	        var plugins = options.plugins;

	        Object.getOwnPropertyNames(plugins).forEach(function (name) {
	          if (typeof this[name] === 'function') {
	            this[name](plugins[name]);
	          } else {
	            _utilsLogJs2['default'].error('Unable to find plugin:', name);
	          }
	        }, _this);
	      })();
	    }

	    this.options_.playerOptions = playerOptionsCopy;

	    this.initChildren();

	    // Set isAudio based on whether or not an audio tag was used
	    this.isAudio(tag.nodeName.toLowerCase() === 'audio');

	    // Update controls className. Can't do this when the controls are initially
	    // set because the element doesn't exist yet.
	    if (this.controls()) {
	      this.addClass('vjs-controls-enabled');
	    } else {
	      this.addClass('vjs-controls-disabled');
	    }

	    // Set ARIA label and region role depending on player type
	    this.el_.setAttribute('role', 'region');
	    if (this.isAudio()) {
	      this.el_.setAttribute('aria-label', 'audio player');
	    } else {
	      this.el_.setAttribute('aria-label', 'video player');
	    }

	    if (this.isAudio()) {
	      this.addClass('vjs-audio');
	    }

	    if (this.flexNotSupported_()) {
	      this.addClass('vjs-no-flex');
	    }

	    // TODO: Make this smarter. Toggle user state between touching/mousing
	    // using events, since devices can have both touch and mouse events.
	    // if (browser.TOUCH_ENABLED) {
	    //   this.addClass('vjs-touch-enabled');
	    // }

	    // iOS Safari has broken hover handling
	    if (!browser.IS_IOS) {
	      this.addClass('vjs-workinghover');
	    }

	    // Make player easily findable by ID
	    Player.players[this.id_] = this;

	    // When the player is first initialized, trigger activity so components
	    // like the control bar show themselves if needed
	    this.userActive(true);
	    this.reportUserActivity();
	    this.listenForUserActivity_();

	    this.on('fullscreenchange', this.handleFullscreenChange_);
	    this.on('stageclick', this.handleStageClick_);
	  }

	  /*
	   * Global player list
	   *
	   * @type {Object}
	   */

	  /**
	   * Destroys the video player and does any necessary cleanup
	   * ```js
	   *     myPlayer.dispose();
	   * ```
	   * This is especially helpful if you are dynamically adding and removing videos
	   * to/from the DOM.
	   *
	   * @method dispose
	   */

	  Player.prototype.dispose = function dispose() {
	    this.trigger('dispose');
	    // prevent dispose from being called twice
	    this.off('dispose');

	    if (this.styleEl_ && this.styleEl_.parentNode) {
	      this.styleEl_.parentNode.removeChild(this.styleEl_);
	    }

	    // Kill reference to this player
	    Player.players[this.id_] = null;
	    if (this.tag && this.tag.player) {
	      this.tag.player = null;
	    }
	    if (this.el_ && this.el_.player) {
	      this.el_.player = null;
	    }

	    if (this.tech_) {
	      this.tech_.dispose();
	    }

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  Player.prototype.createEl = function createEl() {
	    var el = this.el_ = _Component.prototype.createEl.call(this, 'div');
	    var tag = this.tag;

	    // Remove width/height attrs from tag so CSS can make it 100% width/height
	    tag.removeAttribute('width');
	    tag.removeAttribute('height');

	    // Copy over all the attributes from the tag, including ID and class
	    // ID will now reference player box, not the video tag
	    var attrs = Dom.getElAttributes(tag);

	    Object.getOwnPropertyNames(attrs).forEach(function (attr) {
	      // workaround so we don't totally break IE7
	      // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
	      if (attr === 'class') {
	        el.className = attrs[attr];
	      } else {
	        el.setAttribute(attr, attrs[attr]);
	      }
	    });

	    // Update tag id/class for use as HTML5 playback tech
	    // Might think we should do this after embedding in container so .vjs-tech class
	    // doesn't flash 100% width/height, but class only applies with .video-js parent
	    tag.playerId = tag.id;
	    tag.id += '_html5_api';
	    tag.className = 'vjs-tech';

	    // Make player findable on elements
	    tag.player = el.player = this;
	    // Default state of video is paused
	    this.addClass('vjs-paused');

	    // Add a style element in the player that we'll use to set the width/height
	    // of the player in a way that's still overrideable by CSS, just like the
	    // video element
	    if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
	      this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');
	      var defaultsStyleEl = Dom.$('.vjs-styles-defaults');
	      var head = Dom.$('head');
	      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
	    }

	    // Pass in the width/height/aspectRatio options which will update the style el
	    this.width(this.options_.width);
	    this.height(this.options_.height);
	    this.fluid(this.options_.fluid);
	    this.aspectRatio(this.options_.aspectRatio);

	    // Hide any links within the video/audio tag, because IE doesn't hide them completely.
	    var links = tag.getElementsByTagName('a');
	    for (var i = 0; i < links.length; i++) {
	      var linkEl = links.item(i);
	      Dom.addElClass(linkEl, 'vjs-hidden');
	      linkEl.setAttribute('hidden', 'hidden');
	    }

	    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
	    // keep track of the original for later so we can know if the source originally failed
	    tag.initNetworkState_ = tag.networkState;

	    // Wrap video tag in div (el/box) container
	    if (tag.parentNode) {
	      tag.parentNode.insertBefore(el, tag);
	    }

	    // insert the tag as the first child of the player element
	    // then manually add it to the children array so that this.addChild
	    // will work properly for other components
	    Dom.insertElFirst(tag, el); // Breaks iPhone, fixed in HTML5 setup.
	    this.children_.unshift(tag);

	    this.el_ = el;

	    return el;
	  };

	  /**
	   * Get/set player width
	   *
	   * @param {Number=} value Value for width
	   * @return {Number} Width when getting
	   * @method width
	   */

	  Player.prototype.width = function width(value) {
	    return this.dimension('width', value);
	  };

	  /**
	   * Get/set player height
	   *
	   * @param {Number=} value Value for height
	   * @return {Number} Height when getting
	   * @method height
	   */

	  Player.prototype.height = function height(value) {
	    return this.dimension('height', value);
	  };

	  /**
	   * Get/set dimension for player
	   *
	   * @param {String} dimension Either width or height
	   * @param {Number=} value Value for dimension
	   * @return {Component}
	   * @method dimension
	   */

	  Player.prototype.dimension = function dimension(_dimension, value) {
	    var privDimension = _dimension + '_';

	    if (value === undefined) {
	      return this[privDimension] || 0;
	    }

	    if (value === '') {
	      // If an empty string is given, reset the dimension to be automatic
	      this[privDimension] = undefined;
	    } else {
	      var parsedVal = parseFloat(value);

	      if (isNaN(parsedVal)) {
	        _utilsLogJs2['default'].error('Improper value "' + value + '" supplied for for ' + _dimension);
	        return this;
	      }

	      this[privDimension] = parsedVal;
	    }

	    this.updateStyleEl_();
	    return this;
	  };

	  /**
	   * Add/remove the vjs-fluid class
	   *
	   * @param {Boolean} bool Value of true adds the class, value of false removes the class
	   * @method fluid
	   */

	  Player.prototype.fluid = function fluid(bool) {
	    if (bool === undefined) {
	      return !!this.fluid_;
	    }

	    this.fluid_ = !!bool;

	    if (bool) {
	      this.addClass('vjs-fluid');
	    } else {
	      this.removeClass('vjs-fluid');
	    }
	  };

	  /**
	   * Get/Set the aspect ratio
	   *
	   * @param {String=} ratio Aspect ratio for player
	   * @return aspectRatio
	   * @method aspectRatio
	   */

	  Player.prototype.aspectRatio = function aspectRatio(ratio) {
	    if (ratio === undefined) {
	      return this.aspectRatio_;
	    }

	    // Check for width:height format
	    if (!/^\d+\:\d+$/.test(ratio)) {
	      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
	    }
	    this.aspectRatio_ = ratio;

	    // We're assuming if you set an aspect ratio you want fluid mode,
	    // because in fixed mode you could calculate width and height yourself.
	    this.fluid(true);

	    this.updateStyleEl_();
	  };

	  /**
	   * Update styles of the player element (height, width and aspect ratio)
	   *
	   * @method updateStyleEl_
	   */

	  Player.prototype.updateStyleEl_ = function updateStyleEl_() {
	    if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {
	      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
	      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
	      var techEl = this.tech_ && this.tech_.el();

	      if (techEl) {
	        if (_width >= 0) {
	          techEl.width = _width;
	        }
	        if (_height >= 0) {
	          techEl.height = _height;
	        }
	      }

	      return;
	    }

	    var width = undefined;
	    var height = undefined;
	    var aspectRatio = undefined;
	    var idClass = undefined;

	    // The aspect ratio is either used directly or to calculate width and height.
	    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
	      // Use any aspectRatio that's been specifically set
	      aspectRatio = this.aspectRatio_;
	    } else if (this.videoWidth()) {
	      // Otherwise try to get the aspect ratio from the video metadata
	      aspectRatio = this.videoWidth() + ':' + this.videoHeight();
	    } else {
	      // Or use a default. The video element's is 2:1, but 16:9 is more common.
	      aspectRatio = '16:9';
	    }

	    // Get the ratio as a decimal we can use to calculate dimensions
	    var ratioParts = aspectRatio.split(':');
	    var ratioMultiplier = ratioParts[1] / ratioParts[0];

	    if (this.width_ !== undefined) {
	      // Use any width that's been specifically set
	      width = this.width_;
	    } else if (this.height_ !== undefined) {
	      // Or calulate the width from the aspect ratio if a height has been set
	      width = this.height_ / ratioMultiplier;
	    } else {
	      // Or use the video's metadata, or use the video el's default of 300
	      width = this.videoWidth() || 300;
	    }

	    if (this.height_ !== undefined) {
	      // Use any height that's been specifically set
	      height = this.height_;
	    } else {
	      // Otherwise calculate the height from the ratio and the width
	      height = width * ratioMultiplier;
	    }

	    // Ensure the CSS class is valid by starting with an alpha character
	    if (/^[^a-zA-Z]/.test(this.id())) {
	      idClass = 'dimensions-' + this.id();
	    } else {
	      idClass = this.id() + '-dimensions';
	    }

	    // Ensure the right class is still on the player for the style element
	    this.addClass(idClass);

	    stylesheet.setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.vjs-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
	  };

	  /**
	   * Load the Media Playback Technology (tech)
	   * Load/Create an instance of playback technology including element and API methods
	   * And append playback element in player div.
	   *
	   * @param {String} techName Name of the playback technology
	   * @param {String} source Video source
	   * @method loadTech_
	   * @private
	   */

	  Player.prototype.loadTech_ = function loadTech_(techName, source) {

	    // Pause and remove current playback technology
	    if (this.tech_) {
	      this.unloadTech_();
	    }

	    // get rid of the HTML5 video tag as soon as we are using another tech
	    if (techName !== 'Html5' && this.tag) {
	      _techTechJs2['default'].getTech('Html5').disposeMediaElement(this.tag);
	      this.tag.player = null;
	      this.tag = null;
	    }

	    this.techName_ = techName;

	    // Turn off API access because we're loading a new tech that might load asynchronously
	    this.isReady_ = false;

	    // Grab tech-specific options from player options and add source and parent element to use.
	    var techOptions = _objectAssign2['default']({
	      'nativeControlsForTouch': this.options_.nativeControlsForTouch,
	      'source': source,
	      'playerId': this.id(),
	      'techId': this.id() + '_' + techName + '_api',
	      'videoTracks': this.videoTracks_,
	      'textTracks': this.textTracks_,
	      'audioTracks': this.audioTracks_,
	      'autoplay': this.options_.autoplay,
	      'preload': this.options_.preload,
	      'loop': this.options_.loop,
	      'muted': this.options_.muted,
	      'poster': this.poster(),
	      'language': this.language(),
	      'vtt.js': this.options_['vtt.js']
	    }, this.options_[techName.toLowerCase()]);

	    if (this.tag) {
	      techOptions.tag = this.tag;
	    }

	    if (source) {
	      this.currentType_ = source.type;
	      if (source.src === this.cache_.src && this.cache_.currentTime > 0) {
	        techOptions.startTime = this.cache_.currentTime;
	      }

	      this.cache_.src = source.src;
	    }

	    // Initialize tech instance
	    var techComponent = _techTechJs2['default'].getTech(techName);
	    // Support old behavior of techs being registered as components.
	    // Remove once that deprecated behavior is removed.
	    if (!techComponent) {
	      techComponent = _componentJs2['default'].getComponent(techName);
	    }
	    this.tech_ = new techComponent(techOptions);

	    // player.triggerReady is always async, so don't need this to be async
	    this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);

	    _tracksTextTrackListConverterJs2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_);

	    // Listen to all HTML5-defined events and trigger them on the player
	    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
	    this.on(this.tech_, 'waiting', this.handleTechWaiting_);
	    this.on(this.tech_, 'canplay', this.handleTechCanPlay_);
	    this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);
	    this.on(this.tech_, 'playing', this.handleTechPlaying_);
	    this.on(this.tech_, 'ended', this.handleTechEnded_);
	    this.on(this.tech_, 'seeking', this.handleTechSeeking_);
	    this.on(this.tech_, 'seeked', this.handleTechSeeked_);
	    this.on(this.tech_, 'play', this.handleTechPlay_);
	    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
	    this.on(this.tech_, 'pause', this.handleTechPause_);
	    this.on(this.tech_, 'progress', this.handleTechProgress_);
	    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
	    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
	    this.on(this.tech_, 'error', this.handleTechError_);
	    this.on(this.tech_, 'suspend', this.handleTechSuspend_);
	    this.on(this.tech_, 'abort', this.handleTechAbort_);
	    this.on(this.tech_, 'emptied', this.handleTechEmptied_);
	    this.on(this.tech_, 'stalled', this.handleTechStalled_);
	    this.on(this.tech_, 'loadedmetadata', this.handleTechLoadedMetaData_);
	    this.on(this.tech_, 'loadeddata', this.handleTechLoadedData_);
	    this.on(this.tech_, 'timeupdate', this.handleTechTimeUpdate_);
	    this.on(this.tech_, 'ratechange', this.handleTechRateChange_);
	    this.on(this.tech_, 'volumechange', this.handleTechVolumeChange_);
	    this.on(this.tech_, 'texttrackchange', this.handleTechTextTrackChange_);
	    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
	    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);
	    this.on(this.tech_, 'textdata', this.handleTechTextData_);

	    this.usingNativeControls(this.techGet_('controls'));

	    if (this.controls() && !this.usingNativeControls()) {
	      this.addTechControlsListeners_();
	    }

	    // Add the tech element in the DOM if it was not already there
	    // Make sure to not insert the original video element if using Html5
	    if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {
	      Dom.insertElFirst(this.tech_.el(), this.el());
	    }

	    // Get rid of the original video tag reference after the first tech is loaded
	    if (this.tag) {
	      this.tag.player = null;
	      this.tag = null;
	    }
	  };

	  /**
	   * Unload playback technology
	   *
	   * @method unloadTech_
	   * @private
	   */

	  Player.prototype.unloadTech_ = function unloadTech_() {
	    // Save the current text tracks so that we can reuse the same text tracks with the next tech
	    this.videoTracks_ = this.videoTracks();
	    this.textTracks_ = this.textTracks();
	    this.audioTracks_ = this.audioTracks();
	    this.textTracksJson_ = _tracksTextTrackListConverterJs2['default'].textTracksToJson(this.tech_);

	    this.isReady_ = false;

	    this.tech_.dispose();

	    this.tech_ = false;
	  };

	  /**
	   * Return a reference to the current tech.
	   * It will only return a reference to the tech if given an object with the
	   * `IWillNotUseThisInPlugins` property on it. This is try and prevent misuse
	   * of techs by plugins.
	   *
	   * @param {Object}
	   * @return {Object} The Tech
	   * @method tech
	   */

	  Player.prototype.tech = function tech(safety) {
	    if (safety && safety.IWillNotUseThisInPlugins) {
	      return this.tech_;
	    }
	    var errorText = '\n      Please make sure that you are not using this inside of a plugin.\n      To disable this alert and error, please pass in an object with\n      `IWillNotUseThisInPlugins` to the `tech` method. See\n      https://github.com/videojs/video.js/issues/2617 for more info.\n    ';
	    _globalWindow2['default'].alert(errorText);
	    throw new Error(errorText);
	  };

	  /**
	   * Set up click and touch listeners for the playback element
	   *
	   * On desktops, a click on the video itself will toggle playback,
	   * on a mobile device a click on the video toggles controls.
	   * (toggling controls is done by toggling the user state between active and
	   * inactive)
	   * A tap can signal that a user has become active, or has become inactive
	   * e.g. a quick tap on an iPhone movie should reveal the controls. Another
	   * quick tap should hide them again (signaling the user is in an inactive
	   * viewing state)
	   * In addition to this, we still want the user to be considered inactive after
	   * a few seconds of inactivity.
	   * Note: the only part of iOS interaction we can't mimic with this setup
	   * is a touch and hold on the video element counting as activity in order to
	   * keep the controls showing, but that shouldn't be an issue. A touch and hold
	   * on any controls will still keep the user active
	   *
	   * @private
	   * @method addTechControlsListeners_
	   */

	  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
	    // Make sure to remove all the previous listeners in case we are called multiple times.
	    this.removeTechControlsListeners_();

	    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
	    // trigger mousedown/up.
	    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
	    // Any touch events are set to block the mousedown event from happening
	    this.on(this.tech_, 'mousedown', this.handleTechClick_);

	    // If the controls were hidden we don't want that to change without a tap event
	    // so we'll check if the controls were already showing before reporting user
	    // activity
	    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
	    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
	    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);

	    // The tap listener needs to come after the touchend listener because the tap
	    // listener cancels out any reportedUserActivity when setting userActive(false)
	    this.on(this.tech_, 'tap', this.handleTechTap_);
	  };

	  /**
	   * Remove the listeners used for click and tap controls. This is needed for
	   * toggling to controls disabled, where a tap/touch should do nothing.
	   *
	   * @method removeTechControlsListeners_
	   * @private
	   */

	  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
	    // We don't want to just use `this.off()` because there might be other needed
	    // listeners added by techs that extend this.
	    this.off(this.tech_, 'tap', this.handleTechTap_);
	    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
	    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
	    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
	    this.off(this.tech_, 'mousedown', this.handleTechClick_);
	  };

	  /**
	   * Player waits for the tech to be ready
	   *
	   * @method handleTechReady_
	   * @private
	   */

	  Player.prototype.handleTechReady_ = function handleTechReady_() {
	    this.triggerReady();

	    // Keep the same volume as before
	    if (this.cache_.volume) {
	      this.techCall_('setVolume', this.cache_.volume);
	    }

	    // Look if the tech found a higher resolution poster while loading
	    this.handleTechPosterChange_();

	    // Update the duration if available
	    this.handleTechDurationChange_();

	    // Chrome and Safari both have issues with autoplay.
	    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
	    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
	    // This fixes both issues. Need to wait for API, so it updates displays correctly
	    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {
	      try {
	        delete this.tag.poster; // Chrome Fix. Fixed in Chrome v16.
	      } catch (e) {
	        _utilsLogJs2['default']('deleting tag.poster throws in some browsers', e);
	      }
	      this.play();
	    }
	  };

	  /**
	   * Fired when the user agent begins looking for media data
	   *
	   * @private
	   * @method handleTechLoadStart_
	   */

	  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
	    // TODO: Update to use `emptied` event instead. See #1277.

	    this.removeClass('vjs-ended');

	    // reset the error state
	    this.error(null);

	    // If it's already playing we want to trigger a firstplay event now.
	    // The firstplay event relies on both the play and loadstart events
	    // which can happen in any order for a new source
	    if (!this.paused()) {
	      this.trigger('loadstart');
	      this.trigger('firstplay');
	    } else {
	      // reset the hasStarted state
	      this.hasStarted(false);
	      this.trigger('loadstart');
	    }
	  };

	  /**
	   * Add/remove the vjs-has-started class
	   *
	   * @param {Boolean} hasStarted The value of true adds the class the value of false remove the class
	   * @return {Boolean} Boolean value if has started
	   * @private
	   * @method hasStarted
	   */

	  Player.prototype.hasStarted = function hasStarted(_hasStarted) {
	    if (_hasStarted !== undefined) {
	      // only update if this is a new value
	      if (this.hasStarted_ !== _hasStarted) {
	        this.hasStarted_ = _hasStarted;
	        if (_hasStarted) {
	          this.addClass('vjs-has-started');
	          // trigger the firstplay event if this newly has played
	          this.trigger('firstplay');
	        } else {
	          this.removeClass('vjs-has-started');
	        }
	      }
	      return this;
	    }
	    return !!this.hasStarted_;
	  };

	  /**
	   * Fired whenever the media begins or resumes playback
	   *
	   * @private
	   * @method handleTechPlay_
	   */

	  Player.prototype.handleTechPlay_ = function handleTechPlay_() {
	    this.removeClass('vjs-ended');
	    this.removeClass('vjs-paused');
	    this.addClass('vjs-playing');

	    // hide the poster when the user hits play
	    // https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play
	    this.hasStarted(true);

	    this.trigger('play');
	  };

	  /**
	   * Fired whenever the media begins waiting
	   *
	   * @private
	   * @method handleTechWaiting_
	   */

	  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
	    var _this2 = this;

	    this.addClass('vjs-waiting');
	    this.trigger('waiting');
	    this.one('timeupdate', function () {
	      return _this2.removeClass('vjs-waiting');
	    });
	  };

	  /**
	   * A handler for events that signal that waiting has ended
	   * which is not consistent between browsers. See #1351
	   *
	   * @private
	   * @method handleTechCanPlay_
	   */

	  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
	    this.removeClass('vjs-waiting');
	    this.trigger('canplay');
	  };

	  /**
	   * A handler for events that signal that waiting has ended
	   * which is not consistent between browsers. See #1351
	   *
	   * @private
	   * @method handleTechCanPlayThrough_
	   */

	  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
	    this.removeClass('vjs-waiting');
	    this.trigger('canplaythrough');
	  };

	  /**
	   * A handler for events that signal that waiting has ended
	   * which is not consistent between browsers. See #1351
	   *
	   * @private
	   * @method handleTechPlaying_
	   */

	  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
	    this.removeClass('vjs-waiting');
	    this.trigger('playing');
	  };

	  /**
	   * Fired whenever the player is jumping to a new time
	   *
	   * @private
	   * @method handleTechSeeking_
	   */

	  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
	    this.addClass('vjs-seeking');
	    this.trigger('seeking');
	  };

	  /**
	   * Fired when the player has finished jumping to a new time
	   *
	   * @private
	   * @method handleTechSeeked_
	   */

	  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
	    this.removeClass('vjs-seeking');
	    this.trigger('seeked');
	  };

	  /**
	   * Fired the first time a video is played
	   * Not part of the HLS spec, and we're not sure if this is the best
	   * implementation yet, so use sparingly. If you don't have a reason to
	   * prevent playback, use `myPlayer.one('play');` instead.
	   *
	   * @private
	   * @method handleTechFirstPlay_
	   */

	  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
	    //If the first starttime attribute is specified
	    //then we will start at the given offset in seconds
	    if (this.options_.starttime) {
	      this.currentTime(this.options_.starttime);
	    }

	    this.addClass('vjs-has-started');
	    this.trigger('firstplay');
	  };

	  /**
	   * Fired whenever the media has been paused
	   *
	   * @private
	   * @method handleTechPause_
	   */

	  Player.prototype.handleTechPause_ = function handleTechPause_() {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-paused');
	    this.trigger('pause');
	  };

	  /**
	   * Fired while the user agent is downloading media data
	   *
	   * @private
	   * @method handleTechProgress_
	   */

	  Player.prototype.handleTechProgress_ = function handleTechProgress_() {
	    this.trigger('progress');
	  };

	  /**
	   * Fired when the end of the media resource is reached (currentTime == duration)
	   *
	   * @private
	   * @method handleTechEnded_
	   */

	  Player.prototype.handleTechEnded_ = function handleTechEnded_() {
	    this.addClass('vjs-ended');
	    if (this.options_.loop) {
	      this.currentTime(0);
	      this.play();
	    } else if (!this.paused()) {
	      this.pause();
	    }

	    this.trigger('ended');
	  };

	  /**
	   * Fired when the duration of the media resource is first known or changed
	   *
	   * @private
	   * @method handleTechDurationChange_
	   */

	  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
	    this.duration(this.techGet_('duration'));
	  };

	  /**
	   * Handle a click on the media element to play/pause
	   *
	   * @param {Object=} event Event object
	   * @private
	   * @method handleTechClick_
	   */

	  Player.prototype.handleTechClick_ = function handleTechClick_(event) {
	    // We're using mousedown to detect clicks thanks to Flash, but mousedown
	    // will also be triggered with right-clicks, so we need to prevent that
	    if (event.button !== 0) return;

	    // When controls are disabled a click should not toggle playback because
	    // the click is considered a control
	    if (this.controls()) {
	      if (this.paused()) {
	        this.play();
	      } else {
	        this.pause();
	      }
	    }
	  };

	  /**
	   * Handle a tap on the media element. It will toggle the user
	   * activity state, which hides and shows the controls.
	   *
	   * @private
	   * @method handleTechTap_
	   */

	  Player.prototype.handleTechTap_ = function handleTechTap_() {
	    this.userActive(!this.userActive());
	  };

	  /**
	   * Handle touch to start
	   *
	   * @private
	   * @method handleTechTouchStart_
	   */

	  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
	    this.userWasActive = this.userActive();
	  };

	  /**
	   * Handle touch to move
	   *
	   * @private
	   * @method handleTechTouchMove_
	   */

	  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
	    if (this.userWasActive) {
	      this.reportUserActivity();
	    }
	  };

	  /**
	   * Handle touch to end
	   *
	   * @private
	   * @method handleTechTouchEnd_
	   */

	  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
	    // Stop the mouse events from also happening
	    event.preventDefault();
	  };

	  /**
	   * Fired when the player switches in or out of fullscreen mode
	   *
	   * @private
	   * @method handleFullscreenChange_
	   */

	  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
	    if (this.isFullscreen()) {
	      this.addClass('vjs-fullscreen');
	    } else {
	      this.removeClass('vjs-fullscreen');
	    }
	  };

	  /**
	   * native click events on the SWF aren't triggered on IE11, Win8.1RT
	   * use stageclick events triggered from inside the SWF instead
	   *
	   * @private
	   * @method handleStageClick_
	   */

	  Player.prototype.handleStageClick_ = function handleStageClick_() {
	    this.reportUserActivity();
	  };

	  /**
	   * Handle Tech Fullscreen Change
	   *
	   * @private
	   * @method handleTechFullscreenChange_
	   */

	  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
	    if (data) {
	      this.isFullscreen(data.isFullscreen);
	    }
	    this.trigger('fullscreenchange');
	  };

	  /**
	   * Fires when an error occurred during the loading of an audio/video
	   *
	   * @private
	   * @method handleTechError_
	   */

	  Player.prototype.handleTechError_ = function handleTechError_() {
	    var error = this.tech_.error();
	    this.error(error);
	  };

	  /**
	   * Fires when the browser is intentionally not getting media data
	   *
	   * @private
	   * @method handleTechSuspend_
	   */

	  Player.prototype.handleTechSuspend_ = function handleTechSuspend_() {
	    this.trigger('suspend');
	  };

	  /**
	   * Fires when the loading of an audio/video is aborted
	   *
	   * @private
	   * @method handleTechAbort_
	   */

	  Player.prototype.handleTechAbort_ = function handleTechAbort_() {
	    this.trigger('abort');
	  };

	  /**
	   * Fires when the current playlist is empty
	   *
	   * @private
	   * @method handleTechEmptied_
	   */

	  Player.prototype.handleTechEmptied_ = function handleTechEmptied_() {
	    this.trigger('emptied');
	  };

	  /**
	   * Fires when the browser is trying to get media data, but data is not available
	   *
	   * @private
	   * @method handleTechStalled_
	   */

	  Player.prototype.handleTechStalled_ = function handleTechStalled_() {
	    this.trigger('stalled');
	  };

	  /**
	   * Fires when the browser has loaded meta data for the audio/video
	   *
	   * @private
	   * @method handleTechLoadedMetaData_
	   */

	  Player.prototype.handleTechLoadedMetaData_ = function handleTechLoadedMetaData_() {
	    this.trigger('loadedmetadata');
	  };

	  Player.prototype.handleTechTextData_ = function handleTechTextData_() {
	    var data = null;
	    if (arguments.length > 1) {
	      data = arguments[1];
	    }
	    this.trigger('textdata', data);
	  };

	  /**
	   * Fires when the browser has loaded the current frame of the audio/video
	   *
	   * @private
	   * @method handleTechLoadedData_
	   */

	  Player.prototype.handleTechLoadedData_ = function handleTechLoadedData_() {
	    this.trigger('loadeddata');
	  };

	  /**
	   * Fires when the current playback position has changed
	   *
	   * @private
	   * @method handleTechTimeUpdate_
	   */

	  Player.prototype.handleTechTimeUpdate_ = function handleTechTimeUpdate_() {
	    this.trigger('timeupdate');
	  };

	  /**
	   * Fires when the playing speed of the audio/video is changed
	   *
	   * @private
	   * @method handleTechRateChange_
	   */

	  Player.prototype.handleTechRateChange_ = function handleTechRateChange_() {
	    this.trigger('ratechange');
	  };

	  /**
	   * Fires when the volume has been changed
	   *
	   * @private
	   * @method handleTechVolumeChange_
	   */

	  Player.prototype.handleTechVolumeChange_ = function handleTechVolumeChange_() {
	    this.trigger('volumechange');
	  };

	  /**
	   * Fires when the text track has been changed
	   *
	   * @private
	   * @method handleTechTextTrackChange_
	   */

	  Player.prototype.handleTechTextTrackChange_ = function handleTechTextTrackChange_() {
	    this.trigger('texttrackchange');
	  };

	  /**
	   * Get object for cached values.
	   *
	   * @return {Object}
	   * @method getCache
	   */

	  Player.prototype.getCache = function getCache() {
	    return this.cache_;
	  };

	  /**
	   * Pass values to the playback tech
	   *
	   * @param {String=} method Method
	   * @param {Object=} arg Argument
	   * @private
	   * @method techCall_
	   */

	  Player.prototype.techCall_ = function techCall_(method, arg) {
	    // If it's not ready yet, call method when it is
	    if (this.tech_ && !this.tech_.isReady_) {
	      this.tech_.ready(function () {
	        this[method](arg);
	      }, true);

	      // Otherwise call method now
	    } else {
	        try {
	          this.tech_ && this.tech_[method](arg);
	        } catch (e) {
	          _utilsLogJs2['default'](e);
	          throw e;
	        }
	      }
	  };

	  /**
	   * Get calls can't wait for the tech, and sometimes don't need to.
	   *
	   * @param {String} method Tech method
	   * @return {Method}
	   * @private
	   * @method techGet_
	   */

	  Player.prototype.techGet_ = function techGet_(method) {
	    if (this.tech_ && this.tech_.isReady_) {

	      // Flash likes to die and reload when you hide or reposition it.
	      // In these cases the object methods go away and we get errors.
	      // When that happens we'll catch the errors and inform tech that it's not ready any more.
	      try {
	        return this.tech_[method]();
	      } catch (e) {
	        // When building additional tech libs, an expected method may not be defined yet
	        if (this.tech_[method] === undefined) {
	          _utilsLogJs2['default']('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);
	        } else {
	          // When a method isn't available on the object it throws a TypeError
	          if (e.name === 'TypeError') {
	            _utilsLogJs2['default']('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
	            this.tech_.isReady_ = false;
	          } else {
	            _utilsLogJs2['default'](e);
	          }
	        }
	        throw e;
	      }
	    }

	    return;
	  };

	  /**
	   * start media playback
	   * ```js
	   *     myPlayer.play();
	   * ```
	   *
	   * @return {Player} self
	   * @method play
	   */

	  Player.prototype.play = function play() {
	    // Only calls the tech's play if we already have a src loaded
	    if (this.src() || this.currentSrc()) {
	      this.techCall_('play');
	    } else {
	      this.tech_.one('loadstart', function () {
	        this.play();
	      });
	    }

	    return this;
	  };

	  /**
	   * Pause the video playback
	   * ```js
	   *     myPlayer.pause();
	   * ```
	   *
	   * @return {Player} self
	   * @method pause
	   */

	  Player.prototype.pause = function pause() {
	    this.techCall_('pause');
	    return this;
	  };

	  /**
	   * Check if the player is paused
	   * ```js
	   *     var isPaused = myPlayer.paused();
	   *     var isPlaying = !myPlayer.paused();
	   * ```
	   *
	   * @return {Boolean} false if the media is currently playing, or true otherwise
	   * @method paused
	   */

	  Player.prototype.paused = function paused() {
	    // The initial state of paused should be true (in Safari it's actually false)
	    return this.techGet_('paused') === false ? false : true;
	  };

	  /**
	   * Returns whether or not the user is "scrubbing". Scrubbing is when the user
	   * has clicked the progress bar handle and is dragging it along the progress bar.
	   *
	   * @param  {Boolean} isScrubbing   True/false the user is scrubbing
	   * @return {Boolean}               The scrubbing status when getting
	   * @return {Object}                The player when setting
	   * @method scrubbing
	   */

	  Player.prototype.scrubbing = function scrubbing(isScrubbing) {
	    if (isScrubbing !== undefined) {
	      this.scrubbing_ = !!isScrubbing;

	      if (isScrubbing) {
	        this.addClass('vjs-scrubbing');
	      } else {
	        this.removeClass('vjs-scrubbing');
	      }

	      return this;
	    }

	    return this.scrubbing_;
	  };

	  /**
	   * Get or set the current time (in seconds)
	   * ```js
	   *     // get
	   *     var whereYouAt = myPlayer.currentTime();
	   *     // set
	   *     myPlayer.currentTime(120); // 2 minutes into the video
	   * ```
	   *
	   * @param  {Number|String=} seconds The time to seek to
	   * @return {Number}        The time in seconds, when not setting
	   * @return {Player}    self, when the current time is set
	   * @method currentTime
	   */

	  Player.prototype.currentTime = function currentTime(seconds) {
	    if (seconds !== undefined) {

	      this.techCall_('setCurrentTime', seconds);

	      return this;
	    }

	    // cache last currentTime and return. default to 0 seconds
	    //
	    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
	    // currentTime when scrubbing, but may not provide much performance benefit afterall.
	    // Should be tested. Also something has to read the actual current time or the cache will
	    // never get updated.
	    return this.cache_.currentTime = this.techGet_('currentTime') || 0;
	  };

	  /**
	   * Normally gets the length in time of the video in seconds;
	   * in all but the rarest use cases an argument will NOT be passed to the method
	   * ```js
	   *     var lengthOfVideo = myPlayer.duration();
	   * ```
	   * **NOTE**: The video must have started loading before the duration can be
	   * known, and in the case of Flash, may not be known until the video starts
	   * playing.
	   *
	   * @param {Number} seconds Duration when setting
	   * @return {Number} The duration of the video in seconds when getting
	   * @method duration
	   */

	  Player.prototype.duration = function duration(seconds) {
	    if (seconds === undefined) {
	      return this.cache_.duration || 0;
	    }

	    seconds = parseFloat(seconds) || 0;

	    // Standardize on Inifity for signaling video is live
	    if (seconds < 0) {
	      seconds = Infinity;
	    }

	    if (seconds !== this.cache_.duration) {
	      // Cache the last set value for optimized scrubbing (esp. Flash)
	      this.cache_.duration = seconds;

	      if (seconds === Infinity) {
	        this.addClass('vjs-live');
	      } else {
	        this.removeClass('vjs-live');
	      }

	      this.trigger('durationchange');
	    }

	    return this;
	  };

	  /**
	   * Calculates how much time is left.
	   * ```js
	   *     var timeLeft = myPlayer.remainingTime();
	   * ```
	   * Not a native video element function, but useful
	   *
	   * @return {Number} The time remaining in seconds
	   * @method remainingTime
	   */

	  Player.prototype.remainingTime = function remainingTime() {
	    return this.duration() - this.currentTime();
	  };

	  // http://dev.w3.org/html5/spec/video.html#dom-media-buffered
	  // Buffered returns a timerange object.
	  // Kind of like an array of portions of the video that have been downloaded.

	  /**
	   * Get a TimeRange object with the times of the video that have been downloaded
	   * If you just want the percent of the video that's been downloaded,
	   * use bufferedPercent.
	   * ```js
	   *     // Number of different ranges of time have been buffered. Usually 1.
	   *     numberOfRanges = bufferedTimeRange.length,
	   *     // Time in seconds when the first range starts. Usually 0.
	   *     firstRangeStart = bufferedTimeRange.start(0),
	   *     // Time in seconds when the first range ends
	   *     firstRangeEnd = bufferedTimeRange.end(0),
	   *     // Length in seconds of the first time range
	   *     firstRangeLength = firstRangeEnd - firstRangeStart;
	   * ```
	   *
	   * @return {Object} A mock TimeRange object (following HTML spec)
	   * @method buffered
	   */

	  Player.prototype.buffered = function buffered() {
	    var buffered = this.techGet_('buffered');

	    if (!buffered || !buffered.length) {
	      buffered = _utilsTimeRangesJs.createTimeRange(0, 0);
	    }

	    return buffered;
	  };

	  /**
	   * Get the percent (as a decimal) of the video that's been downloaded
	   * ```js
	   *     var howMuchIsDownloaded = myPlayer.bufferedPercent();
	   * ```
	   * 0 means none, 1 means all.
	   * (This method isn't in the HTML5 spec, but it's very convenient)
	   *
	   * @return {Number} A decimal between 0 and 1 representing the percent
	   * @method bufferedPercent
	   */

	  Player.prototype.bufferedPercent = function bufferedPercent() {
	    return _utilsBufferJs.bufferedPercent(this.buffered(), this.duration());
	  };

	  /**
	   * Get the ending time of the last buffered time range
	   * This is used in the progress bar to encapsulate all time ranges.
	   *
	   * @return {Number} The end of the last buffered time range
	   * @method bufferedEnd
	   */

	  Player.prototype.bufferedEnd = function bufferedEnd() {
	    var buffered = this.buffered(),
	        duration = this.duration(),
	        end = buffered.end(buffered.length - 1);

	    if (end > duration) {
	      end = duration;
	    }

	    return end;
	  };

	  /**
	   * Get or set the current volume of the media
	   * ```js
	   *     // get
	   *     var howLoudIsIt = myPlayer.volume();
	   *     // set
	   *     myPlayer.volume(0.5); // Set volume to half
	   * ```
	   * 0 is off (muted), 1.0 is all the way up, 0.5 is half way.
	   *
	   * @param  {Number} percentAsDecimal The new volume as a decimal percent
	   * @return {Number}              The current volume when getting
	   * @return {Player}              self when setting
	   * @method volume
	   */

	  Player.prototype.volume = function volume(percentAsDecimal) {
	    var vol = undefined;

	    if (percentAsDecimal !== undefined) {
	      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal))); // Force value to between 0 and 1
	      this.cache_.volume = vol;
	      this.techCall_('setVolume', vol);

	      return this;
	    }

	    // Default to 1 when returning current volume.
	    vol = parseFloat(this.techGet_('volume'));
	    return isNaN(vol) ? 1 : vol;
	  };

	  /**
	   * Get the current muted state, or turn mute on or off
	   * ```js
	   *     // get
	   *     var isVolumeMuted = myPlayer.muted();
	   *     // set
	   *     myPlayer.muted(true); // mute the volume
	   * ```
	   *
	   * @param  {Boolean=} muted True to mute, false to unmute
	   * @return {Boolean} True if mute is on, false if not when getting
	   * @return {Player} self when setting mute
	   * @method muted
	   */

	  Player.prototype.muted = function muted(_muted) {
	    if (_muted !== undefined) {
	      this.techCall_('setMuted', _muted);
	      return this;
	    }
	    return this.techGet_('muted') || false; // Default to false
	  };

	  // Check if current tech can support native fullscreen
	  // (e.g. with built in controls like iOS, so not our flash swf)
	  /**
	   * Check to see if fullscreen is supported
	   *
	   * @return {Boolean}
	   * @method supportsFullScreen
	   */

	  Player.prototype.supportsFullScreen = function supportsFullScreen() {
	    return this.techGet_('supportsFullScreen') || false;
	  };

	  /**
	   * Check if the player is in fullscreen mode
	   * ```js
	   *     // get
	   *     var fullscreenOrNot = myPlayer.isFullscreen();
	   *     // set
	   *     myPlayer.isFullscreen(true); // tell the player it's in fullscreen
	   * ```
	   * NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
	   * property and instead document.fullscreenElement is used. But isFullscreen is
	   * still a valuable property for internal player workings.
	   *
	   * @param  {Boolean=} isFS Update the player's fullscreen state
	   * @return {Boolean} true if fullscreen false if not when getting
	   * @return {Player} self when setting
	   * @method isFullscreen
	   */

	  Player.prototype.isFullscreen = function isFullscreen(isFS) {
	    if (isFS !== undefined) {
	      this.isFullscreen_ = !!isFS;
	      return this;
	    }
	    return !!this.isFullscreen_;
	  };

	  /**
	   * Increase the size of the video to full screen
	   * ```js
	   *     myPlayer.requestFullscreen();
	   * ```
	   * In some browsers, full screen is not supported natively, so it enters
	   * "full window mode", where the video fills the browser window.
	   * In browsers and devices that support native full screen, sometimes the
	   * browser's default controls will be shown, and not the Video.js custom skin.
	   * This includes most mobile devices (iOS, Android) and older versions of
	   * Safari.
	   *
	   * @return {Player} self
	   * @method requestFullscreen
	   */

	  Player.prototype.requestFullscreen = function requestFullscreen() {
	    var fsApi = _fullscreenApiJs2['default'];

	    this.isFullscreen(true);

	    if (fsApi.requestFullscreen) {
	      // the browser supports going fullscreen at the element level so we can
	      // take the controls fullscreen as well as the video

	      // Trigger fullscreenchange event after change
	      // We have to specifically add this each time, and remove
	      // when canceling fullscreen. Otherwise if there's multiple
	      // players on a page, they would all be reacting to the same fullscreen
	      // events
	      Events.on(_globalDocument2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {
	        this.isFullscreen(_globalDocument2['default'][fsApi.fullscreenElement]);

	        // If cancelling fullscreen, remove event listener.
	        if (this.isFullscreen() === false) {
	          Events.off(_globalDocument2['default'], fsApi.fullscreenchange, documentFullscreenChange);
	        }

	        this.trigger('fullscreenchange');
	      }));

	      this.el_[fsApi.requestFullscreen]();
	    } else if (this.tech_.supportsFullScreen()) {
	      // we can't take the video.js controls fullscreen but we can go fullscreen
	      // with native controls
	      this.techCall_('enterFullScreen');
	    } else {
	      // fullscreen isn't supported so we'll just stretch the video element to
	      // fill the viewport
	      this.enterFullWindow();
	      this.trigger('fullscreenchange');
	    }

	    return this;
	  };

	  /**
	   * Return the video to its normal size after having been in full screen mode
	   * ```js
	   *     myPlayer.exitFullscreen();
	   * ```
	   *
	   * @return {Player} self
	   * @method exitFullscreen
	   */

	  Player.prototype.exitFullscreen = function exitFullscreen() {
	    var fsApi = _fullscreenApiJs2['default'];
	    this.isFullscreen(false);

	    // Check for browser element fullscreen support
	    if (fsApi.requestFullscreen) {
	      _globalDocument2['default'][fsApi.exitFullscreen]();
	    } else if (this.tech_.supportsFullScreen()) {
	      this.techCall_('exitFullScreen');
	    } else {
	      this.exitFullWindow();
	      this.trigger('fullscreenchange');
	    }

	    return this;
	  };

	  /**
	   * When fullscreen isn't supported we can stretch the video container to as wide as the browser will let us.
	   *
	   * @method enterFullWindow
	   */

	  Player.prototype.enterFullWindow = function enterFullWindow() {
	    this.isFullWindow = true;

	    // Storing original doc overflow value to return to when fullscreen is off
	    this.docOrigOverflow = _globalDocument2['default'].documentElement.style.overflow;

	    // Add listener for esc key to exit fullscreen
	    Events.on(_globalDocument2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey));

	    // Hide any scroll bars
	    _globalDocument2['default'].documentElement.style.overflow = 'hidden';

	    // Apply fullscreen styles
	    Dom.addElClass(_globalDocument2['default'].body, 'vjs-full-window');

	    this.trigger('enterFullWindow');
	  };

	  /**
	   * Check for call to either exit full window or full screen on ESC key
	   *
	   * @param {String} event Event to check for key press
	   * @method fullWindowOnEscKey
	   */

	  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
	    if (event.keyCode === 27) {
	      if (this.isFullscreen() === true) {
	        this.exitFullscreen();
	      } else {
	        this.exitFullWindow();
	      }
	    }
	  };

	  /**
	   * Exit full window
	   *
	   * @method exitFullWindow
	   */

	  Player.prototype.exitFullWindow = function exitFullWindow() {
	    this.isFullWindow = false;
	    Events.off(_globalDocument2['default'], 'keydown', this.fullWindowOnEscKey);

	    // Unhide scroll bars.
	    _globalDocument2['default'].documentElement.style.overflow = this.docOrigOverflow;

	    // Remove fullscreen styles
	    Dom.removeElClass(_globalDocument2['default'].body, 'vjs-full-window');

	    // Resize the box, controller, and poster to original sizes
	    // this.positionAll();
	    this.trigger('exitFullWindow');
	  };

	  /**
	   * Check whether the player can play a given mimetype
	   *
	   * @param {String} type The mimetype to check
	   * @return {String} 'probably', 'maybe', or '' (empty string)
	   * @method canPlayType
	   */

	  Player.prototype.canPlayType = function canPlayType(type) {
	    var can = undefined;

	    // Loop through each playback technology in the options order
	    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
	      var techName = _utilsToTitleCaseJs2['default'](j[i]);
	      var tech = _techTechJs2['default'].getTech(techName);

	      // Support old behavior of techs being registered as components.
	      // Remove once that deprecated behavior is removed.
	      if (!tech) {
	        tech = _componentJs2['default'].getComponent(techName);
	      }

	      // Check if the current tech is defined before continuing
	      if (!tech) {
	        _utilsLogJs2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
	        continue;
	      }

	      // Check if the browser supports this technology
	      if (tech.isSupported()) {
	        can = tech.canPlayType(type);

	        if (can) {
	          return can;
	        }
	      }
	    }

	    return '';
	  };

	  /**
	   * Select source based on tech-order or source-order
	   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
	   * defaults to tech-order selection
	   *
	   * @param {Array} sources The sources for a media asset
	   * @return {Object|Boolean} Object of source and tech order, otherwise false
	   * @method selectSource
	   */

	  Player.prototype.selectSource = function selectSource(sources) {
	    var _this3 = this;

	    // Get only the techs specified in `techOrder` that exist and are supported by the
	    // current platform
	    var techs = this.options_.techOrder.map(_utilsToTitleCaseJs2['default']).map(function (techName) {
	      // `Component.getComponent(...)` is for support of old behavior of techs
	      // being registered as components.
	      // Remove once that deprecated behavior is removed.
	      return [techName, _techTechJs2['default'].getTech(techName) || _componentJs2['default'].getComponent(techName)];
	    }).filter(function (_ref) {
	      var techName = _ref[0];
	      var tech = _ref[1];

	      // Check if the current tech is defined before continuing
	      if (tech) {
	        // Check if the browser supports this technology
	        return tech.isSupported();
	      }

	      _utilsLogJs2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
	      return false;
	    });

	    // Iterate over each `innerArray` element once per `outerArray` element and execute
	    // `tester` with both. If `tester` returns a non-falsy value, exit early and return
	    // that value.
	    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
	      var found = undefined;

	      outerArray.some(function (outerChoice) {
	        return innerArray.some(function (innerChoice) {
	          found = tester(outerChoice, innerChoice);

	          if (found) {
	            return true;
	          }
	        });
	      });

	      return found;
	    };

	    var foundSourceAndTech = undefined;
	    var flip = function flip(fn) {
	      return function (a, b) {
	        return fn(b, a);
	      };
	    };
	    var finder = function finder(_ref2, source) {
	      var techName = _ref2[0];
	      var tech = _ref2[1];

	      if (tech.canPlaySource(source, _this3.options_[techName.toLowerCase()])) {
	        return { source: source, tech: techName };
	      }
	    };

	    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
	    // to select from them based on their priority.
	    if (this.options_.sourceOrder) {
	      // Source-first ordering
	      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
	    } else {
	      // Tech-first ordering
	      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
	    }

	    return foundSourceAndTech || false;
	  };

	  /**
	   * The source function updates the video source
	   * There are three types of variables you can pass as the argument.
	   * **URL String**: A URL to the the video file. Use this method if you are sure
	   * the current playback technology (HTML5/Flash) can support the source you
	   * provide. Currently only MP4 files can be used in both HTML5 and Flash.
	   * ```js
	   *     myPlayer.src("http://www.example.com/path/to/video.mp4");
	   * ```
	   * **Source Object (or element):* * A javascript object containing information
	   * about the source file. Use this method if you want the player to determine if
	   * it can support the file using the type information.
	   * ```js
	   *     myPlayer.src({ type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" });
	   * ```
	   * **Array of Source Objects:* * To provide multiple versions of the source so
	   * that it can be played using HTML5 across browsers you can use an array of
	   * source objects. Video.js will detect which version is supported and load that
	   * file.
	   * ```js
	   *     myPlayer.src([
	   *       { type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" },
	   *       { type: "video/webm", src: "http://www.example.com/path/to/video.webm" },
	   *       { type: "video/ogg", src: "http://www.example.com/path/to/video.ogv" }
	   *     ]);
	   * ```
	   *
	   * @param  {String|Object|Array=} source The source URL, object, or array of sources
	   * @return {String} The current video source when getting
	   * @return {String} The player when setting
	   * @method src
	   */

	  Player.prototype.src = function src(source) {
	    if (source === undefined) {
	      return this.techGet_('src');
	    }

	    var currentTech = _techTechJs2['default'].getTech(this.techName_);
	    // Support old behavior of techs being registered as components.
	    // Remove once that deprecated behavior is removed.
	    if (!currentTech) {
	      currentTech = _componentJs2['default'].getComponent(this.techName_);
	    }

	    // case: Array of source objects to choose from and pick the best to play
	    if (Array.isArray(source)) {
	      this.sourceList_(source);

	      // case: URL String (http://myvideo...)
	    } else if (typeof source === 'string') {
	        // create a source object from the string
	        this.src({ src: source });

	        // case: Source object { src: '', type: '' ... }
	      } else if (source instanceof Object) {
	          // check if the source has a type and the loaded tech cannot play the source
	          // if there's no type we'll just try the current tech
	          if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {
	            // create a source list with the current source and send through
	            // the tech loop to check for a compatible technology
	            this.sourceList_([source]);
	          } else {
	            this.cache_.src = source.src;
	            this.currentType_ = source.type || '';

	            // wait until the tech is ready to set the source
	            this.ready(function () {

	              // The setSource tech method was added with source handlers
	              // so older techs won't support it
	              // We need to check the direct prototype for the case where subclasses
	              // of the tech do not support source handlers
	              if (currentTech.prototype.hasOwnProperty('setSource')) {
	                this.techCall_('setSource', source);
	              } else {
	                this.techCall_('src', source.src);
	              }

	              if (this.options_.preload === 'auto') {
	                this.load();
	              }

	              if (this.options_.autoplay) {
	                this.play();
	              }

	              // Set the source synchronously if possible (#2326)
	            }, true);
	          }
	        }

	    return this;
	  };

	  /**
	   * Handle an array of source objects
	   *
	   * @param  {Array} sources Array of source objects
	   * @private
	   * @method sourceList_
	   */

	  Player.prototype.sourceList_ = function sourceList_(sources) {
	    var sourceTech = this.selectSource(sources);

	    if (sourceTech) {
	      if (sourceTech.tech === this.techName_) {
	        // if this technology is already loaded, set the source
	        this.src(sourceTech.source);
	      } else {
	        // load this technology with the chosen source
	        this.loadTech_(sourceTech.tech, sourceTech.source);
	      }
	    } else {
	      // We need to wrap this in a timeout to give folks a chance to add error event handlers
	      this.setTimeout(function () {
	        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
	      }, 0);

	      // we could not find an appropriate tech, but let's still notify the delegate that this is it
	      // this needs a better comment about why this is needed
	      this.triggerReady();
	    }
	  };

	  /**
	   * Begin loading the src data.
	   *
	   * @return {Player} Returns the player
	   * @method load
	   */

	  Player.prototype.load = function load() {
	    this.techCall_('load');
	    return this;
	  };

	  /**
	   * Reset the player. Loads the first tech in the techOrder,
	   * and calls `reset` on the tech`.
	   *
	   * @return {Player} Returns the player
	   * @method reset
	   */

	  Player.prototype.reset = function reset() {
	    this.loadTech_(_utilsToTitleCaseJs2['default'](this.options_.techOrder[0]), null);
	    this.techCall_('reset');
	    return this;
	  };

	  /**
	   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
	   * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
	   *
	   * @return {String} The current source
	   * @method currentSrc
	   */

	  Player.prototype.currentSrc = function currentSrc() {
	    return this.techGet_('currentSrc') || this.cache_.src || '';
	  };

	  /**
	   * Get the current source type e.g. video/mp4
	   * This can allow you rebuild the current source object so that you could load the same
	   * source and tech later
	   *
	   * @return {String} The source MIME type
	   * @method currentType
	   */

	  Player.prototype.currentType = function currentType() {
	    return this.currentType_ || '';
	  };

	  /**
	   * Get or set the preload attribute
	   *
	   * @param {Boolean} value Boolean to determine if preload should be used
	   * @return {String} The preload attribute value when getting
	   * @return {Player} Returns the player when setting
	   * @method preload
	   */

	  Player.prototype.preload = function preload(value) {
	    if (value !== undefined) {
	      this.techCall_('setPreload', value);
	      this.options_.preload = value;
	      return this;
	    }
	    return this.techGet_('preload');
	  };

	  /**
	   * Get or set the autoplay attribute.
	   *
	   * @param {Boolean} value Boolean to determine if video should autoplay
	   * @return {String} The autoplay attribute value when getting
	   * @return {Player} Returns the player when setting
	   * @method autoplay
	   */

	  Player.prototype.autoplay = function autoplay(value) {
	    if (value !== undefined) {
	      this.techCall_('setAutoplay', value);
	      this.options_.autoplay = value;
	      return this;
	    }
	    return this.techGet_('autoplay', value);
	  };

	  /**
	   * Get or set the loop attribute on the video element.
	   *
	   * @param {Boolean} value Boolean to determine if video should loop
	   * @return {String} The loop attribute value when getting
	   * @return {Player} Returns the player when setting
	   * @method loop
	   */

	  Player.prototype.loop = function loop(value) {
	    if (value !== undefined) {
	      this.techCall_('setLoop', value);
	      this.options_['loop'] = value;
	      return this;
	    }
	    return this.techGet_('loop');
	  };

	  /**
	   * Get or set the poster image source url
	   *
	   * ##### EXAMPLE:
	   * ```js
	   *     // get
	   *     var currentPoster = myPlayer.poster();
	   *     // set
	   *     myPlayer.poster('http://example.com/myImage.jpg');
	   * ```
	   *
	   * @param  {String=} src Poster image source URL
	   * @return {String} poster URL when getting
	   * @return {Player} self when setting
	   * @method poster
	   */

	  Player.prototype.poster = function poster(src) {
	    if (src === undefined) {
	      return this.poster_;
	    }

	    // The correct way to remove a poster is to set as an empty string
	    // other falsey values will throw errors
	    if (!src) {
	      src = '';
	    }

	    // update the internal poster variable
	    this.poster_ = src;

	    // update the tech's poster
	    this.techCall_('setPoster', src);

	    // alert components that the poster has been set
	    this.trigger('posterchange');

	    return this;
	  };

	  /**
	   * Some techs (e.g. YouTube) can provide a poster source in an
	   * asynchronous way. We want the poster component to use this
	   * poster source so that it covers up the tech's controls.
	   * (YouTube's play button). However we only want to use this
	   * soruce if the player user hasn't set a poster through
	   * the normal APIs.
	   *
	   * @private
	   * @method handleTechPosterChange_
	   */

	  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
	    if (!this.poster_ && this.tech_ && this.tech_.poster) {
	      this.poster_ = this.tech_.poster() || '';

	      // Let components know the poster has changed
	      this.trigger('posterchange');
	    }
	  };

	  /**
	   * Get or set whether or not the controls are showing.
	   *
	   * @param  {Boolean} bool Set controls to showing or not
	   * @return {Boolean}    Controls are showing
	   * @method controls
	   */

	  Player.prototype.controls = function controls(bool) {
	    if (bool !== undefined) {
	      bool = !!bool; // force boolean
	      // Don't trigger a change event unless it actually changed
	      if (this.controls_ !== bool) {
	        this.controls_ = bool;

	        if (this.usingNativeControls()) {
	          this.techCall_('setControls', bool);
	        }

	        if (bool) {
	          this.removeClass('vjs-controls-disabled');
	          this.addClass('vjs-controls-enabled');
	          this.trigger('controlsenabled');

	          if (!this.usingNativeControls()) {
	            this.addTechControlsListeners_();
	          }
	        } else {
	          this.removeClass('vjs-controls-enabled');
	          this.addClass('vjs-controls-disabled');
	          this.trigger('controlsdisabled');

	          if (!this.usingNativeControls()) {
	            this.removeTechControlsListeners_();
	          }
	        }
	      }
	      return this;
	    }
	    return !!this.controls_;
	  };

	  /**
	   * Toggle native controls on/off. Native controls are the controls built into
	   * devices (e.g. default iPhone controls), Flash, or other techs
	   * (e.g. Vimeo Controls)
	   * **This should only be set by the current tech, because only the tech knows
	   * if it can support native controls**
	   *
	   * @param  {Boolean} bool    True signals that native controls are on
	   * @return {Player}      Returns the player
	   * @private
	   * @method usingNativeControls
	   */

	  Player.prototype.usingNativeControls = function usingNativeControls(bool) {
	    if (bool !== undefined) {
	      bool = !!bool; // force boolean
	      // Don't trigger a change event unless it actually changed
	      if (this.usingNativeControls_ !== bool) {
	        this.usingNativeControls_ = bool;
	        if (bool) {
	          this.addClass('vjs-using-native-controls');

	          /**
	            * player is using the native device controls
	           *
	            * @event usingnativecontrols
	            * @memberof Player
	            * @instance
	            * @private
	            */
	          this.trigger('usingnativecontrols');
	        } else {
	          this.removeClass('vjs-using-native-controls');

	          /**
	            * player is using the custom HTML controls
	           *
	            * @event usingcustomcontrols
	            * @memberof Player
	            * @instance
	            * @private
	            */
	          this.trigger('usingcustomcontrols');
	        }
	      }
	      return this;
	    }
	    return !!this.usingNativeControls_;
	  };

	  /**
	   * Set or get the current MediaError
	   *
	   * @param  {*} err A MediaError or a String/Number to be turned into a MediaError
	   * @return {MediaError|null}     when getting
	   * @return {Player}              when setting
	   * @method error
	   */

	  Player.prototype.error = function error(err) {
	    if (err === undefined) {
	      return this.error_ || null;
	    }

	    // restoring to default
	    if (err === null) {
	      this.error_ = err;
	      this.removeClass('vjs-error');
	      if (this.errorDisplay) {
	        this.errorDisplay.close();
	      }
	      return this;
	    }

	    this.error_ = new _mediaErrorJs2['default'](err);

	    // add the vjs-error classname to the player
	    this.addClass('vjs-error');

	    // log the name of the error type and any message
	    // ie8 just logs "[object object]" if you just log the error object
	    _utilsLogJs2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaErrorJs2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

	    // fire an error event on the player
	    this.trigger('error');

	    return this;
	  };

	  /**
	   * Returns whether or not the player is in the "ended" state.
	   *
	   * @return {Boolean} True if the player is in the ended state, false if not.
	   * @method ended
	   */

	  Player.prototype.ended = function ended() {
	    return this.techGet_('ended');
	  };

	  /**
	   * Returns whether or not the player is in the "seeking" state.
	   *
	   * @return {Boolean} True if the player is in the seeking state, false if not.
	   * @method seeking
	   */

	  Player.prototype.seeking = function seeking() {
	    return this.techGet_('seeking');
	  };

	  /**
	   * Returns the TimeRanges of the media that are currently available
	   * for seeking to.
	   *
	   * @return {TimeRanges} the seekable intervals of the media timeline
	   * @method seekable
	   */

	  Player.prototype.seekable = function seekable() {
	    return this.techGet_('seekable');
	  };

	  /**
	   * Report user activity
	   *
	   * @param {Object} event Event object
	   * @method reportUserActivity
	   */

	  Player.prototype.reportUserActivity = function reportUserActivity(event) {
	    this.userActivity_ = true;
	  };

	  /**
	   * Get/set if user is active
	   *
	   * @param {Boolean} bool Value when setting
	   * @return {Boolean} Value if user is active user when getting
	   * @method userActive
	   */

	  Player.prototype.userActive = function userActive(bool) {
	    if (bool !== undefined) {
	      bool = !!bool;
	      if (bool !== this.userActive_) {
	        this.userActive_ = bool;
	        if (bool) {
	          // If the user was inactive and is now active we want to reset the
	          // inactivity timer
	          this.userActivity_ = true;
	          this.removeClass('vjs-user-inactive');
	          this.addClass('vjs-user-active');
	          this.trigger('useractive');
	        } else {
	          // We're switching the state to inactive manually, so erase any other
	          // activity
	          this.userActivity_ = false;

	          // Chrome/Safari/IE have bugs where when you change the cursor it can
	          // trigger a mousemove event. This causes an issue when you're hiding
	          // the cursor when the user is inactive, and a mousemove signals user
	          // activity. Making it impossible to go into inactive mode. Specifically
	          // this happens in fullscreen when we really need to hide the cursor.
	          //
	          // When this gets resolved in ALL browsers it can be removed
	          // https://code.google.com/p/chromium/issues/detail?id=103041
	          if (this.tech_) {
	            this.tech_.one('mousemove', function (e) {
	              e.stopPropagation();
	              e.preventDefault();
	            });
	          }

	          this.removeClass('vjs-user-active');
	          this.addClass('vjs-user-inactive');
	          this.trigger('userinactive');
	        }
	      }
	      return this;
	    }
	    return this.userActive_;
	  };

	  /**
	   * Listen for user activity based on timeout value
	   *
	   * @private
	   * @method listenForUserActivity_
	   */

	  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
	    var mouseInProgress = undefined,
	        lastMoveX = undefined,
	        lastMoveY = undefined;

	    var handleActivity = Fn.bind(this, this.reportUserActivity);

	    var handleMouseMove = function handleMouseMove(e) {
	      // #1068 - Prevent mousemove spamming
	      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
	      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
	        lastMoveX = e.screenX;
	        lastMoveY = e.screenY;
	        handleActivity();
	      }
	    };

	    var handleMouseDown = function handleMouseDown() {
	      handleActivity();
	      // For as long as the they are touching the device or have their mouse down,
	      // we consider them active even if they're not moving their finger or mouse.
	      // So we want to continue to update that they are active
	      this.clearInterval(mouseInProgress);
	      // Setting userActivity=true now and setting the interval to the same time
	      // as the activityCheck interval (250) should ensure we never miss the
	      // next activityCheck
	      mouseInProgress = this.setInterval(handleActivity, 250);
	    };

	    var handleMouseUp = function handleMouseUp(event) {
	      handleActivity();
	      // Stop the interval that maintains activity if the mouse/touch is down
	      this.clearInterval(mouseInProgress);
	    };

	    // Any mouse movement will be considered user activity
	    this.on('mousedown', handleMouseDown);
	    this.on('mousemove', handleMouseMove);
	    this.on('mouseup', handleMouseUp);

	    // Listen for keyboard navigation
	    // Shouldn't need to use inProgress interval because of key repeat
	    this.on('keydown', handleActivity);
	    this.on('keyup', handleActivity);

	    // Run an interval every 250 milliseconds instead of stuffing everything into
	    // the mousemove/touchmove function itself, to prevent performance degradation.
	    // `this.reportUserActivity` simply sets this.userActivity_ to true, which
	    // then gets picked up by this loop
	    // http://ejohn.org/blog/learning-from-twitter/
	    var inactivityTimeout = undefined;
	    var activityCheck = this.setInterval(function () {
	      // Check to see if mouse/touch activity has happened
	      if (this.userActivity_) {
	        // Reset the activity tracker
	        this.userActivity_ = false;

	        // If the user state was inactive, set the state to active
	        this.userActive(true);

	        // Clear any existing inactivity timeout to start the timer over
	        this.clearTimeout(inactivityTimeout);

	        var timeout = this.options_['inactivityTimeout'];
	        if (timeout > 0) {
	          // In <timeout> milliseconds, if no more activity has occurred the
	          // user will be considered inactive
	          inactivityTimeout = this.setTimeout(function () {
	            // Protect against the case where the inactivityTimeout can trigger just
	            // before the next user activity is picked up by the activityCheck loop
	            // causing a flicker
	            if (!this.userActivity_) {
	              this.userActive(false);
	            }
	          }, timeout);
	        }
	      }
	    }, 250);
	  };

	  /**
	   * Gets or sets the current playback rate.  A playback rate of
	   * 1.0 represents normal speed and 0.5 would indicate half-speed
	   * playback, for instance.
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
	   *
	   * @param  {Number} rate    New playback rate to set.
	   * @return {Number}         Returns the new playback rate when setting
	   * @return {Number}         Returns the current playback rate when getting
	   * @method playbackRate
	   */

	  Player.prototype.playbackRate = function playbackRate(rate) {
	    if (rate !== undefined) {
	      this.techCall_('setPlaybackRate', rate);
	      return this;
	    }

	    if (this.tech_ && this.tech_['featuresPlaybackRate']) {
	      return this.techGet_('playbackRate');
	    } else {
	      return 1.0;
	    }
	  };

	  /**
	   * Gets or sets the audio flag
	   *
	   * @param  {Boolean} bool    True signals that this is an audio player.
	   * @return {Boolean}         Returns true if player is audio, false if not when getting
	   * @return {Player}      Returns the player if setting
	   * @private
	   * @method isAudio
	   */

	  Player.prototype.isAudio = function isAudio(bool) {
	    if (bool !== undefined) {
	      this.isAudio_ = !!bool;
	      return this;
	    }

	    return !!this.isAudio_;
	  };

	  /**
	   * Returns the current state of network activity for the element, from
	   * the codes in the list below.
	   * - NETWORK_EMPTY (numeric value 0)
	   *   The element has not yet been initialised. All attributes are in
	   *   their initial states.
	   * - NETWORK_IDLE (numeric value 1)
	   *   The element's resource selection algorithm is active and has
	   *   selected a resource, but it is not actually using the network at
	   *   this time.
	   * - NETWORK_LOADING (numeric value 2)
	   *   The user agent is actively trying to download data.
	   * - NETWORK_NO_SOURCE (numeric value 3)
	   *   The element's resource selection algorithm is active, but it has
	   *   not yet found a resource to use.
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
	   * @return {Number} the current network activity state
	   * @method networkState
	   */

	  Player.prototype.networkState = function networkState() {
	    return this.techGet_('networkState');
	  };

	  /**
	   * Returns a value that expresses the current state of the element
	   * with respect to rendering the current playback position, from the
	   * codes in the list below.
	   * - HAVE_NOTHING (numeric value 0)
	   *   No information regarding the media resource is available.
	   * - HAVE_METADATA (numeric value 1)
	   *   Enough of the resource has been obtained that the duration of the
	   *   resource is available.
	   * - HAVE_CURRENT_DATA (numeric value 2)
	   *   Data for the immediate current playback position is available.
	   * - HAVE_FUTURE_DATA (numeric value 3)
	   *   Data for the immediate current playback position is available, as
	   *   well as enough data for the user agent to advance the current
	   *   playback position in the direction of playback.
	   * - HAVE_ENOUGH_DATA (numeric value 4)
	   *   The user agent estimates that enough data is available for
	   *   playback to proceed uninterrupted.
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
	   * @return {Number} the current playback rendering state
	   * @method readyState
	   */

	  Player.prototype.readyState = function readyState() {
	    return this.techGet_('readyState');
	  };

	  /**
	   * Get a video track list
	   * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
	   *
	   * @return {VideoTrackList} thes current video track list
	   * @method videoTracks
	   */

	  Player.prototype.videoTracks = function videoTracks() {
	    // if we have not yet loadTech_, we create videoTracks_
	    // these will be passed to the tech during loading
	    if (!this.tech_) {
	      this.videoTracks_ = this.videoTracks_ || new _tracksVideoTrackListJs2['default']();
	      return this.videoTracks_;
	    }

	    return this.tech_.videoTracks();
	  };

	  /**
	   * Get an audio track list
	   * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
	   *
	   * @return {AudioTrackList} thes current audio track list
	   * @method audioTracks
	   */

	  Player.prototype.audioTracks = function audioTracks() {
	    // if we have not yet loadTech_, we create videoTracks_
	    // these will be passed to the tech during loading
	    if (!this.tech_) {
	      this.audioTracks_ = this.audioTracks_ || new _tracksAudioTrackListJs2['default']();
	      return this.audioTracks_;
	    }

	    return this.tech_.audioTracks();
	  };

	  /*
	    * Text tracks are tracks of timed text events.
	    * Captions - text displayed over the video for the hearing impaired
	    * Subtitles - text displayed over the video for those who don't understand language in the video
	    * Chapters - text displayed in a menu allowing the user to jump to particular points (chapters) in the video
	    * Descriptions (not supported yet) - audio descriptions that are read back to the user by a screen reading device
	    */

	  /**
	   * Get an array of associated text tracks. captions, subtitles, chapters, descriptions
	   * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
	   *
	   * @return {Array}           Array of track objects
	   * @method textTracks
	   */

	  Player.prototype.textTracks = function textTracks() {
	    // cannot use techGet_ directly because it checks to see whether the tech is ready.
	    // Flash is unlikely to be ready in time but textTracks should still work.
	    return this.tech_ && this.tech_['textTracks']();
	  };

	  /**
	   * Get an array of remote text tracks
	   *
	   * @return {Array}
	   * @method remoteTextTracks
	   */

	  Player.prototype.remoteTextTracks = function remoteTextTracks() {
	    return this.tech_ && this.tech_['remoteTextTracks']();
	  };

	  /**
	   * Get an array of remote html track elements
	   *
	   * @return {HTMLTrackElement[]}
	   * @method remoteTextTrackEls
	   */

	  Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
	    return this.tech_ && this.tech_['remoteTextTrackEls']();
	  };

	  /**
	   * Add a text track
	   * In addition to the W3C settings we allow adding additional info through options.
	   * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
	   *
	   * @param {String}  kind        Captions, subtitles, chapters, descriptions, or metadata
	   * @param {String=} label       Optional label
	   * @param {String=} language    Optional language
	   * @method addTextTrack
	   */

	  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    return this.tech_ && this.tech_['addTextTrack'](kind, label, language);
	  };

	  /**
	   * Add a remote text track
	   *
	   * @param {Object} options    Options for remote text track
	   * @method addRemoteTextTrack
	   */

	  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options) {
	    return this.tech_ && this.tech_['addRemoteTextTrack'](options);
	  };

	  /**
	   * Remove a remote text track
	   *
	   * @param {Object} track    Remote text track to remove
	   * @method removeRemoteTextTrack
	   */
	  // destructure the input into an object with a track argument, defaulting to arguments[0]
	  // default the whole argument to an empty object if nothing was passed in

	  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
	    var _ref3 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var _ref3$track = _ref3.track;
	    var track = _ref3$track === undefined ? arguments[0] : _ref3$track;
	    // jshint ignore:line
	    this.tech_ && this.tech_['removeRemoteTextTrack'](track);
	  };

	  /**
	   * Get video width
	   *
	   * @return {Number} Video width
	   * @method videoWidth
	   */

	  Player.prototype.videoWidth = function videoWidth() {
	    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
	  };

	  /**
	   * Get video height
	   *
	   * @return {Number} Video height
	   * @method videoHeight
	   */

	  Player.prototype.videoHeight = function videoHeight() {
	    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
	  };

	  // Methods to add support for
	  // initialTime: function(){ return this.techCall_('initialTime'); },
	  // startOffsetTime: function(){ return this.techCall_('startOffsetTime'); },
	  // played: function(){ return this.techCall_('played'); },
	  // defaultPlaybackRate: function(){ return this.techCall_('defaultPlaybackRate'); },
	  // defaultMuted: function(){ return this.techCall_('defaultMuted'); }

	  /**
	   * The player's language code
	   * NOTE: The language should be set in the player options if you want the
	   * the controls to be built with a specific language. Changing the lanugage
	   * later will not update controls text.
	   *
	   * @param {String} code  The locale string
	   * @return {String}      The locale string when getting
	   * @return {Player}      self when setting
	   * @method language
	   */

	  Player.prototype.language = function language(code) {
	    if (code === undefined) {
	      return this.language_;
	    }

	    this.language_ = ('' + code).toLowerCase();
	    return this;
	  };

	  /**
	   * Get the player's language dictionary
	   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
	   * Languages specified directly in the player options have precedence
	   *
	   * @return {Array} Array of languages
	   * @method languages
	   */

	  Player.prototype.languages = function languages() {
	    return _utilsMergeOptionsJs2['default'](Player.prototype.options_.languages, this.languages_);
	  };

	  /**
	   * Converts track info to JSON
	   *
	   * @return {Object} JSON object of options
	   * @method toJSON
	   */

	  Player.prototype.toJSON = function toJSON() {
	    var options = _utilsMergeOptionsJs2['default'](this.options_);
	    var tracks = options.tracks;

	    options.tracks = [];

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      // deep merge tracks and null out player so no circular references
	      track = _utilsMergeOptionsJs2['default'](track);
	      track.player = undefined;
	      options.tracks[i] = track;
	    }

	    return options;
	  };

	  /**
	   * Creates a simple modal dialog (an instance of the `ModalDialog`
	   * component) that immediately overlays the player with arbitrary
	   * content and removes itself when closed.
	   *
	   * @param {String|Function|Element|Array|Null} content
	   *        Same as `ModalDialog#content`'s param of the same name.
	   *
	   *        The most straight-forward usage is to provide a string or DOM
	   *        element.
	   *
	   * @param {Object} [options]
	   *        Extra options which will be passed on to the `ModalDialog`.
	   *
	   * @return {ModalDialog}
	   */

	  Player.prototype.createModal = function createModal(content, options) {
	    var player = this;

	    options = options || {};
	    options.content = content || '';

	    var modal = new _modalDialog2['default'](player, options);

	    player.addChild(modal);
	    modal.on('dispose', function () {
	      player.removeChild(modal);
	    });

	    return modal.open();
	  };

	  /**
	   * Gets tag settings
	   *
	   * @param {Element} tag The player tag
	   * @return {Array} An array of sources and track objects
	   * @static
	   * @method getTagSettings
	   */

	  Player.getTagSettings = function getTagSettings(tag) {
	    var baseOptions = {
	      'sources': [],
	      'tracks': []
	    };

	    var tagOptions = Dom.getElAttributes(tag);
	    var dataSetup = tagOptions['data-setup'];

	    // Check if data-setup attr exists.
	    if (dataSetup !== null) {
	      // Parse options JSON

	      var _safeParseTuple = _safeJsonParseTuple2['default'](dataSetup || '{}');

	      var err = _safeParseTuple[0];
	      var data = _safeParseTuple[1];

	      if (err) {
	        _utilsLogJs2['default'].error(err);
	      }
	      _objectAssign2['default'](tagOptions, data);
	    }

	    _objectAssign2['default'](baseOptions, tagOptions);

	    // Get tag children settings
	    if (tag.hasChildNodes()) {
	      var children = tag.childNodes;

	      for (var i = 0, j = children.length; i < j; i++) {
	        var child = children[i];
	        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
	        var childName = child.nodeName.toLowerCase();
	        if (childName === 'source') {
	          baseOptions.sources.push(Dom.getElAttributes(child));
	        } else if (childName === 'track') {
	          baseOptions.tracks.push(Dom.getElAttributes(child));
	        }
	      }
	    }

	    return baseOptions;
	  };

	  return Player;
	})(_componentJs2['default']);

	Player.players = {};

	var navigator = _globalWindow2['default'].navigator;
	/*
	 * Player instance options, surfaced using options
	 * options = Player.prototype.options_
	 * Make changes in options, not here.
	 *
	 * @type {Object}
	 * @private
	 */
	Player.prototype.options_ = {
	  // Default order of fallback technology
	  techOrder: ['html5', 'flash'],
	  // techOrder: ['flash','html5'],

	  html5: {},
	  flash: {},

	  // defaultVolume: 0.85,
	  defaultVolume: 0.00, // The freakin seaguls are driving me crazy!

	  // default inactivity timeout
	  inactivityTimeout: 2000,

	  // default playback rates
	  playbackRates: [],
	  // Add playback rate selection by adding rates
	  // 'playbackRates': [0.5, 1, 1.5, 2],

	  // Included control sets
	  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],

	  language: navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language || 'en',

	  // locales and their language translations
	  languages: {},

	  // Default message to show when a video cannot be played.
	  notSupportedMessage: 'No compatible source was found for this media.'
	};

	/**
	 * Fired when the user agent begins looking for media data
	 *
	 * @event loadstart
	 */
	Player.prototype.handleTechLoadStart_;

	/**
	 * Fired when the player has initial duration and dimension information
	 *
	 * @event loadedmetadata
	 */
	Player.prototype.handleLoadedMetaData_;

	/**
	 * Fired when the player receives text data
	 *
	 * @event textdata
	 */
	Player.prototype.handleTextData_;

	/**
	 * Fired when the player has downloaded data at the current playback position
	 *
	 * @event loadeddata
	 */
	Player.prototype.handleLoadedData_;

	/**
	 * Fired when the user is active, e.g. moves the mouse over the player
	 *
	 * @event useractive
	 */
	Player.prototype.handleUserActive_;

	/**
	 * Fired when the user is inactive, e.g. a short delay after the last mouse move or control interaction
	 *
	 * @event userinactive
	 */
	Player.prototype.handleUserInactive_;

	/**
	 * Fired when the current playback position has changed *
	 * During playback this is fired every 15-250 milliseconds, depending on the
	 * playback technology in use.
	 *
	 * @event timeupdate
	 */
	Player.prototype.handleTimeUpdate_;

	/**
	 * Fired when video playback ends
	 *
	 * @event ended
	 */
	Player.prototype.handleTechEnded_;

	/**
	 * Fired when the volume changes
	 *
	 * @event volumechange
	 */
	Player.prototype.handleVolumeChange_;

	/**
	 * Fired when an error occurs
	 *
	 * @event error
	 */
	Player.prototype.handleError_;

	Player.prototype.flexNotSupported_ = function () {
	  var elem = _globalDocument2['default'].createElement('i');

	  // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
	  // common flex features that we can rely on when checking for flex support.
	  return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style || 'msFlexOrder' in elem.style) /* IE10-specific (2012 flex spec)  */;
	};

	_componentJs2['default'].registerComponent('Player', Player);
	exports['default'] = Player;
	module.exports = exports['default'];
	// If empty string, make it a parsable json object.

	},{"./big-play-button.js":63,"./component.js":67,"./control-bar/control-bar.js":70,"./error-display.js":103,"./fullscreen-api.js":106,"./loading-spinner.js":107,"./media-error.js":108,"./modal-dialog":112,"./poster-image.js":117,"./tech/html5.js":122,"./tech/loader.js":123,"./tech/tech.js":124,"./tracks/audio-track-list.js":125,"./tracks/text-track-display.js":130,"./tracks/text-track-list-converter.js":131,"./tracks/text-track-settings.js":133,"./tracks/video-track-list.js":138,"./utils/browser.js":140,"./utils/buffer.js":141,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/guid.js":146,"./utils/log.js":147,"./utils/merge-options.js":148,"./utils/stylesheet.js":149,"./utils/time-ranges.js":150,"./utils/to-title-case.js":151,"global/document":1,"global/window":2,"object.assign":45,"safe-json-parse/tuple":54}],114:[function(_dereq_,module,exports){
	/**
	 * @file plugins.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _playerJs = _dereq_('./player.js');

	var _playerJs2 = _interopRequireDefault(_playerJs);

	/**
	 * The method for registering a video.js plugin
	 *
	 * @param  {String} name The name of the plugin
	 * @param  {Function} init The function that is run when the player inits
	 * @method plugin
	 */
	var plugin = function plugin(name, init) {
	  _playerJs2['default'].prototype[name] = init;
	};

	exports['default'] = plugin;
	module.exports = exports['default'];

	},{"./player.js":113}],115:[function(_dereq_,module,exports){
	/**
	 * @file popup-button.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _clickableComponentJs = _dereq_('../clickable-component.js');

	var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _popupJs = _dereq_('./popup.js');

	var _popupJs2 = _interopRequireDefault(_popupJs);

	var _utilsDomJs = _dereq_('../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

	/**
	 * A button class with a popup control
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends ClickableComponent
	 * @class PopupButton
	 */

	var PopupButton = (function (_ClickableComponent) {
	  _inherits(PopupButton, _ClickableComponent);

	  function PopupButton(player) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, PopupButton);

	    _ClickableComponent.call(this, player, options);

	    this.update();
	  }

	  /**
	   * Update popup
	   *
	   * @method update
	   */

	  PopupButton.prototype.update = function update() {
	    var popup = this.createPopup();

	    if (this.popup) {
	      this.removeChild(this.popup);
	    }

	    this.popup = popup;
	    this.addChild(popup);

	    if (this.items && this.items.length === 0) {
	      this.hide();
	    } else if (this.items && this.items.length > 1) {
	      this.show();
	    }
	  };

	  /**
	   * Create popup - Override with specific functionality for component
	   *
	   * @return {Popup} The constructed popup
	   * @method createPopup
	   */

	  PopupButton.prototype.createPopup = function createPopup() {};

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  PopupButton.prototype.createEl = function createEl() {
	    return _ClickableComponent.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };

	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */

	  PopupButton.prototype.buildCSSClass = function buildCSSClass() {
	    var menuButtonClass = 'vjs-menu-button';

	    // If the inline option is passed, we want to use different styles altogether.
	    if (this.options_.inline === true) {
	      menuButtonClass += '-inline';
	    } else {
	      menuButtonClass += '-popup';
	    }

	    return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
	  };

	  return PopupButton;
	})(_clickableComponentJs2['default']);

	_componentJs2['default'].registerComponent('PopupButton', PopupButton);
	exports['default'] = PopupButton;
	module.exports = exports['default'];

	},{"../clickable-component.js":65,"../component.js":67,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/to-title-case.js":151,"./popup.js":116}],116:[function(_dereq_,module,exports){
	/**
	 * @file popup.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsDomJs = _dereq_('../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsEventsJs = _dereq_('../utils/events.js');

	var Events = _interopRequireWildcard(_utilsEventsJs);

	/**
	 * The Popup component is used to build pop up controls.
	 *
	 * @extends Component
	 * @class Popup
	 */

	var Popup = (function (_Component) {
	  _inherits(Popup, _Component);

	  function Popup() {
	    _classCallCheck(this, Popup);

	    _Component.apply(this, arguments);
	  }

	  /**
	   * Add a popup item to the popup
	   *
	   * @param {Object|String} component Component or component type to add
	   * @method addItem
	   */

	  Popup.prototype.addItem = function addItem(component) {
	    this.addChild(component);
	    component.on('click', Fn.bind(this, function () {
	      this.unlockShowing();
	    }));
	  };

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  Popup.prototype.createEl = function createEl() {
	    var contentElType = this.options_.contentElType || 'ul';
	    this.contentEl_ = Dom.createEl(contentElType, {
	      className: 'vjs-menu-content'
	    });
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      append: this.contentEl_,
	      className: 'vjs-menu'
	    });
	    el.appendChild(this.contentEl_);

	    // Prevent clicks from bubbling up. Needed for Popup Buttons,
	    // where a click on the parent is significant
	    Events.on(el, 'click', function (event) {
	      event.preventDefault();
	      event.stopImmediatePropagation();
	    });

	    return el;
	  };

	  return Popup;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('Popup', Popup);
	exports['default'] = Popup;
	module.exports = exports['default'];

	},{"../component.js":67,"../utils/dom.js":142,"../utils/events.js":143,"../utils/fn.js":144}],117:[function(_dereq_,module,exports){
	/**
	 * @file poster-image.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _clickableComponentJs = _dereq_('./clickable-component.js');

	var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

	var _componentJs = _dereq_('./component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsFnJs = _dereq_('./utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsDomJs = _dereq_('./utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsBrowserJs = _dereq_('./utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	/**
	 * The component that handles showing the poster image.
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Button
	 * @class PosterImage
	 */

	var PosterImage = (function (_ClickableComponent) {
	  _inherits(PosterImage, _ClickableComponent);

	  function PosterImage(player, options) {
	    _classCallCheck(this, PosterImage);

	    _ClickableComponent.call(this, player, options);

	    this.update();
	    player.on('posterchange', Fn.bind(this, this.update));
	  }

	  /**
	   * Clean up the poster image
	   *
	   * @method dispose
	   */

	  PosterImage.prototype.dispose = function dispose() {
	    this.player().off('posterchange', this.update);
	    _ClickableComponent.prototype.dispose.call(this);
	  };

	  /**
	   * Create the poster's image element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  PosterImage.prototype.createEl = function createEl() {
	    var el = Dom.createEl('div', {
	      className: 'vjs-poster',

	      // Don't want poster to be tabbable.
	      tabIndex: -1
	    });

	    // To ensure the poster image resizes while maintaining its original aspect
	    // ratio, use a div with `background-size` when available. For browsers that
	    // do not support `background-size` (e.g. IE8), fall back on using a regular
	    // img element.
	    if (!browser.BACKGROUND_SIZE_SUPPORTED) {
	      this.fallbackImg_ = Dom.createEl('img');
	      el.appendChild(this.fallbackImg_);
	    }

	    return el;
	  };

	  /**
	   * Event handler for updates to the player's poster source
	   *
	   * @method update
	   */

	  PosterImage.prototype.update = function update() {
	    var url = this.player().poster();

	    this.setSrc(url);

	    // If there's no poster source we should display:none on this component
	    // so it's not still clickable or right-clickable
	    if (url) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };

	  /**
	   * Set the poster source depending on the display method
	   *
	   * @param {String} url The URL to the poster source
	   * @method setSrc
	   */

	  PosterImage.prototype.setSrc = function setSrc(url) {
	    if (this.fallbackImg_) {
	      this.fallbackImg_.src = url;
	    } else {
	      var backgroundImage = '';
	      // Any falsey values should stay as an empty string, otherwise
	      // this will throw an extra error
	      if (url) {
	        backgroundImage = 'url("' + url + '")';
	      }

	      this.el_.style.backgroundImage = backgroundImage;
	    }
	  };

	  /**
	   * Event handler for clicks on the poster image
	   *
	   * @method handleClick
	   */

	  PosterImage.prototype.handleClick = function handleClick() {
	    // We don't want a click to trigger playback when controls are disabled
	    // but CSS should be hiding the poster to prevent that from happening
	    if (this.player_.paused()) {
	      this.player_.play();
	    } else {
	      this.player_.pause();
	    }
	  };

	  return PosterImage;
	})(_clickableComponentJs2['default']);

	_componentJs2['default'].registerComponent('PosterImage', PosterImage);
	exports['default'] = PosterImage;
	module.exports = exports['default'];

	},{"./clickable-component.js":65,"./component.js":67,"./utils/browser.js":140,"./utils/dom.js":142,"./utils/fn.js":144}],118:[function(_dereq_,module,exports){
	/**
	 * @file setup.js
	 *
	 * Functions for automatically setting up a player
	 * based on the data-setup attribute of the video tag
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _utilsEventsJs = _dereq_('./utils/events.js');

	var Events = _interopRequireWildcard(_utilsEventsJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _windowLoaded = false;
	var videojs = undefined;

	// Automatically set up any tags that have a data-setup attribute
	var autoSetup = function autoSetup() {
	  // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
	  // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
	  // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
	  // var mediaEls = vids.concat(audios);

	  // Because IE8 doesn't support calling slice on a node list, we need to loop through each list of elements
	  // to build up a new, combined list of elements.
	  var vids = _globalDocument2['default'].getElementsByTagName('video');
	  var audios = _globalDocument2['default'].getElementsByTagName('audio');
	  var mediaEls = [];
	  if (vids && vids.length > 0) {
	    for (var i = 0, e = vids.length; i < e; i++) {
	      mediaEls.push(vids[i]);
	    }
	  }
	  if (audios && audios.length > 0) {
	    for (var i = 0, e = audios.length; i < e; i++) {
	      mediaEls.push(audios[i]);
	    }
	  }

	  // Check if any media elements exist
	  if (mediaEls && mediaEls.length > 0) {

	    for (var i = 0, e = mediaEls.length; i < e; i++) {
	      var mediaEl = mediaEls[i];

	      // Check if element exists, has getAttribute func.
	      // IE seems to consider typeof el.getAttribute == 'object' instead of 'function' like expected, at least when loading the player immediately.
	      if (mediaEl && mediaEl.getAttribute) {

	        // Make sure this player hasn't already been set up.
	        if (mediaEl['player'] === undefined) {
	          var options = mediaEl.getAttribute('data-setup');

	          // Check if data-setup attr exists.
	          // We only auto-setup if they've added the data-setup attr.
	          if (options !== null) {
	            // Create new video.js instance.
	            var player = videojs(mediaEl);
	          }
	        }

	        // If getAttribute isn't defined, we need to wait for the DOM.
	      } else {
	          autoSetupTimeout(1);
	          break;
	        }
	    }

	    // No videos were found, so keep looping unless page is finished loading.
	  } else if (!_windowLoaded) {
	      autoSetupTimeout(1);
	    }
	};

	// Pause to let the DOM keep processing
	var autoSetupTimeout = function autoSetupTimeout(wait, vjs) {
	  if (vjs) {
	    videojs = vjs;
	  }

	  setTimeout(autoSetup, wait);
	};

	if (_globalDocument2['default'].readyState === 'complete') {
	  _windowLoaded = true;
	} else {
	  Events.one(_globalWindow2['default'], 'load', function () {
	    _windowLoaded = true;
	  });
	}

	var hasLoaded = function hasLoaded() {
	  return _windowLoaded;
	};

	exports.autoSetup = autoSetup;
	exports.autoSetupTimeout = autoSetupTimeout;
	exports.hasLoaded = hasLoaded;

	},{"./utils/events.js":143,"global/document":1,"global/window":2}],119:[function(_dereq_,module,exports){
	/**
	 * @file slider.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _utilsDomJs = _dereq_('../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _objectAssign = _dereq_('object.assign');

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	/**
	 * The base functionality for sliders like the volume bar and seek bar
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class Slider
	 */

	var Slider = (function (_Component) {
	  _inherits(Slider, _Component);

	  function Slider(player, options) {
	    _classCallCheck(this, Slider);

	    _Component.call(this, player, options);

	    // Set property names to bar to match with the child Slider class is looking for
	    this.bar = this.getChild(this.options_.barName);

	    // Set a horizontal or vertical class on the slider depending on the slider type
	    this.vertical(!!this.options_.vertical);

	    this.on('mousedown', this.handleMouseDown);
	    this.on('touchstart', this.handleMouseDown);
	    this.on('focus', this.handleFocus);
	    this.on('blur', this.handleBlur);
	    this.on('click', this.handleClick);

	    this.on(player, 'controlsvisible', this.update);
	    this.on(player, this.playerEvent, this.update);
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @param {String} type Type of element to create
	   * @param {Object=} props List of properties in Object form
	   * @return {Element}
	   * @method createEl
	   */

	  Slider.prototype.createEl = function createEl(type) {
	    var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    // Add the slider element class to all sub classes
	    props.className = props.className + ' vjs-slider';
	    props = _objectAssign2['default']({
	      tabIndex: 0
	    }, props);

	    attributes = _objectAssign2['default']({
	      'role': 'slider',
	      'aria-valuenow': 0,
	      'aria-valuemin': 0,
	      'aria-valuemax': 100,
	      tabIndex: 0
	    }, attributes);

	    return _Component.prototype.createEl.call(this, type, props, attributes);
	  };

	  /**
	   * Handle mouse down on slider
	   *
	   * @param {Object} event Mouse down event object
	   * @method handleMouseDown
	   */

	  Slider.prototype.handleMouseDown = function handleMouseDown(event) {
	    var doc = this.bar.el_.ownerDocument;

	    event.preventDefault();
	    Dom.blockTextSelection();

	    this.addClass('vjs-sliding');
	    this.trigger('slideractive');

	    this.on(doc, 'mousemove', this.handleMouseMove);
	    this.on(doc, 'mouseup', this.handleMouseUp);
	    this.on(doc, 'touchmove', this.handleMouseMove);
	    this.on(doc, 'touchend', this.handleMouseUp);

	    this.handleMouseMove(event);
	  };

	  /**
	   * To be overridden by a subclass
	   *
	   * @method handleMouseMove
	   */

	  Slider.prototype.handleMouseMove = function handleMouseMove() {};

	  /**
	   * Handle mouse up on Slider
	   *
	   * @method handleMouseUp
	   */

	  Slider.prototype.handleMouseUp = function handleMouseUp() {
	    var doc = this.bar.el_.ownerDocument;

	    Dom.unblockTextSelection();

	    this.removeClass('vjs-sliding');
	    this.trigger('sliderinactive');

	    this.off(doc, 'mousemove', this.handleMouseMove);
	    this.off(doc, 'mouseup', this.handleMouseUp);
	    this.off(doc, 'touchmove', this.handleMouseMove);
	    this.off(doc, 'touchend', this.handleMouseUp);

	    this.update();
	  };

	  /**
	   * Update slider
	   *
	   * @method update
	   */

	  Slider.prototype.update = function update() {
	    // In VolumeBar init we have a setTimeout for update that pops and update to the end of the
	    // execution stack. The player is destroyed before then update will cause an error
	    if (!this.el_) return;

	    // If scrubbing, we could use a cached value to make the handle keep up with the user's mouse.
	    // On HTML5 browsers scrubbing is really smooth, but some flash players are slow, so we might want to utilize this later.
	    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
	    var progress = this.getPercent();
	    var bar = this.bar;

	    // If there's no bar...
	    if (!bar) return;

	    // Protect against no duration and other division issues
	    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
	      progress = 0;
	    }

	    // Convert to a percentage for setting
	    var percentage = (progress * 100).toFixed(2) + '%';

	    // Set the new bar width or height
	    if (this.vertical()) {
	      bar.el().style.height = percentage;
	    } else {
	      bar.el().style.width = percentage;
	    }
	  };

	  /**
	   * Calculate distance for slider
	   *
	   * @param {Object} event Event object
	   * @method calculateDistance
	   */

	  Slider.prototype.calculateDistance = function calculateDistance(event) {
	    var position = Dom.getPointerPosition(this.el_, event);
	    if (this.vertical()) {
	      return position.y;
	    }
	    return position.x;
	  };

	  /**
	   * Handle on focus for slider
	   *
	   * @method handleFocus
	   */

	  Slider.prototype.handleFocus = function handleFocus() {
	    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
	  };

	  /**
	   * Handle key press for slider
	   *
	   * @param {Object} event Event object
	   * @method handleKeyPress
	   */

	  Slider.prototype.handleKeyPress = function handleKeyPress(event) {
	    if (event.which === 37 || event.which === 40) {
	      // Left and Down Arrows
	      event.preventDefault();
	      this.stepBack();
	    } else if (event.which === 38 || event.which === 39) {
	      // Up and Right Arrows
	      event.preventDefault();
	      this.stepForward();
	    }
	  };

	  /**
	   * Handle on blur for slider
	   *
	   * @method handleBlur
	   */

	  Slider.prototype.handleBlur = function handleBlur() {
	    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
	  };

	  /**
	   * Listener for click events on slider, used to prevent clicks
	   *   from bubbling up to parent elements like button menus.
	   *
	   * @param {Object} event Event object
	   * @method handleClick
	   */

	  Slider.prototype.handleClick = function handleClick(event) {
	    event.stopImmediatePropagation();
	    event.preventDefault();
	  };

	  /**
	   * Get/set if slider is horizontal for vertical
	   *
	   * @param {Boolean} bool True if slider is vertical, false is horizontal
	   * @return {Boolean} True if slider is vertical, false is horizontal
	   * @method vertical
	   */

	  Slider.prototype.vertical = function vertical(bool) {
	    if (bool === undefined) {
	      return this.vertical_ || false;
	    }

	    this.vertical_ = !!bool;

	    if (this.vertical_) {
	      this.addClass('vjs-slider-vertical');
	    } else {
	      this.addClass('vjs-slider-horizontal');
	    }

	    return this;
	  };

	  return Slider;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('Slider', Slider);
	exports['default'] = Slider;
	module.exports = exports['default'];

	},{"../component.js":67,"../utils/dom.js":142,"object.assign":45}],120:[function(_dereq_,module,exports){
	/**
	 * @file flash-rtmp.js
	 */
	'use strict';

	exports.__esModule = true;
	function FlashRtmpDecorator(Flash) {
	  Flash.streamingFormats = {
	    'rtmp/mp4': 'MP4',
	    'rtmp/flv': 'FLV'
	  };

	  Flash.streamFromParts = function (connection, stream) {
	    return connection + '&' + stream;
	  };

	  Flash.streamToParts = function (src) {
	    var parts = {
	      connection: '',
	      stream: ''
	    };

	    if (!src) return parts;

	    // Look for the normal URL separator we expect, '&'.
	    // If found, we split the URL into two pieces around the
	    // first '&'.
	    var connEnd = src.search(/&(?!\w+=)/);
	    var streamBegin = undefined;
	    if (connEnd !== -1) {
	      streamBegin = connEnd + 1;
	    } else {
	      // If there's not a '&', we use the last '/' as the delimiter.
	      connEnd = streamBegin = src.lastIndexOf('/') + 1;
	      if (connEnd === 0) {
	        // really, there's not a '/'?
	        connEnd = streamBegin = src.length;
	      }
	    }
	    parts.connection = src.substring(0, connEnd);
	    parts.stream = src.substring(streamBegin, src.length);

	    return parts;
	  };

	  Flash.isStreamingType = function (srcType) {
	    return srcType in Flash.streamingFormats;
	  };

	  // RTMP has four variations, any string starting
	  // with one of these protocols should be valid
	  Flash.RTMP_RE = /^rtmp[set]?:\/\//i;

	  Flash.isStreamingSrc = function (src) {
	    return Flash.RTMP_RE.test(src);
	  };

	  /**
	   * A source handler for RTMP urls
	   * @type {Object}
	   */
	  Flash.rtmpSourceHandler = {};

	  /**
	   * Check if Flash can play the given videotype
	   * @param  {String} type    The mimetype to check
	   * @return {String}         'probably', 'maybe', or '' (empty string)
	   */
	  Flash.rtmpSourceHandler.canPlayType = function (type) {
	    if (Flash.isStreamingType(type)) {
	      return 'maybe';
	    }

	    return '';
	  };

	  /**
	   * Check if Flash can handle the source natively
	   * @param  {Object} source  The source object
	   * @param  {Object} options The options passed to the tech
	   * @return {String}         'probably', 'maybe', or '' (empty string)
	   */
	  Flash.rtmpSourceHandler.canHandleSource = function (source, options) {
	    var can = Flash.rtmpSourceHandler.canPlayType(source.type);

	    if (can) {
	      return can;
	    }

	    if (Flash.isStreamingSrc(source.src)) {
	      return 'maybe';
	    }

	    return '';
	  };

	  /**
	   * Pass the source to the flash object
	   * Adaptive source handlers will have more complicated workflows before passing
	   * video data to the video element
	   * @param  {Object} source   The source object
	   * @param  {Flash}  tech     The instance of the Flash tech
	   * @param  {Object} options  The options to pass to the source
	   */
	  Flash.rtmpSourceHandler.handleSource = function (source, tech, options) {
	    var srcParts = Flash.streamToParts(source.src);

	    tech['setRtmpConnection'](srcParts.connection);
	    tech['setRtmpStream'](srcParts.stream);
	  };

	  // Register the native source handler
	  Flash.registerSourceHandler(Flash.rtmpSourceHandler);

	  return Flash;
	}

	exports['default'] = FlashRtmpDecorator;
	module.exports = exports['default'];

	},{}],121:[function(_dereq_,module,exports){
	/**
	 * @file flash.js
	 * VideoJS-SWF - Custom Flash Player with HTML5-ish API
	 * https://github.com/zencoder/video-js-swf
	 * Not using setupTriggers. Using global onEvent func to distribute events
	 */

	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _tech = _dereq_('./tech');

	var _tech2 = _interopRequireDefault(_tech);

	var _utilsDomJs = _dereq_('../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsUrlJs = _dereq_('../utils/url.js');

	var Url = _interopRequireWildcard(_utilsUrlJs);

	var _utilsTimeRangesJs = _dereq_('../utils/time-ranges.js');

	var _flashRtmp = _dereq_('./flash-rtmp');

	var _flashRtmp2 = _interopRequireDefault(_flashRtmp);

	var _component = _dereq_('../component');

	var _component2 = _interopRequireDefault(_component);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _objectAssign = _dereq_('object.assign');

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var navigator = _globalWindow2['default'].navigator;
	/**
	 * Flash Media Controller - Wrapper for fallback SWF API
	 *
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready Ready callback function
	 * @extends Tech
	 * @class Flash
	 */

	var Flash = (function (_Tech) {
	  _inherits(Flash, _Tech);

	  function Flash(options, ready) {
	    _classCallCheck(this, Flash);

	    _Tech.call(this, options, ready);

	    // Set the source when ready
	    if (options.source) {
	      this.ready(function () {
	        this.setSource(options.source);
	      }, true);
	    }

	    // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers
	    // This allows resetting the playhead when we catch the reload
	    if (options.startTime) {
	      this.ready(function () {
	        this.load();
	        this.play();
	        this.currentTime(options.startTime);
	      }, true);
	    }

	    // Add global window functions that the swf expects
	    // A 4.x workflow we weren't able to solve for in 5.0
	    // because of the need to hard code these functions
	    // into the swf for security reasons
	    _globalWindow2['default'].videojs = _globalWindow2['default'].videojs || {};
	    _globalWindow2['default'].videojs.Flash = _globalWindow2['default'].videojs.Flash || {};
	    _globalWindow2['default'].videojs.Flash.onReady = Flash.onReady;
	    _globalWindow2['default'].videojs.Flash.onEvent = Flash.onEvent;
	    _globalWindow2['default'].videojs.Flash.onError = Flash.onError;

	    this.on('seeked', function () {
	      this.lastSeekTarget_ = undefined;
	    });
	  }

	  // Create setters and getters for attributes

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  Flash.prototype.createEl = function createEl() {
	    var options = this.options_;

	    // If video.js is hosted locally you should also set the location
	    // for the hosted swf, which should be relative to the page (not video.js)
	    // Otherwise this adds a CDN url.
	    // The CDN also auto-adds a swf URL for that specific version.
	    if (!options.swf) {
	      options.swf = '//vjs.zencdn.net/swf/5.1.0/video-js.swf';
	    }

	    // Generate ID for swf object
	    var objId = options.techId;

	    // Merge default flashvars with ones passed in to init
	    var flashVars = _objectAssign2['default']({

	      // SWF Callback Functions
	      'readyFunction': 'videojs.Flash.onReady',
	      'eventProxyFunction': 'videojs.Flash.onEvent',
	      'errorEventProxyFunction': 'videojs.Flash.onError',

	      // Player Settings
	      'autoplay': options.autoplay,
	      'preload': options.preload,
	      'loop': options.loop,
	      'muted': options.muted

	    }, options.flashVars);

	    // Merge default parames with ones passed in
	    var params = _objectAssign2['default']({
	      'wmode': 'opaque', // Opaque is needed to overlay controls, but can affect playback performance
	      'bgcolor': '#000000' // Using bgcolor prevents a white flash when the object is loading
	    }, options.params);

	    // Merge default attributes with ones passed in
	    var attributes = _objectAssign2['default']({
	      'id': objId,
	      'name': objId, // Both ID and Name needed or swf to identify itself
	      'class': 'vjs-tech'
	    }, options.attributes);

	    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);
	    this.el_.tech = this;

	    return this.el_;
	  };

	  /**
	   * Play for flash tech
	   *
	   * @method play
	   */

	  Flash.prototype.play = function play() {
	    if (this.ended()) {
	      this.setCurrentTime(0);
	    }
	    this.el_.vjs_play();
	  };

	  /**
	   * Pause for flash tech
	   *
	   * @method pause
	   */

	  Flash.prototype.pause = function pause() {
	    this.el_.vjs_pause();
	  };

	  /**
	   * Get/set video
	   *
	   * @param {Object=} src Source object
	   * @return {Object}
	   * @method src
	   */

	  Flash.prototype.src = function src(_src) {
	    if (_src === undefined) {
	      return this.currentSrc();
	    }

	    // Setting src through `src` not `setSrc` will be deprecated
	    return this.setSrc(_src);
	  };

	  /**
	   * Set video
	   *
	   * @param {Object=} src Source object
	   * @deprecated
	   * @method setSrc
	   */

	  Flash.prototype.setSrc = function setSrc(src) {
	    // Make sure source URL is absolute.
	    src = Url.getAbsoluteURL(src);
	    this.el_.vjs_src(src);

	    // Currently the SWF doesn't autoplay if you load a source later.
	    // e.g. Load player w/ no source, wait 2s, set src.
	    if (this.autoplay()) {
	      var tech = this;
	      this.setTimeout(function () {
	        tech.play();
	      }, 0);
	    }
	  };

	  /**
	   * Returns true if the tech is currently seeking.
	   * @return {boolean} true if seeking
	   */

	  Flash.prototype.seeking = function seeking() {
	    return this.lastSeekTarget_ !== undefined;
	  };

	  /**
	   * Set current time
	   *
	   * @param {Number} time Current time of video
	   * @method setCurrentTime
	   */

	  Flash.prototype.setCurrentTime = function setCurrentTime(time) {
	    var seekable = this.seekable();
	    if (seekable.length) {
	      // clamp to the current seekable range
	      time = time > seekable.start(0) ? time : seekable.start(0);
	      time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);

	      this.lastSeekTarget_ = time;
	      this.trigger('seeking');
	      this.el_.vjs_setProperty('currentTime', time);
	      _Tech.prototype.setCurrentTime.call(this);
	    }
	  };

	  /**
	   * Get current time
	   *
	   * @param {Number=} time Current time of video
	   * @return {Number} Current time
	   * @method currentTime
	   */

	  Flash.prototype.currentTime = function currentTime(time) {
	    // when seeking make the reported time keep up with the requested time
	    // by reading the time we're seeking to
	    if (this.seeking()) {
	      return this.lastSeekTarget_ || 0;
	    }
	    return this.el_.vjs_getProperty('currentTime');
	  };

	  /**
	   * Get current source
	   *
	   * @method currentSrc
	   */

	  Flash.prototype.currentSrc = function currentSrc() {
	    if (this.currentSource_) {
	      return this.currentSource_.src;
	    } else {
	      return this.el_.vjs_getProperty('currentSrc');
	    }
	  };

	  /**
	   * Get media duration
	   *
	   * @returns {Number} Media duration
	   */

	  Flash.prototype.duration = function duration() {
	    if (this.readyState() === 0) {
	      return NaN;
	    } else {
	      var duration = this.el_.vjs_getProperty('duration');
	      return duration >= 0 ? duration : Infinity;
	    }
	  };

	  /**
	   * Load media into player
	   *
	   * @method load
	   */

	  Flash.prototype.load = function load() {
	    this.el_.vjs_load();
	  };

	  /**
	   * Get poster
	   *
	   * @method poster
	   */

	  Flash.prototype.poster = function poster() {
	    this.el_.vjs_getProperty('poster');
	  };

	  /**
	   * Poster images are not handled by the Flash tech so make this a no-op
	   *
	   * @method setPoster
	   */

	  Flash.prototype.setPoster = function setPoster() {};

	  /**
	   * Determine if can seek in media
	   *
	   * @return {TimeRangeObject}
	   * @method seekable
	   */

	  Flash.prototype.seekable = function seekable() {
	    var duration = this.duration();
	    if (duration === 0) {
	      return _utilsTimeRangesJs.createTimeRange();
	    }
	    return _utilsTimeRangesJs.createTimeRange(0, duration);
	  };

	  /**
	   * Get buffered time range
	   *
	   * @return {TimeRangeObject}
	   * @method buffered
	   */

	  Flash.prototype.buffered = function buffered() {
	    var ranges = this.el_.vjs_getProperty('buffered');
	    if (ranges.length === 0) {
	      return _utilsTimeRangesJs.createTimeRange();
	    }
	    return _utilsTimeRangesJs.createTimeRange(ranges[0][0], ranges[0][1]);
	  };

	  /**
	   * Get fullscreen support -
	   * Flash does not allow fullscreen through javascript
	   * so always returns false
	   *
	   * @return {Boolean} false
	   * @method supportsFullScreen
	   */

	  Flash.prototype.supportsFullScreen = function supportsFullScreen() {
	    return false; // Flash does not allow fullscreen through javascript
	  };

	  /**
	   * Request to enter fullscreen
	   * Flash does not allow fullscreen through javascript
	   * so always returns false
	   *
	   * @return {Boolean} false
	   * @method enterFullScreen
	   */

	  Flash.prototype.enterFullScreen = function enterFullScreen() {
	    return false;
	  };

	  return Flash;
	})(_tech2['default']);

	var _api = Flash.prototype;
	var _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');
	var _readOnly = 'networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight'.split(',');

	function _createSetter(attr) {
	  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);
	  _api['set' + attrUpper] = function (val) {
	    return this.el_.vjs_setProperty(attr, val);
	  };
	}
	function _createGetter(attr) {
	  _api[attr] = function () {
	    return this.el_.vjs_getProperty(attr);
	  };
	}

	// Create getter and setters for all read/write attributes
	for (var i = 0; i < _readWrite.length; i++) {
	  _createGetter(_readWrite[i]);
	  _createSetter(_readWrite[i]);
	}

	// Create getters for read-only attributes
	for (var i = 0; i < _readOnly.length; i++) {
	  _createGetter(_readOnly[i]);
	}

	/* Flash Support Testing -------------------------------------------------------- */

	Flash.isSupported = function () {
	  return Flash.version()[0] >= 10;
	  // return swfobject.hasFlashPlayerVersion('10');
	};

	// Add Source Handler pattern functions to this tech
	_tech2['default'].withSourceHandlers(Flash);

	/*
	 * The default native source handler.
	 * This simply passes the source to the video element. Nothing fancy.
	 *
	 * @param  {Object} source   The source object
	 * @param  {Flash} tech  The instance of the Flash tech
	 */
	Flash.nativeSourceHandler = {};

	/**
	 * Check if Flash can play the given videotype
	 * @param  {String} type    The mimetype to check
	 * @return {String}         'probably', 'maybe', or '' (empty string)
	 */
	Flash.nativeSourceHandler.canPlayType = function (type) {
	  if (type in Flash.formats) {
	    return 'maybe';
	  }

	  return '';
	};

	/*
	 * Check Flash can handle the source natively
	 *
	 * @param  {Object} source  The source object
	 * @param  {Object} options The options passed to the tech
	 * @return {String}         'probably', 'maybe', or '' (empty string)
	 */
	Flash.nativeSourceHandler.canHandleSource = function (source, options) {
	  var type;

	  function guessMimeType(src) {
	    var ext = Url.getFileExtension(src);
	    if (ext) {
	      return 'video/' + ext;
	    }
	    return '';
	  }

	  if (!source.type) {
	    type = guessMimeType(source.src);
	  } else {
	    // Strip code information from the type because we don't get that specific
	    type = source.type.replace(/;.*/, '').toLowerCase();
	  }

	  return Flash.nativeSourceHandler.canPlayType(type);
	};

	/*
	 * Pass the source to the flash object
	 * Adaptive source handlers will have more complicated workflows before passing
	 * video data to the video element
	 *
	 * @param  {Object} source   The source object
	 * @param  {Flash}  tech     The instance of the Flash tech
	 * @param  {Object} options  The options to pass to the source
	 */
	Flash.nativeSourceHandler.handleSource = function (source, tech, options) {
	  tech.setSrc(source.src);
	};

	/*
	 * Clean up the source handler when disposing the player or switching sources..
	 * (no cleanup is needed when supporting the format natively)
	 */
	Flash.nativeSourceHandler.dispose = function () {};

	// Register the native source handler
	Flash.registerSourceHandler(Flash.nativeSourceHandler);

	Flash.formats = {
	  'video/flv': 'FLV',
	  'video/x-flv': 'FLV',
	  'video/mp4': 'MP4',
	  'video/m4v': 'MP4'
	};

	Flash.onReady = function (currSwf) {
	  var el = Dom.getEl(currSwf);
	  var tech = el && el.tech;

	  // if there is no el then the tech has been disposed
	  // and the tech element was removed from the player div
	  if (tech && tech.el()) {
	    // check that the flash object is really ready
	    Flash.checkReady(tech);
	  }
	};

	// The SWF isn't always ready when it says it is. Sometimes the API functions still need to be added to the object.
	// If it's not ready, we set a timeout to check again shortly.
	Flash.checkReady = function (tech) {
	  // stop worrying if the tech has been disposed
	  if (!tech.el()) {
	    return;
	  }

	  // check if API property exists
	  if (tech.el().vjs_getProperty) {
	    // tell tech it's ready
	    tech.triggerReady();
	  } else {
	    // wait longer
	    this.setTimeout(function () {
	      Flash['checkReady'](tech);
	    }, 50);
	  }
	};

	// Trigger events from the swf on the player
	Flash.onEvent = function (swfID, eventName) {
	  var tech = Dom.getEl(swfID).tech;
	  tech.trigger(eventName, Array.prototype.slice.call(arguments, 2));
	};

	// Log errors from the swf
	Flash.onError = function (swfID, err) {
	  var tech = Dom.getEl(swfID).tech;

	  // trigger MEDIA_ERR_SRC_NOT_SUPPORTED
	  if (err === 'srcnotfound') {
	    return tech.error(4);
	  }

	  // trigger a custom error
	  tech.error('FLASH: ' + err);
	};

	// Flash Version Check
	Flash.version = function () {
	  var version = '0,0,0';

	  // IE
	  try {
	    version = new _globalWindow2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];

	    // other browsers
	  } catch (e) {
	    try {
	      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
	        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
	      }
	    } catch (err) {}
	  }
	  return version.split(',');
	};

	// Flash embedding method. Only used in non-iframe mode
	Flash.embed = function (swf, flashVars, params, attributes) {
	  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);

	  // Get element by embedding code and retrieving created element
	  var obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];

	  return obj;
	};

	Flash.getEmbedCode = function (swf, flashVars, params, attributes) {
	  var objTag = '<object type="application/x-shockwave-flash" ';
	  var flashVarsString = '';
	  var paramsString = '';
	  var attrsString = '';

	  // Convert flash vars to string
	  if (flashVars) {
	    Object.getOwnPropertyNames(flashVars).forEach(function (key) {
	      flashVarsString += key + '=' + flashVars[key] + '&amp;';
	    });
	  }

	  // Add swf, flashVars, and other default params
	  params = _objectAssign2['default']({
	    'movie': swf,
	    'flashvars': flashVarsString,
	    'allowScriptAccess': 'always', // Required to talk to swf
	    'allowNetworking': 'all' // All should be default, but having security issues.
	  }, params);

	  // Create param tags string
	  Object.getOwnPropertyNames(params).forEach(function (key) {
	    paramsString += '<param name="' + key + '" value="' + params[key] + '" />';
	  });

	  attributes = _objectAssign2['default']({
	    // Add swf to attributes (need both for IE and Others to work)
	    'data': swf,

	    // Default to 100% width/height
	    'width': '100%',
	    'height': '100%'

	  }, attributes);

	  // Create Attributes string
	  Object.getOwnPropertyNames(attributes).forEach(function (key) {
	    attrsString += key + '="' + attributes[key] + '" ';
	  });

	  return '' + objTag + attrsString + '>' + paramsString + '</object>';
	};

	// Run Flash through the RTMP decorator
	_flashRtmp2['default'](Flash);

	_component2['default'].registerComponent('Flash', Flash);
	_tech2['default'].registerTech('Flash', Flash);
	exports['default'] = Flash;
	module.exports = exports['default'];

	},{"../component":67,"../utils/dom.js":142,"../utils/time-ranges.js":150,"../utils/url.js":152,"./flash-rtmp":120,"./tech":124,"global/window":2,"object.assign":45}],122:[function(_dereq_,module,exports){
	/**
	 * @file html5.js
	 * HTML5 Media Controller - Wrapper for HTML5 Media API
	 */

	'use strict';

	exports.__esModule = true;

	var _templateObject = _taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used. \n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used. \n            This may prevent text tracks from loading.']);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

	var _techJs = _dereq_('./tech.js');

	var _techJs2 = _interopRequireDefault(_techJs);

	var _component = _dereq_('../component');

	var _component2 = _interopRequireDefault(_component);

	var _utilsDomJs = _dereq_('../utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsUrlJs = _dereq_('../utils/url.js');

	var Url = _interopRequireWildcard(_utilsUrlJs);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsLogJs = _dereq_('../utils/log.js');

	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

	var _tsml = _dereq_('tsml');

	var _tsml2 = _interopRequireDefault(_tsml);

	var _srcJsTracksTextTrackJs = _dereq_('../../../src/js/tracks/text-track.js');

	var _srcJsTracksTextTrackJs2 = _interopRequireDefault(_srcJsTracksTextTrackJs);

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _objectAssign = _dereq_('object.assign');

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _utilsMergeOptionsJs = _dereq_('../utils/merge-options.js');

	var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

	var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

	/**
	 * HTML5 Media Controller - Wrapper for HTML5 Media API
	 *
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready Ready callback function
	 * @extends Tech
	 * @class Html5
	 */

	var Html5 = (function (_Tech) {
	  _inherits(Html5, _Tech);

	  function Html5(options, ready) {
	    var _this = this;

	    _classCallCheck(this, Html5);

	    _Tech.call(this, options, ready);

	    var source = options.source;
	    var crossoriginTracks = false;

	    // Set the source if one is provided
	    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
	    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
	    // anyway so the error gets fired.
	    if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
	      this.setSource(source);
	    } else {
	      this.handleLateInit_(this.el_);
	    }

	    if (this.el_.hasChildNodes()) {

	      var nodes = this.el_.childNodes;
	      var nodesLength = nodes.length;
	      var removeNodes = [];

	      while (nodesLength--) {
	        var node = nodes[nodesLength];
	        var nodeName = node.nodeName.toLowerCase();

	        if (nodeName === 'track') {
	          if (!this.featuresNativeTextTracks) {
	            // Empty video tag tracks so the built-in player doesn't use them also.
	            // This may not be fast enough to stop HTML5 browsers from reading the tags
	            // so we'll need to turn off any default tracks if we're manually doing
	            // captions and subtitles. videoElement.textTracks
	            removeNodes.push(node);
	          } else {
	            // store HTMLTrackElement and TextTrack to remote list
	            this.remoteTextTrackEls().addTrackElement_(node);
	            this.remoteTextTracks().addTrack_(node.track);
	            if (!crossoriginTracks && !this.el_.hasAttribute('crossorigin') && Url.isCrossOrigin(node.src)) {
	              crossoriginTracks = true;
	            }
	          }
	        }
	      }

	      for (var i = 0; i < removeNodes.length; i++) {
	        this.el_.removeChild(removeNodes[i]);
	      }
	    }

	    var trackTypes = ['audio', 'video'];

	    // ProxyNativeTextTracks
	    trackTypes.forEach(function (type) {
	      var capitalType = _utilsToTitleCaseJs2['default'](type);

	      if (!_this['featuresNative' + capitalType + 'Tracks']) {
	        return;
	      }
	      var tl = _this.el()[type + 'Tracks'];

	      if (tl && tl.addEventListener) {
	        tl.addEventListener('change', Fn.bind(_this, _this['handle' + capitalType + 'TrackChange_']));
	        tl.addEventListener('addtrack', Fn.bind(_this, _this['handle' + capitalType + 'TrackAdd_']));
	        tl.addEventListener('removetrack', Fn.bind(_this, _this['handle' + capitalType + 'TrackRemove_']));

	        // Remove (native) trackts that are not used anymore
	        _this.on('loadstart', _this['removeOld' + capitalType + 'Tracks_']);
	      }
	    });

	    if (this.featuresNativeTextTracks) {
	      if (crossoriginTracks) {
	        _utilsLogJs2['default'].warn(_tsml2['default'](_templateObject));
	      }

	      this.handleTextTrackChange_ = Fn.bind(this, this.handleTextTrackChange);
	      this.handleTextTrackAdd_ = Fn.bind(this, this.handleTextTrackAdd);
	      this.handleTextTrackRemove_ = Fn.bind(this, this.handleTextTrackRemove);
	      this.proxyNativeTextTracks_();
	    }

	    // Determine if native controls should be used
	    // Our goal should be to get the custom controls on mobile solid everywhere
	    // so we can remove this all together. Right now this will block custom
	    // controls on touch enabled laptops like the Chrome Pixel
	    if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
	      this.setControls(true);
	    }

	    this.triggerReady();
	  }

	  /* HTML5 Support Testing ---------------------------------------------------- */

	  /*
	  * Element for testing browser HTML5 video capabilities
	  *
	  * @type {Element}
	  * @constant
	  * @private
	  */

	  /**
	   * Dispose of html5 media element
	   *
	   * @method dispose
	   */

	  Html5.prototype.dispose = function dispose() {
	    var _this2 = this;

	    // Un-ProxyNativeTracks
	    ['audio', 'video', 'text'].forEach(function (type) {
	      var capitalType = _utilsToTitleCaseJs2['default'](type);
	      var tl = _this2.el_[type + 'Tracks'];

	      if (tl && tl.removeEventListener) {
	        tl.removeEventListener('change', _this2['handle' + capitalType + 'TrackChange_']);
	        tl.removeEventListener('addtrack', _this2['handle' + capitalType + 'TrackAdd_']);
	        tl.removeEventListener('removetrack', _this2['handle' + capitalType + 'TrackRemove_']);
	      }

	      // Stop removing old text tracks
	      if (tl) {
	        _this2.off('loadstart', _this2['removeOld' + capitalType + 'Tracks_']);
	      }
	    });

	    Html5.disposeMediaElement(this.el_);
	    // tech will handle clearing of the emulated track list
	    _Tech.prototype.dispose.call(this);
	  };

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  Html5.prototype.createEl = function createEl() {
	    var el = this.options_.tag;

	    // Check if this browser supports moving the element into the box.
	    // On the iPhone video will break if you move the element,
	    // So we have to create a brand new element.
	    if (!el || this['movingMediaElementInDOM'] === false) {

	      // If the original tag is still there, clone and remove it.
	      if (el) {
	        var clone = el.cloneNode(true);
	        el.parentNode.insertBefore(clone, el);
	        Html5.disposeMediaElement(el);
	        el = clone;
	      } else {
	        el = _globalDocument2['default'].createElement('video');

	        // determine if native controls should be used
	        var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);
	        var attributes = _utilsMergeOptionsJs2['default']({}, tagAttributes);
	        if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
	          delete attributes.controls;
	        }

	        Dom.setElAttributes(el, _objectAssign2['default'](attributes, {
	          id: this.options_.techId,
	          'class': 'vjs-tech'
	        }));
	      }
	    }

	    // Update specific tag settings, in case they were overridden
	    var settingsAttrs = ['autoplay', 'preload', 'loop', 'muted'];
	    for (var i = settingsAttrs.length - 1; i >= 0; i--) {
	      var attr = settingsAttrs[i];
	      var overwriteAttrs = {};
	      if (typeof this.options_[attr] !== 'undefined') {
	        overwriteAttrs[attr] = this.options_[attr];
	      }
	      Dom.setElAttributes(el, overwriteAttrs);
	    }

	    return el;
	    // jenniisawesome = true;
	  };

	  // If we're loading the playback object after it has started loading
	  // or playing the video (often with autoplay on) then the loadstart event
	  // has already fired and we need to fire it manually because many things
	  // rely on it.

	  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
	    var _this3 = this;

	    if (el.networkState === 0 || el.networkState === 3) {
	      // The video element hasn't started loading the source yet
	      // or didn't find a source
	      return;
	    }

	    if (el.readyState === 0) {
	      var _ret = (function () {
	        // NetworkState is set synchronously BUT loadstart is fired at the
	        // end of the current stack, usually before setInterval(fn, 0).
	        // So at this point we know loadstart may have already fired or is
	        // about to fire, and either way the player hasn't seen it yet.
	        // We don't want to fire loadstart prematurely here and cause a
	        // double loadstart so we'll wait and see if it happens between now
	        // and the next loop, and fire it if not.
	        // HOWEVER, we also want to make sure it fires before loadedmetadata
	        // which could also happen between now and the next loop, so we'll
	        // watch for that also.
	        var loadstartFired = false;
	        var setLoadstartFired = function setLoadstartFired() {
	          loadstartFired = true;
	        };
	        _this3.on('loadstart', setLoadstartFired);

	        var triggerLoadstart = function triggerLoadstart() {
	          // We did miss the original loadstart. Make sure the player
	          // sees loadstart before loadedmetadata
	          if (!loadstartFired) {
	            this.trigger('loadstart');
	          }
	        };
	        _this3.on('loadedmetadata', triggerLoadstart);

	        _this3.ready(function () {
	          this.off('loadstart', setLoadstartFired);
	          this.off('loadedmetadata', triggerLoadstart);

	          if (!loadstartFired) {
	            // We did miss the original native loadstart. Fire it now.
	            this.trigger('loadstart');
	          }
	        });

	        return {
	          v: undefined
	        };
	      })();

	      if (typeof _ret === 'object') return _ret.v;
	    }

	    // From here on we know that loadstart already fired and we missed it.
	    // The other readyState events aren't as much of a problem if we double
	    // them, so not going to go to as much trouble as loadstart to prevent
	    // that unless we find reason to.
	    var eventsToTrigger = ['loadstart'];

	    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
	    eventsToTrigger.push('loadedmetadata');

	    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
	    if (el.readyState >= 2) {
	      eventsToTrigger.push('loadeddata');
	    }

	    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
	    if (el.readyState >= 3) {
	      eventsToTrigger.push('canplay');
	    }

	    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
	    if (el.readyState >= 4) {
	      eventsToTrigger.push('canplaythrough');
	    }

	    // We still need to give the player time to add event listeners
	    this.ready(function () {
	      eventsToTrigger.forEach(function (type) {
	        this.trigger(type);
	      }, this);
	    });
	  };

	  Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {
	    var tt = this.el().textTracks;

	    if (tt) {
	      // Add tracks - if player is initialised after DOM loaded, textTracks
	      // will not trigger addtrack
	      for (var i = 0; i < tt.length; i++) {
	        this.textTracks().addTrack_(tt[i]);
	      }

	      if (tt.addEventListener) {
	        tt.addEventListener('change', this.handleTextTrackChange_);
	        tt.addEventListener('addtrack', this.handleTextTrackAdd_);
	        tt.addEventListener('removetrack', this.handleTextTrackRemove_);
	      }

	      // Remove (native) texttracks that are not used anymore
	      this.on('loadstart', this.removeOldTextTracks_);
	    }
	  };

	  Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {
	    var tt = this.textTracks();
	    this.textTracks().trigger({
	      type: 'change',
	      target: tt,
	      currentTarget: tt,
	      srcElement: tt
	    });
	  };

	  Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {
	    this.textTracks().addTrack_(e.track);
	  };

	  Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {
	    this.textTracks().removeTrack_(e.track);
	  };

	  Html5.prototype.handleVideoTrackChange_ = function handleVideoTrackChange_(e) {
	    var vt = this.videoTracks();
	    this.videoTracks().trigger({
	      type: 'change',
	      target: vt,
	      currentTarget: vt,
	      srcElement: vt
	    });
	  };

	  Html5.prototype.handleVideoTrackAdd_ = function handleVideoTrackAdd_(e) {
	    this.videoTracks().addTrack_(e.track);
	  };

	  Html5.prototype.handleVideoTrackRemove_ = function handleVideoTrackRemove_(e) {
	    this.videoTracks().removeTrack_(e.track);
	  };

	  Html5.prototype.handleAudioTrackChange_ = function handleAudioTrackChange_(e) {
	    var audioTrackList = this.audioTracks();
	    this.audioTracks().trigger({
	      type: 'change',
	      target: audioTrackList,
	      currentTarget: audioTrackList,
	      srcElement: audioTrackList
	    });
	  };

	  Html5.prototype.handleAudioTrackAdd_ = function handleAudioTrackAdd_(e) {
	    this.audioTracks().addTrack_(e.track);
	  };

	  Html5.prototype.handleAudioTrackRemove_ = function handleAudioTrackRemove_(e) {
	    this.audioTracks().removeTrack_(e.track);
	  };

	  /**
	   * This is a helper function that is used in removeOldTextTracks_, removeOldAudioTracks_ and
	   * removeOldVideoTracks_
	   * @param {Track[]} techTracks Tracks for this tech
	   * @param {Track[]} elTracks Tracks for the HTML5 video element
	   * @private
	   */

	  Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {
	    // This will loop over the techTracks and check if they are still used by the HTML5 video element
	    // If not, they will be removed from the emulated list
	    var removeTracks = [];
	    if (!elTracks) {
	      return;
	    }

	    for (var i = 0; i < techTracks.length; i++) {
	      var techTrack = techTracks[i];

	      var found = false;
	      for (var j = 0; j < elTracks.length; j++) {
	        if (elTracks[j] === techTrack) {
	          found = true;
	          break;
	        }
	      }

	      if (!found) {
	        removeTracks.push(techTrack);
	      }
	    }

	    for (var i = 0; i < removeTracks.length; i++) {
	      var _track = removeTracks[i];
	      techTracks.removeTrack_(_track);
	    }
	  };

	  Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_() {
	    var techTracks = this.textTracks();
	    var elTracks = this.el().textTracks;
	    this.removeOldTracks_(techTracks, elTracks);
	  };

	  Html5.prototype.removeOldAudioTracks_ = function removeOldAudioTracks_() {
	    var techTracks = this.audioTracks();
	    var elTracks = this.el().audioTracks;
	    this.removeOldTracks_(techTracks, elTracks);
	  };

	  Html5.prototype.removeOldVideoTracks_ = function removeOldVideoTracks_() {
	    var techTracks = this.videoTracks();
	    var elTracks = this.el().videoTracks;
	    this.removeOldTracks_(techTracks, elTracks);
	  };

	  /**
	   * Play for html5 tech
	   *
	   * @method play
	   */

	  Html5.prototype.play = function play() {
	    var playPromise = this.el_.play();

	    // Catch/silence error when a pause interrupts a play request
	    // on browsers which return a promise
	    if (playPromise !== undefined && typeof playPromise.then === 'function') {
	      playPromise.then(null, function (e) {});
	    }
	  };

	  /**
	   * Pause for html5 tech
	   *
	   * @method pause
	   */

	  Html5.prototype.pause = function pause() {
	    this.el_.pause();
	  };

	  /**
	   * Paused for html5 tech
	   *
	   * @return {Boolean}
	   * @method paused
	   */

	  Html5.prototype.paused = function paused() {
	    return this.el_.paused;
	  };

	  /**
	   * Get current time
	   *
	   * @return {Number}
	   * @method currentTime
	   */

	  Html5.prototype.currentTime = function currentTime() {
	    return this.el_.currentTime;
	  };

	  /**
	   * Set current time
	   *
	   * @param {Number} seconds Current time of video
	   * @method setCurrentTime
	   */

	  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
	    try {
	      this.el_.currentTime = seconds;
	    } catch (e) {
	      _utilsLogJs2['default'](e, 'Video is not ready. (Video.js)');
	      // this.warning(VideoJS.warnings.videoNotReady);
	    }
	  };

	  /**
	   * Get duration
	   *
	   * @return {Number}
	   * @method duration
	   */

	  Html5.prototype.duration = function duration() {
	    return this.el_.duration || 0;
	  };

	  /**
	   * Get a TimeRange object that represents the intersection
	   * of the time ranges for which the user agent has all
	   * relevant media
	   *
	   * @return {TimeRangeObject}
	   * @method buffered
	   */

	  Html5.prototype.buffered = function buffered() {
	    return this.el_.buffered;
	  };

	  /**
	   * Get volume level
	   *
	   * @return {Number}
	   * @method volume
	   */

	  Html5.prototype.volume = function volume() {
	    return this.el_.volume;
	  };

	  /**
	   * Set volume level
	   *
	   * @param {Number} percentAsDecimal Volume percent as a decimal
	   * @method setVolume
	   */

	  Html5.prototype.setVolume = function setVolume(percentAsDecimal) {
	    this.el_.volume = percentAsDecimal;
	  };

	  /**
	   * Get if muted
	   *
	   * @return {Boolean}
	   * @method muted
	   */

	  Html5.prototype.muted = function muted() {
	    return this.el_.muted;
	  };

	  /**
	   * Set muted
	   *
	   * @param {Boolean} If player is to be muted or note
	   * @method setMuted
	   */

	  Html5.prototype.setMuted = function setMuted(muted) {
	    this.el_.muted = muted;
	  };

	  /**
	   * Get player width
	   *
	   * @return {Number}
	   * @method width
	   */

	  Html5.prototype.width = function width() {
	    return this.el_.offsetWidth;
	  };

	  /**
	   * Get player height
	   *
	   * @return {Number}
	   * @method height
	   */

	  Html5.prototype.height = function height() {
	    return this.el_.offsetHeight;
	  };

	  /**
	   * Get if there is fullscreen support
	   *
	   * @return {Boolean}
	   * @method supportsFullScreen
	   */

	  Html5.prototype.supportsFullScreen = function supportsFullScreen() {
	    if (typeof this.el_.webkitEnterFullScreen === 'function') {
	      var userAgent = _globalWindow2['default'].navigator.userAgent;
	      // Seems to be broken in Chromium/Chrome && Safari in Leopard
	      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
	        return true;
	      }
	    }
	    return false;
	  };

	  /**
	   * Request to enter fullscreen
	   *
	   * @method enterFullScreen
	   */

	  Html5.prototype.enterFullScreen = function enterFullScreen() {
	    var video = this.el_;

	    if ('webkitDisplayingFullscreen' in video) {
	      this.one('webkitbeginfullscreen', function () {
	        this.one('webkitendfullscreen', function () {
	          this.trigger('fullscreenchange', { isFullscreen: false });
	        });

	        this.trigger('fullscreenchange', { isFullscreen: true });
	      });
	    }

	    if (video.paused && video.networkState <= video.HAVE_METADATA) {
	      // attempt to prime the video element for programmatic access
	      // this isn't necessary on the desktop but shouldn't hurt
	      this.el_.play();

	      // playing and pausing synchronously during the transition to fullscreen
	      // can get iOS ~6.1 devices into a play/pause loop
	      this.setTimeout(function () {
	        video.pause();
	        video.webkitEnterFullScreen();
	      }, 0);
	    } else {
	      video.webkitEnterFullScreen();
	    }
	  };

	  /**
	   * Request to exit fullscreen
	   *
	   * @method exitFullScreen
	   */

	  Html5.prototype.exitFullScreen = function exitFullScreen() {
	    this.el_.webkitExitFullScreen();
	  };

	  /**
	   * Get/set video
	   *
	   * @param {Object=} src Source object
	   * @return {Object}
	   * @method src
	   */

	  Html5.prototype.src = function src(_src) {
	    if (_src === undefined) {
	      return this.el_.src;
	    } else {
	      // Setting src through `src` instead of `setSrc` will be deprecated
	      this.setSrc(_src);
	    }
	  };

	  /**
	   * Set video
	   *
	   * @param {Object} src Source object
	   * @deprecated
	   * @method setSrc
	   */

	  Html5.prototype.setSrc = function setSrc(src) {
	    this.el_.src = src;
	  };

	  /**
	   * Load media into player
	   *
	   * @method load
	   */

	  Html5.prototype.load = function load() {
	    this.el_.load();
	  };

	  /**
	   * Reset the tech. Removes all sources and calls `load`.
	   *
	   * @method reset
	   */

	  Html5.prototype.reset = function reset() {
	    Html5.resetMediaElement(this.el_);
	  };

	  /**
	   * Get current source
	   *
	   * @return {Object}
	   * @method currentSrc
	   */

	  Html5.prototype.currentSrc = function currentSrc() {
	    if (this.currentSource_) {
	      return this.currentSource_.src;
	    } else {
	      return this.el_.currentSrc;
	    }
	  };

	  /**
	   * Get poster
	   *
	   * @return {String}
	   * @method poster
	   */

	  Html5.prototype.poster = function poster() {
	    return this.el_.poster;
	  };

	  /**
	   * Set poster
	   *
	   * @param {String} val URL to poster image
	   * @method
	   */

	  Html5.prototype.setPoster = function setPoster(val) {
	    this.el_.poster = val;
	  };

	  /**
	   * Get preload attribute
	   *
	   * @return {String}
	   * @method preload
	   */

	  Html5.prototype.preload = function preload() {
	    return this.el_.preload;
	  };

	  /**
	   * Set preload attribute
	   *
	   * @param {String} val Value for preload attribute
	   * @method setPreload
	   */

	  Html5.prototype.setPreload = function setPreload(val) {
	    this.el_.preload = val;
	  };

	  /**
	   * Get autoplay attribute
	   *
	   * @return {String}
	   * @method autoplay
	   */

	  Html5.prototype.autoplay = function autoplay() {
	    return this.el_.autoplay;
	  };

	  /**
	   * Set autoplay attribute
	   *
	   * @param {String} val Value for preload attribute
	   * @method setAutoplay
	   */

	  Html5.prototype.setAutoplay = function setAutoplay(val) {
	    this.el_.autoplay = val;
	  };

	  /**
	   * Get controls attribute
	   *
	   * @return {String}
	   * @method controls
	   */

	  Html5.prototype.controls = function controls() {
	    return this.el_.controls;
	  };

	  /**
	   * Set controls attribute
	   *
	   * @param {String} val Value for controls attribute
	   * @method setControls
	   */

	  Html5.prototype.setControls = function setControls(val) {
	    this.el_.controls = !!val;
	  };

	  /**
	   * Get loop attribute
	   *
	   * @return {String}
	   * @method loop
	   */

	  Html5.prototype.loop = function loop() {
	    return this.el_.loop;
	  };

	  /**
	   * Set loop attribute
	   *
	   * @param {String} val Value for loop attribute
	   * @method setLoop
	   */

	  Html5.prototype.setLoop = function setLoop(val) {
	    this.el_.loop = val;
	  };

	  /**
	   * Get error value
	   *
	   * @return {String}
	   * @method error
	   */

	  Html5.prototype.error = function error() {
	    return this.el_.error;
	  };

	  /**
	   * Get whether or not the player is in the "seeking" state
	   *
	   * @return {Boolean}
	   * @method seeking
	   */

	  Html5.prototype.seeking = function seeking() {
	    return this.el_.seeking;
	  };

	  /**
	   * Get a TimeRanges object that represents the
	   * ranges of the media resource to which it is possible
	   * for the user agent to seek.
	   *
	   * @return {TimeRangeObject}
	   * @method seekable
	   */

	  Html5.prototype.seekable = function seekable() {
	    return this.el_.seekable;
	  };

	  /**
	   * Get if video ended
	   *
	   * @return {Boolean}
	   * @method ended
	   */

	  Html5.prototype.ended = function ended() {
	    return this.el_.ended;
	  };

	  /**
	   * Get the value of the muted content attribute
	   * This attribute has no dynamic effect, it only
	   * controls the default state of the element
	   *
	   * @return {Boolean}
	   * @method defaultMuted
	   */

	  Html5.prototype.defaultMuted = function defaultMuted() {
	    return this.el_.defaultMuted;
	  };

	  /**
	   * Get desired speed at which the media resource is to play
	   *
	   * @return {Number}
	   * @method playbackRate
	   */

	  Html5.prototype.playbackRate = function playbackRate() {
	    return this.el_.playbackRate;
	  };

	  /**
	   * Returns a TimeRanges object that represents the ranges of the
	   * media resource that the user agent has played.
	   * @return {TimeRangeObject} the range of points on the media
	   * timeline that has been reached through normal playback
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-played
	   */

	  Html5.prototype.played = function played() {
	    return this.el_.played;
	  };

	  /**
	   * Set desired speed at which the media resource is to play
	   *
	   * @param {Number} val Speed at which the media resource is to play
	   * @method setPlaybackRate
	   */

	  Html5.prototype.setPlaybackRate = function setPlaybackRate(val) {
	    this.el_.playbackRate = val;
	  };

	  /**
	   * Get the current state of network activity for the element, from
	   * the list below
	   * NETWORK_EMPTY (numeric value 0)
	   * NETWORK_IDLE (numeric value 1)
	   * NETWORK_LOADING (numeric value 2)
	   * NETWORK_NO_SOURCE (numeric value 3)
	   *
	   * @return {Number}
	   * @method networkState
	   */

	  Html5.prototype.networkState = function networkState() {
	    return this.el_.networkState;
	  };

	  /**
	   * Get a value that expresses the current state of the element
	   * with respect to rendering the current playback position, from
	   * the codes in the list below
	   * HAVE_NOTHING (numeric value 0)
	   * HAVE_METADATA (numeric value 1)
	   * HAVE_CURRENT_DATA (numeric value 2)
	   * HAVE_FUTURE_DATA (numeric value 3)
	   * HAVE_ENOUGH_DATA (numeric value 4)
	   *
	   * @return {Number}
	   * @method readyState
	   */

	  Html5.prototype.readyState = function readyState() {
	    return this.el_.readyState;
	  };

	  /**
	   * Get width of video
	   *
	   * @return {Number}
	   * @method videoWidth
	   */

	  Html5.prototype.videoWidth = function videoWidth() {
	    return this.el_.videoWidth;
	  };

	  /**
	   * Get height of video
	   *
	   * @return {Number}
	   * @method videoHeight
	   */

	  Html5.prototype.videoHeight = function videoHeight() {
	    return this.el_.videoHeight;
	  };

	  /**
	   * Get text tracks
	   *
	   * @return {TextTrackList}
	   * @method textTracks
	   */

	  Html5.prototype.textTracks = function textTracks() {
	    return _Tech.prototype.textTracks.call(this);
	  };

	  /**
	   * Creates and returns a text track object
	   *
	   * @param {String} kind Text track kind (subtitles, captions, descriptions
	   *                                       chapters and metadata)
	   * @param {String=} label Label to identify the text track
	   * @param {String=} language Two letter language abbreviation
	   * @return {TextTrackObject}
	   * @method addTextTrack
	   */

	  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (!this['featuresNativeTextTracks']) {
	      return _Tech.prototype.addTextTrack.call(this, kind, label, language);
	    }

	    return this.el_.addTextTrack(kind, label, language);
	  };

	  /**
	   * Creates a remote text track object and returns a html track element
	   *
	   * @param {Object} options The object should contain values for
	   * kind, language, label and src (location of the WebVTT file)
	   * @return {HTMLTrackElement}
	   * @method addRemoteTextTrack
	   */

	  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    if (!this['featuresNativeTextTracks']) {
	      return _Tech.prototype.addRemoteTextTrack.call(this, options);
	    }

	    var htmlTrackElement = _globalDocument2['default'].createElement('track');

	    if (options.kind) {
	      htmlTrackElement.kind = options.kind;
	    }
	    if (options.label) {
	      htmlTrackElement.label = options.label;
	    }
	    if (options.language || options.srclang) {
	      htmlTrackElement.srclang = options.language || options.srclang;
	    }
	    if (options['default']) {
	      htmlTrackElement['default'] = options['default'];
	    }
	    if (options.id) {
	      htmlTrackElement.id = options.id;
	    }
	    if (options.src) {
	      htmlTrackElement.src = options.src;
	    }

	    this.el().appendChild(htmlTrackElement);

	    // store HTMLTrackElement and TextTrack to remote list
	    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
	    this.remoteTextTracks().addTrack_(htmlTrackElement.track);

	    return htmlTrackElement;
	  };

	  /**
	   * Remove remote text track from TextTrackList object
	   *
	   * @param {TextTrackObject} track Texttrack object to remove
	   * @method removeRemoteTextTrack
	   */

	  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
	    if (!this['featuresNativeTextTracks']) {
	      return _Tech.prototype.removeRemoteTextTrack.call(this, track);
	    }

	    var tracks = undefined,
	        i = undefined;

	    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

	    // remove HTMLTrackElement and TextTrack from remote list
	    this.remoteTextTrackEls().removeTrackElement_(trackElement);
	    this.remoteTextTracks().removeTrack_(track);

	    tracks = this.$$('track');

	    i = tracks.length;
	    while (i--) {
	      if (track === tracks[i] || track === tracks[i].track) {
	        this.el().removeChild(tracks[i]);
	      }
	    }
	  };

	  return Html5;
	})(_techJs2['default']);

	Html5.TEST_VID = _globalDocument2['default'].createElement('video');
	var track = _globalDocument2['default'].createElement('track');
	track.kind = 'captions';
	track.srclang = 'en';
	track.label = 'English';
	Html5.TEST_VID.appendChild(track);

	/*
	 * Check if HTML5 video is supported by this browser/device
	 *
	 * @return {Boolean}
	 */
	Html5.isSupported = function () {
	  // IE9 with no Media Player is a LIAR! (#984)
	  try {
	    Html5.TEST_VID['volume'] = 0.5;
	  } catch (e) {
	    return false;
	  }

	  return !!Html5.TEST_VID.canPlayType;
	};

	// Add Source Handler pattern functions to this tech
	_techJs2['default'].withSourceHandlers(Html5);

	/*
	 * The default native source handler.
	 * This simply passes the source to the video element. Nothing fancy.
	 *
	 * @param  {Object} source   The source object
	 * @param  {Html5} tech  The instance of the HTML5 tech
	 */
	Html5.nativeSourceHandler = {};

	/*
	 * Check if the video element can play the given videotype
	 *
	 * @param  {String} type    The mimetype to check
	 * @return {String}         'probably', 'maybe', or '' (empty string)
	 */
	Html5.nativeSourceHandler.canPlayType = function (type) {
	  // IE9 on Windows 7 without MediaPlayer throws an error here
	  // https://github.com/videojs/video.js/issues/519
	  try {
	    return Html5.TEST_VID.canPlayType(type);
	  } catch (e) {
	    return '';
	  }
	};

	/*
	 * Check if the video element can handle the source natively
	 *
	 * @param  {Object} source  The source object
	 * @param  {Object} options The options passed to the tech
	 * @return {String}         'probably', 'maybe', or '' (empty string)
	 */
	Html5.nativeSourceHandler.canHandleSource = function (source, options) {
	  var match, ext;

	  // If a type was provided we should rely on that
	  if (source.type) {
	    return Html5.nativeSourceHandler.canPlayType(source.type);
	  } else if (source.src) {
	    // If no type, fall back to checking 'video/[EXTENSION]'
	    ext = Url.getFileExtension(source.src);

	    return Html5.nativeSourceHandler.canPlayType('video/' + ext);
	  }

	  return '';
	};

	/*
	 * Pass the source to the video element
	 * Adaptive source handlers will have more complicated workflows before passing
	 * video data to the video element
	 *
	 * @param  {Object} source   The source object
	 * @param  {Html5}  tech     The instance of the Html5 tech
	 * @param  {Object} options  The options to pass to the source
	 */
	Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
	  tech.setSrc(source.src);
	};

	/*
	* Clean up the source handler when disposing the player or switching sources..
	* (no cleanup is needed when supporting the format natively)
	*/
	Html5.nativeSourceHandler.dispose = function () {};

	// Register the native source handler
	Html5.registerSourceHandler(Html5.nativeSourceHandler);

	/*
	 * Check if the volume can be changed in this browser/device.
	 * Volume cannot be changed in a lot of mobile devices.
	 * Specifically, it can't be changed from 1 on iOS.
	 *
	 * @return {Boolean}
	 */
	Html5.canControlVolume = function () {
	  // IE will error if Windows Media Player not installed #3315
	  try {
	    var volume = Html5.TEST_VID.volume;
	    Html5.TEST_VID.volume = volume / 2 + 0.1;
	    return volume !== Html5.TEST_VID.volume;
	  } catch (e) {
	    return false;
	  }
	};

	/*
	 * Check if playbackRate is supported in this browser/device.
	 *
	 * @return {Boolean}
	 */
	Html5.canControlPlaybackRate = function () {
	  // Playback rate API is implemented in Android Chrome, but doesn't do anything
	  // https://github.com/videojs/video.js/issues/3180
	  if (browser.IS_ANDROID && browser.IS_CHROME) {
	    return false;
	  }
	  // IE will error if Windows Media Player not installed #3315
	  try {
	    var playbackRate = Html5.TEST_VID.playbackRate;
	    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
	    return playbackRate !== Html5.TEST_VID.playbackRate;
	  } catch (e) {
	    return false;
	  }
	};

	/*
	 * Check to see if native text tracks are supported by this browser/device
	 *
	 * @return {Boolean}
	 */
	Html5.supportsNativeTextTracks = function () {
	  var supportsTextTracks;

	  // Figure out native text track support
	  // If mode is a number, we cannot change it because it'll disappear from view.
	  // Browsers with numeric modes include IE10 and older (<=2013) samsung android models.
	  // Firefox isn't playing nice either with modifying the mode
	  // TODO: Investigate firefox: https://github.com/videojs/video.js/issues/1862
	  supportsTextTracks = !!Html5.TEST_VID.textTracks;
	  if (supportsTextTracks && Html5.TEST_VID.textTracks.length > 0) {
	    supportsTextTracks = typeof Html5.TEST_VID.textTracks[0]['mode'] !== 'number';
	  }
	  if (supportsTextTracks && browser.IS_FIREFOX) {
	    supportsTextTracks = false;
	  }
	  if (supportsTextTracks && !('onremovetrack' in Html5.TEST_VID.textTracks)) {
	    supportsTextTracks = false;
	  }

	  return supportsTextTracks;
	};

	/*
	 * Check to see if native video tracks are supported by this browser/device
	 *
	 * @return {Boolean}
	 */
	Html5.supportsNativeVideoTracks = function () {
	  var supportsVideoTracks = !!Html5.TEST_VID.videoTracks;
	  return supportsVideoTracks;
	};

	/*
	 * Check to see if native audio tracks are supported by this browser/device
	 *
	 * @return {Boolean}
	 */
	Html5.supportsNativeAudioTracks = function () {
	  var supportsAudioTracks = !!Html5.TEST_VID.audioTracks;
	  return supportsAudioTracks;
	};

	/**
	 * An array of events available on the Html5 tech.
	 *
	 * @private
	 * @type {Array}
	 */
	Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];

	/*
	 * Set the tech's volume control support status
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['featuresVolumeControl'] = Html5.canControlVolume();

	/*
	 * Set the tech's playbackRate support status
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['featuresPlaybackRate'] = Html5.canControlPlaybackRate();

	/*
	 * Set the tech's status on moving the video element.
	 * In iOS, if you move a video element in the DOM, it breaks video playback.
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['movingMediaElementInDOM'] = !browser.IS_IOS;

	/*
	 * Set the the tech's fullscreen resize support status.
	 * HTML video is able to automatically resize when going to fullscreen.
	 * (No longer appears to be used. Can probably be removed.)
	 */
	Html5.prototype['featuresFullscreenResize'] = true;

	/*
	 * Set the tech's progress event support status
	 * (this disables the manual progress events of the Tech)
	 */
	Html5.prototype['featuresProgressEvents'] = true;

	/*
	 * Sets the tech's status on native text track support
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['featuresNativeTextTracks'] = Html5.supportsNativeTextTracks();

	/**
	 * Sets the tech's status on native text track support
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['featuresNativeVideoTracks'] = Html5.supportsNativeVideoTracks();

	/**
	 * Sets the tech's status on native audio track support
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['featuresNativeAudioTracks'] = Html5.supportsNativeAudioTracks();

	// HTML5 Feature detection and Device Fixes --------------------------------- //
	var canPlayType = undefined;
	var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
	var mp4RE = /^video\/mp4/i;

	Html5.patchCanPlayType = function () {
	  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
	  if (browser.ANDROID_VERSION >= 4.0) {
	    if (!canPlayType) {
	      canPlayType = Html5.TEST_VID.constructor.prototype.canPlayType;
	    }

	    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
	      if (type && mpegurlRE.test(type)) {
	        return 'maybe';
	      }
	      return canPlayType.call(this, type);
	    };
	  }

	  // Override Android 2.2 and less canPlayType method which is broken
	  if (browser.IS_OLD_ANDROID) {
	    if (!canPlayType) {
	      canPlayType = Html5.TEST_VID.constructor.prototype.canPlayType;
	    }

	    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
	      if (type && mp4RE.test(type)) {
	        return 'maybe';
	      }
	      return canPlayType.call(this, type);
	    };
	  }
	};

	Html5.unpatchCanPlayType = function () {
	  var r = Html5.TEST_VID.constructor.prototype.canPlayType;
	  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
	  canPlayType = null;
	  return r;
	};

	// by default, patch the video element
	Html5.patchCanPlayType();

	Html5.disposeMediaElement = function (el) {
	  if (!el) {
	    return;
	  }

	  if (el.parentNode) {
	    el.parentNode.removeChild(el);
	  }

	  // remove any child track or source nodes to prevent their loading
	  while (el.hasChildNodes()) {
	    el.removeChild(el.firstChild);
	  }

	  // remove any src reference. not setting `src=''` because that causes a warning
	  // in firefox
	  el.removeAttribute('src');

	  // force the media element to update its loading state by calling load()
	  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
	  if (typeof el.load === 'function') {
	    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
	    (function () {
	      try {
	        el.load();
	      } catch (e) {
	        // not supported
	      }
	    })();
	  }
	};

	Html5.resetMediaElement = function (el) {
	  if (!el) {
	    return;
	  }

	  var sources = el.querySelectorAll('source');
	  var i = sources.length;
	  while (i--) {
	    el.removeChild(sources[i]);
	  }

	  // remove any src reference.
	  // not setting `src=''` because that throws an error
	  el.removeAttribute('src');

	  if (typeof el.load === 'function') {
	    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
	    (function () {
	      try {
	        el.load();
	      } catch (e) {}
	    })();
	  }
	};

	_component2['default'].registerComponent('Html5', Html5);
	_techJs2['default'].registerTech('Html5', Html5);
	exports['default'] = Html5;
	module.exports = exports['default'];

	},{"../../../src/js/tracks/text-track.js":134,"../component":67,"../utils/browser.js":140,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options.js":148,"../utils/to-title-case.js":151,"../utils/url.js":152,"./tech.js":124,"global/document":1,"global/window":2,"object.assign":45,"tsml":55}],123:[function(_dereq_,module,exports){
	/**
	 * @file loader.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _componentJs = _dereq_('../component.js');

	var _componentJs2 = _interopRequireDefault(_componentJs);

	var _techJs = _dereq_('./tech.js');

	var _techJs2 = _interopRequireDefault(_techJs);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

	/**
	 * The Media Loader is the component that decides which playback technology to load
	 * when the player is initialized.
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends Component
	 * @class MediaLoader
	 */

	var MediaLoader = (function (_Component) {
	  _inherits(MediaLoader, _Component);

	  function MediaLoader(player, options, ready) {
	    _classCallCheck(this, MediaLoader);

	    _Component.call(this, player, options, ready);

	    // If there are no sources when the player is initialized,
	    // load the first supported playback technology.

	    if (!options.playerOptions['sources'] || options.playerOptions['sources'].length === 0) {
	      for (var i = 0, j = options.playerOptions['techOrder']; i < j.length; i++) {
	        var techName = _utilsToTitleCaseJs2['default'](j[i]);
	        var tech = _techJs2['default'].getTech(techName);
	        // Support old behavior of techs being registered as components.
	        // Remove once that deprecated behavior is removed.
	        if (!techName) {
	          tech = _componentJs2['default'].getComponent(techName);
	        }

	        // Check if the browser supports this technology
	        if (tech && tech.isSupported()) {
	          player.loadTech_(techName);
	          break;
	        }
	      }
	    } else {
	      // // Loop through playback technologies (HTML5, Flash) and check for support.
	      // // Then load the best source.
	      // // A few assumptions here:
	      // //   All playback technologies respect preload false.
	      player.src(options.playerOptions['sources']);
	    }
	  }

	  return MediaLoader;
	})(_componentJs2['default']);

	_componentJs2['default'].registerComponent('MediaLoader', MediaLoader);
	exports['default'] = MediaLoader;
	module.exports = exports['default'];

	},{"../component.js":67,"../utils/to-title-case.js":151,"./tech.js":124,"global/window":2}],124:[function(_dereq_,module,exports){
	/**
	 * @file tech.js
	 * Media Technology Controller - Base class for media playback
	 * technology controllers like Flash and HTML5
	 */

	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _component = _dereq_('../component');

	var _component2 = _interopRequireDefault(_component);

	var _tracksHtmlTrackElement = _dereq_('../tracks/html-track-element');

	var _tracksHtmlTrackElement2 = _interopRequireDefault(_tracksHtmlTrackElement);

	var _tracksHtmlTrackElementList = _dereq_('../tracks/html-track-element-list');

	var _tracksHtmlTrackElementList2 = _interopRequireDefault(_tracksHtmlTrackElementList);

	var _utilsMergeOptionsJs = _dereq_('../utils/merge-options.js');

	var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

	var _tracksTextTrack = _dereq_('../tracks/text-track');

	var _tracksTextTrack2 = _interopRequireDefault(_tracksTextTrack);

	var _tracksTextTrackList = _dereq_('../tracks/text-track-list');

	var _tracksTextTrackList2 = _interopRequireDefault(_tracksTextTrackList);

	var _tracksVideoTrack = _dereq_('../tracks/video-track');

	var _tracksVideoTrack2 = _interopRequireDefault(_tracksVideoTrack);

	var _tracksVideoTrackList = _dereq_('../tracks/video-track-list');

	var _tracksVideoTrackList2 = _interopRequireDefault(_tracksVideoTrackList);

	var _tracksAudioTrackList = _dereq_('../tracks/audio-track-list');

	var _tracksAudioTrackList2 = _interopRequireDefault(_tracksAudioTrackList);

	var _tracksAudioTrack = _dereq_('../tracks/audio-track');

	var _tracksAudioTrack2 = _interopRequireDefault(_tracksAudioTrack);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsLogJs = _dereq_('../utils/log.js');

	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

	var _utilsTimeRangesJs = _dereq_('../utils/time-ranges.js');

	var _utilsBufferJs = _dereq_('../utils/buffer.js');

	var _mediaErrorJs = _dereq_('../media-error.js');

	var _mediaErrorJs2 = _interopRequireDefault(_mediaErrorJs);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	/**
	 * Base class for media (HTML5 Video, Flash) controllers
	 *
	 * @param {Object=} options Options object
	 * @param {Function=} ready Ready callback function
	 * @extends Component
	 * @class Tech
	 */

	var Tech = (function (_Component) {
	  _inherits(Tech, _Component);

	  function Tech() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var ready = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];

	    _classCallCheck(this, Tech);

	    // we don't want the tech to report user activity automatically.
	    // This is done manually in addControlsListeners
	    options.reportTouchActivity = false;
	    _Component.call(this, null, options, ready);

	    // keep track of whether the current source has played at all to
	    // implement a very limited played()
	    this.hasStarted_ = false;
	    this.on('playing', function () {
	      this.hasStarted_ = true;
	    });
	    this.on('loadstart', function () {
	      this.hasStarted_ = false;
	    });

	    this.textTracks_ = options.textTracks;
	    this.videoTracks_ = options.videoTracks;
	    this.audioTracks_ = options.audioTracks;

	    // Manually track progress in cases where the browser/flash player doesn't report it.
	    if (!this.featuresProgressEvents) {
	      this.manualProgressOn();
	    }

	    // Manually track timeupdates in cases where the browser/flash player doesn't report it.
	    if (!this.featuresTimeupdateEvents) {
	      this.manualTimeUpdatesOn();
	    }

	    if (options.nativeCaptions === false || options.nativeTextTracks === false) {
	      this.featuresNativeTextTracks = false;
	    }

	    if (!this.featuresNativeTextTracks) {
	      this.on('ready', this.emulateTextTracks);
	    }

	    this.initTextTrackListeners();
	    this.initTrackListeners();

	    // Turn on component tap events
	    this.emitTapEvents();
	  }

	  /**
	   * List of associated text tracks
	   *
	   * @type {TextTrackList}
	   * @private
	   */

	  /* Fallbacks for unsupported event types
	  ================================================================================ */
	  // Manually trigger progress events based on changes to the buffered amount
	  // Many flash players and older HTML5 browsers don't send progress or progress-like events
	  /**
	   * Turn on progress events
	   *
	   * @method manualProgressOn
	   */

	  Tech.prototype.manualProgressOn = function manualProgressOn() {
	    this.on('durationchange', this.onDurationChange);

	    this.manualProgress = true;

	    // Trigger progress watching when a source begins loading
	    this.one('ready', this.trackProgress);
	  };

	  /**
	   * Turn off progress events
	   *
	   * @method manualProgressOff
	   */

	  Tech.prototype.manualProgressOff = function manualProgressOff() {
	    this.manualProgress = false;
	    this.stopTrackingProgress();

	    this.off('durationchange', this.onDurationChange);
	  };

	  /**
	   * Track progress
	   *
	   * @method trackProgress
	   */

	  Tech.prototype.trackProgress = function trackProgress() {
	    this.stopTrackingProgress();
	    this.progressInterval = this.setInterval(Fn.bind(this, function () {
	      // Don't trigger unless buffered amount is greater than last time

	      var numBufferedPercent = this.bufferedPercent();

	      if (this.bufferedPercent_ !== numBufferedPercent) {
	        this.trigger('progress');
	      }

	      this.bufferedPercent_ = numBufferedPercent;

	      if (numBufferedPercent === 1) {
	        this.stopTrackingProgress();
	      }
	    }), 500);
	  };

	  /**
	   * Update duration
	   *
	   * @method onDurationChange
	   */

	  Tech.prototype.onDurationChange = function onDurationChange() {
	    this.duration_ = this.duration();
	  };

	  /**
	   * Create and get TimeRange object for buffering
	   *
	   * @return {TimeRangeObject}
	   * @method buffered
	   */

	  Tech.prototype.buffered = function buffered() {
	    return _utilsTimeRangesJs.createTimeRange(0, 0);
	  };

	  /**
	   * Get buffered percent
	   *
	   * @return {Number}
	   * @method bufferedPercent
	   */

	  Tech.prototype.bufferedPercent = function bufferedPercent() {
	    return _utilsBufferJs.bufferedPercent(this.buffered(), this.duration_);
	  };

	  /**
	   * Stops tracking progress by clearing progress interval
	   *
	   * @method stopTrackingProgress
	   */

	  Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
	    this.clearInterval(this.progressInterval);
	  };

	  /*! Time Tracking -------------------------------------------------------------- */
	  /**
	   * Set event listeners for on play and pause and tracking current time
	   *
	   * @method manualTimeUpdatesOn
	   */

	  Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
	    this.manualTimeUpdates = true;

	    this.on('play', this.trackCurrentTime);
	    this.on('pause', this.stopTrackingCurrentTime);
	  };

	  /**
	   * Remove event listeners for on play and pause and tracking current time
	   *
	   * @method manualTimeUpdatesOff
	   */

	  Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
	    this.manualTimeUpdates = false;
	    this.stopTrackingCurrentTime();
	    this.off('play', this.trackCurrentTime);
	    this.off('pause', this.stopTrackingCurrentTime);
	  };

	  /**
	   * Tracks current time
	   *
	   * @method trackCurrentTime
	   */

	  Tech.prototype.trackCurrentTime = function trackCurrentTime() {
	    if (this.currentTimeInterval) {
	      this.stopTrackingCurrentTime();
	    }
	    this.currentTimeInterval = this.setInterval(function () {
	      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	    }, 250); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
	  };

	  /**
	   * Turn off play progress tracking (when paused or dragging)
	   *
	   * @method stopTrackingCurrentTime
	   */

	  Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
	    this.clearInterval(this.currentTimeInterval);

	    // #1002 - if the video ends right before the next timeupdate would happen,
	    // the progress bar won't make it all the way to the end
	    this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	  };

	  /**
	   * Turn off any manual progress or timeupdate tracking
	   *
	   * @method dispose
	   */

	  Tech.prototype.dispose = function dispose() {

	    // clear out all tracks because we can't reuse them between techs
	    this.clearTracks(['audio', 'video', 'text']);

	    // Turn off any manual progress or timeupdate tracking
	    if (this.manualProgress) {
	      this.manualProgressOff();
	    }

	    if (this.manualTimeUpdates) {
	      this.manualTimeUpdatesOff();
	    }

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * clear out a track list, or multiple track lists
	   *
	   * Note: Techs without source handlers should call this between
	   * sources for video & audio tracks, as usually you don't want
	   * to use them between tracks and we have no automatic way to do
	   * it for you
	   *
	   * @method clearTracks
	   * @param {Array|String} types type(s) of track lists to empty
	   */

	  Tech.prototype.clearTracks = function clearTracks(types) {
	    var _this = this;

	    types = [].concat(types);
	    // clear out all tracks because we can't reuse them between techs
	    types.forEach(function (type) {
	      var list = _this[type + 'Tracks']() || [];
	      var i = list.length;
	      while (i--) {
	        var track = list[i];
	        if (type === 'text') {
	          _this.removeRemoteTextTrack(track);
	        }
	        list.removeTrack_(track);
	      }
	    });
	  };

	  /**
	   * Reset the tech. Removes all sources and resets readyState.
	   *
	   * @method reset
	   */

	  Tech.prototype.reset = function reset() {};

	  /**
	   * When invoked without an argument, returns a MediaError object
	   * representing the current error state of the player or null if
	   * there is no error. When invoked with an argument, set the current
	   * error state of the player.
	   * @param {MediaError=} err    Optional an error object
	   * @return {MediaError}        the current error object or null
	   * @method error
	   */

	  Tech.prototype.error = function error(err) {
	    if (err !== undefined) {
	      this.error_ = new _mediaErrorJs2['default'](err);
	      this.trigger('error');
	    }
	    return this.error_;
	  };

	  /**
	   * Return the time ranges that have been played through for the
	   * current source. This implementation is incomplete. It does not
	   * track the played time ranges, only whether the source has played
	   * at all or not.
	   * @return {TimeRangeObject} a single time range if this video has
	   * played or an empty set of ranges if not.
	   * @method played
	   */

	  Tech.prototype.played = function played() {
	    if (this.hasStarted_) {
	      return _utilsTimeRangesJs.createTimeRange(0, 0);
	    }
	    return _utilsTimeRangesJs.createTimeRange();
	  };

	  /**
	   * Set current time
	   *
	   * @method setCurrentTime
	   */

	  Tech.prototype.setCurrentTime = function setCurrentTime() {
	    // improve the accuracy of manual timeupdates
	    if (this.manualTimeUpdates) {
	      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	    }
	  };

	  /**
	   * Initialize texttrack listeners
	   *
	   * @method initTextTrackListeners
	   */

	  Tech.prototype.initTextTrackListeners = function initTextTrackListeners() {
	    var textTrackListChanges = Fn.bind(this, function () {
	      this.trigger('texttrackchange');
	    });

	    var tracks = this.textTracks();

	    if (!tracks) return;

	    tracks.addEventListener('removetrack', textTrackListChanges);
	    tracks.addEventListener('addtrack', textTrackListChanges);

	    this.on('dispose', Fn.bind(this, function () {
	      tracks.removeEventListener('removetrack', textTrackListChanges);
	      tracks.removeEventListener('addtrack', textTrackListChanges);
	    }));
	  };

	  /**
	   * Initialize audio and video track listeners
	   *
	   * @method initTrackListeners
	   */

	  Tech.prototype.initTrackListeners = function initTrackListeners() {
	    var _this2 = this;

	    var trackTypes = ['video', 'audio'];

	    trackTypes.forEach(function (type) {
	      var trackListChanges = function trackListChanges() {
	        _this2.trigger(type + 'trackchange');
	      };

	      var tracks = _this2[type + 'Tracks']();

	      tracks.addEventListener('removetrack', trackListChanges);
	      tracks.addEventListener('addtrack', trackListChanges);

	      _this2.on('dispose', function () {
	        tracks.removeEventListener('removetrack', trackListChanges);
	        tracks.removeEventListener('addtrack', trackListChanges);
	      });
	    });
	  };

	  /**
	   * Emulate texttracks
	   *
	   * @method emulateTextTracks
	   */

	  Tech.prototype.emulateTextTracks = function emulateTextTracks() {
	    var _this3 = this;

	    var tracks = this.textTracks();
	    if (!tracks) {
	      return;
	    }

	    if (!_globalWindow2['default']['WebVTT'] && this.el().parentNode != null) {
	      (function () {
	        var script = _globalDocument2['default'].createElement('script');
	        script.src = _this3.options_['vtt.js'] || 'https://cdn.rawgit.com/gkatsev/vtt.js/vjs-v0.12.1/dist/vtt.min.js';
	        script.onload = function () {
	          _this3.trigger('vttjsloaded');
	        };
	        script.onerror = function () {
	          _this3.trigger('vttjserror');
	        };
	        _this3.on('dispose', function () {
	          script.onload = null;
	          script.onerror = null;
	        });
	        // but have not loaded yet and we set it to true before the inject so that
	        // we don't overwrite the injected window.WebVTT if it loads right away
	        _globalWindow2['default']['WebVTT'] = true;
	        _this3.el().parentNode.appendChild(script);
	      })();
	    }

	    var updateDisplay = function updateDisplay() {
	      return _this3.trigger('texttrackchange');
	    };
	    var textTracksChanges = function textTracksChanges() {
	      updateDisplay();

	      for (var i = 0; i < tracks.length; i++) {
	        var track = tracks[i];
	        track.removeEventListener('cuechange', updateDisplay);
	        if (track.mode === 'showing') {
	          track.addEventListener('cuechange', updateDisplay);
	        }
	      }
	    };

	    textTracksChanges();
	    tracks.addEventListener('change', textTracksChanges);

	    this.on('dispose', function () {
	      tracks.removeEventListener('change', textTracksChanges);
	    });
	  };

	  /**
	   * Get videotracks
	   *
	   * @returns {VideoTrackList}
	   * @method videoTracks
	   */

	  Tech.prototype.videoTracks = function videoTracks() {
	    this.videoTracks_ = this.videoTracks_ || new _tracksVideoTrackList2['default']();
	    return this.videoTracks_;
	  };

	  /**
	   * Get audiotracklist
	   *
	   * @returns {AudioTrackList}
	   * @method audioTracks
	   */

	  Tech.prototype.audioTracks = function audioTracks() {
	    this.audioTracks_ = this.audioTracks_ || new _tracksAudioTrackList2['default']();
	    return this.audioTracks_;
	  };

	  /*
	   * Provide default methods for text tracks.
	   *
	   * Html5 tech overrides these.
	   */

	  /**
	   * Get texttracks
	   *
	   * @returns {TextTrackList}
	   * @method textTracks
	   */

	  Tech.prototype.textTracks = function textTracks() {
	    this.textTracks_ = this.textTracks_ || new _tracksTextTrackList2['default']();
	    return this.textTracks_;
	  };

	  /**
	   * Get remote texttracks
	   *
	   * @returns {TextTrackList}
	   * @method remoteTextTracks
	   */

	  Tech.prototype.remoteTextTracks = function remoteTextTracks() {
	    this.remoteTextTracks_ = this.remoteTextTracks_ || new _tracksTextTrackList2['default']();
	    return this.remoteTextTracks_;
	  };

	  /**
	   * Get remote htmltrackelements
	   *
	   * @returns {HTMLTrackElementList}
	   * @method remoteTextTrackEls
	   */

	  Tech.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
	    this.remoteTextTrackEls_ = this.remoteTextTrackEls_ || new _tracksHtmlTrackElementList2['default']();
	    return this.remoteTextTrackEls_;
	  };

	  /**
	   * Creates and returns a remote text track object
	   *
	   * @param {String} kind Text track kind (subtitles, captions, descriptions
	   *                                       chapters and metadata)
	   * @param {String=} label Label to identify the text track
	   * @param {String=} language Two letter language abbreviation
	   * @return {TextTrackObject}
	   * @method addTextTrack
	   */

	  Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (!kind) {
	      throw new Error('TextTrack kind is required but was not provided');
	    }

	    return createTrackHelper(this, kind, label, language);
	  };

	  /**
	   * Creates a remote text track object and returns a emulated html track element
	   *
	   * @param {Object} options The object should contain values for
	   * kind, language, label and src (location of the WebVTT file)
	   * @return {HTMLTrackElement}
	   * @method addRemoteTextTrack
	   */

	  Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack(options) {
	    var track = _utilsMergeOptionsJs2['default'](options, {
	      tech: this
	    });

	    var htmlTrackElement = new _tracksHtmlTrackElement2['default'](track);

	    // store HTMLTrackElement and TextTrack to remote list
	    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
	    this.remoteTextTracks().addTrack_(htmlTrackElement.track);

	    // must come after remoteTextTracks()
	    this.textTracks().addTrack_(htmlTrackElement.track);

	    return htmlTrackElement;
	  };

	  /**
	   * Remove remote texttrack
	   *
	   * @param {TextTrackObject} track Texttrack to remove
	   * @method removeRemoteTextTrack
	   */

	  Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
	    this.textTracks().removeTrack_(track);

	    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

	    // remove HTMLTrackElement and TextTrack from remote list
	    this.remoteTextTrackEls().removeTrackElement_(trackElement);
	    this.remoteTextTracks().removeTrack_(track);
	  };

	  /**
	   * Provide a default setPoster method for techs
	   * Poster support for techs should be optional, so we don't want techs to
	   * break if they don't have a way to set a poster.
	   *
	   * @method setPoster
	   */

	  Tech.prototype.setPoster = function setPoster() {};

	  /*
	   * Check if the tech can support the given type
	   *
	   * The base tech does not support any type, but source handlers might
	   * overwrite this.
	   *
	   * @param  {String} type    The mimetype to check
	   * @return {String}         'probably', 'maybe', or '' (empty string)
	   */

	  Tech.prototype.canPlayType = function canPlayType() {
	    return '';
	  };

	  /*
	   * Return whether the argument is a Tech or not.
	   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
	   *
	   * @param {Object} component An item to check
	   * @return {Boolean}         Whether it is a tech or not
	   */

	  Tech.isTech = function isTech(component) {
	    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
	  };

	  /**
	   * Registers a Tech
	   *
	   * @param {String} name Name of the Tech to register
	   * @param {Object} tech The tech to register
	   * @static
	   * @method registerComponent
	   */

	  Tech.registerTech = function registerTech(name, tech) {
	    if (!Tech.techs_) {
	      Tech.techs_ = {};
	    }

	    if (!Tech.isTech(tech)) {
	      throw new Error('Tech ' + name + ' must be a Tech');
	    }

	    Tech.techs_[name] = tech;
	    return tech;
	  };

	  /**
	   * Gets a component by name
	   *
	   * @param {String} name Name of the component to get
	   * @return {Component}
	   * @static
	   * @method getComponent
	   */

	  Tech.getTech = function getTech(name) {
	    if (Tech.techs_ && Tech.techs_[name]) {
	      return Tech.techs_[name];
	    }

	    if (_globalWindow2['default'] && _globalWindow2['default'].videojs && _globalWindow2['default'].videojs[name]) {
	      _utilsLogJs2['default'].warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
	      return _globalWindow2['default'].videojs[name];
	    }
	  };

	  return Tech;
	})(_component2['default']);

	Tech.prototype.textTracks_;

	/**
	 * List of associated audio tracks
	 *
	 * @type {AudioTrackList}
	 * @private
	 */
	Tech.prototype.audioTracks_;

	/**
	 * List of associated video tracks
	 *
	 * @type {VideoTrackList}
	 * @private
	 */
	Tech.prototype.videoTracks_;

	var createTrackHelper = function createTrackHelper(self, kind, label, language) {
	  var options = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];

	  var tracks = self.textTracks();

	  options.kind = kind;

	  if (label) {
	    options.label = label;
	  }
	  if (language) {
	    options.language = language;
	  }
	  options.tech = self;

	  var track = new _tracksTextTrack2['default'](options);
	  tracks.addTrack_(track);

	  return track;
	};

	Tech.prototype.featuresVolumeControl = true;

	// Resizing plugins using request fullscreen reloads the plugin
	Tech.prototype.featuresFullscreenResize = false;
	Tech.prototype.featuresPlaybackRate = false;

	// Optional events that we can manually mimic with timers
	// currently not triggered by video-js-swf
	Tech.prototype.featuresProgressEvents = false;
	Tech.prototype.featuresTimeupdateEvents = false;

	Tech.prototype.featuresNativeTextTracks = false;

	/*
	 * A functional mixin for techs that want to use the Source Handler pattern.
	 *
	 * ##### EXAMPLE:
	 *
	 *   Tech.withSourceHandlers.call(MyTech);
	 *
	 */
	Tech.withSourceHandlers = function (_Tech) {
	  /*
	   * Register a source handler
	   * Source handlers are scripts for handling specific formats.
	   * The source handler pattern is used for adaptive formats (HLS, DASH) that
	   * manually load video data and feed it into a Source Buffer (Media Source Extensions)
	   * @param  {Function} handler  The source handler
	   * @param  {Boolean}  first    Register it before any existing handlers
	   */
	  _Tech.registerSourceHandler = function (handler, index) {
	    var handlers = _Tech.sourceHandlers;

	    if (!handlers) {
	      handlers = _Tech.sourceHandlers = [];
	    }

	    if (index === undefined) {
	      // add to the end of the list
	      index = handlers.length;
	    }

	    handlers.splice(index, 0, handler);
	  };

	  /*
	   * Check if the tech can support the given type
	   * @param  {String} type    The mimetype to check
	   * @return {String}         'probably', 'maybe', or '' (empty string)
	   */
	  _Tech.canPlayType = function (type) {
	    var handlers = _Tech.sourceHandlers || [];
	    var can = undefined;

	    for (var i = 0; i < handlers.length; i++) {
	      can = handlers[i].canPlayType(type);

	      if (can) {
	        return can;
	      }
	    }

	    return '';
	  };

	  /*
	   * Return the first source handler that supports the source
	   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
	   * @param  {Object} source  The source object
	   * @param  {Object} options The options passed to the tech
	   * @returns {Object}       The first source handler that supports the source
	   * @returns {null}         Null if no source handler is found
	   */
	  _Tech.selectSourceHandler = function (source, options) {
	    var handlers = _Tech.sourceHandlers || [];
	    var can = undefined;

	    for (var i = 0; i < handlers.length; i++) {
	      can = handlers[i].canHandleSource(source, options);

	      if (can) {
	        return handlers[i];
	      }
	    }

	    return null;
	  };

	  /*
	   * Check if the tech can support the given source
	   * @param  {Object} srcObj  The source object
	   * @param  {Object} options The options passed to the tech
	   * @return {String}         'probably', 'maybe', or '' (empty string)
	   */
	  _Tech.canPlaySource = function (srcObj, options) {
	    var sh = _Tech.selectSourceHandler(srcObj, options);

	    if (sh) {
	      return sh.canHandleSource(srcObj, options);
	    }

	    return '';
	  };

	  /*
	   * When using a source handler, prefer its implementation of
	   * any function normally provided by the tech.
	   */
	  var deferrable = ['seekable', 'duration'];

	  deferrable.forEach(function (fnName) {
	    var originalFn = this[fnName];

	    if (typeof originalFn !== 'function') {
	      return;
	    }

	    this[fnName] = function () {
	      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
	        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
	      }
	      return originalFn.apply(this, arguments);
	    };
	  }, _Tech.prototype);

	  /*
	   * Create a function for setting the source using a source object
	   * and source handlers.
	   * Should never be called unless a source handler was found.
	   * @param {Object} source  A source object with src and type keys
	   * @return {Tech} self
	   */
	  _Tech.prototype.setSource = function (source) {
	    var sh = _Tech.selectSourceHandler(source, this.options_);

	    if (!sh) {
	      // Fall back to a native source hander when unsupported sources are
	      // deliberately set
	      if (_Tech.nativeSourceHandler) {
	        sh = _Tech.nativeSourceHandler;
	      } else {
	        _utilsLogJs2['default'].error('No source hander found for the current source.');
	      }
	    }

	    // Dispose any existing source handler
	    this.disposeSourceHandler();
	    this.off('dispose', this.disposeSourceHandler);

	    // if we have a source and get another one
	    // then we are loading something new
	    // than clear all of our current tracks
	    if (this.currentSource_) {
	      this.clearTracks(['audio', 'video']);

	      this.currentSource_ = null;
	    }

	    if (sh !== _Tech.nativeSourceHandler) {

	      this.currentSource_ = source;

	      // Catch if someone replaced the src without calling setSource.
	      // If they do, set currentSource_ to null and dispose our source handler.
	      this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	      this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	      this.one(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	    }

	    this.sourceHandler_ = sh.handleSource(source, this, this.options_);
	    this.on('dispose', this.disposeSourceHandler);

	    return this;
	  };

	  // On the first loadstart after setSource
	  _Tech.prototype.firstLoadStartListener_ = function () {
	    this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	  };

	  // On successive loadstarts when setSource has not been called again
	  _Tech.prototype.successiveLoadStartListener_ = function () {
	    this.currentSource_ = null;
	    this.disposeSourceHandler();
	    this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	  };

	  /*
	   * Clean up any existing source handler
	   */
	  _Tech.prototype.disposeSourceHandler = function () {
	    if (this.sourceHandler_ && this.sourceHandler_.dispose) {
	      this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	      this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	      this.sourceHandler_.dispose();
	      this.sourceHandler_ = null;
	    }
	  };
	};

	_component2['default'].registerComponent('Tech', Tech);
	// Old name for Tech
	_component2['default'].registerComponent('MediaTechController', Tech);
	Tech.registerTech('Tech', Tech);
	exports['default'] = Tech;
	module.exports = exports['default'];

	},{"../component":67,"../media-error.js":108,"../tracks/audio-track":126,"../tracks/audio-track-list":125,"../tracks/html-track-element":128,"../tracks/html-track-element-list":127,"../tracks/text-track":134,"../tracks/text-track-list":132,"../tracks/video-track":139,"../tracks/video-track-list":138,"../utils/buffer.js":141,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options.js":148,"../utils/time-ranges.js":150,"global/document":1,"global/window":2}],125:[function(_dereq_,module,exports){
	/**
	 * @file audio-track-list.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _trackList = _dereq_('./track-list');

	var _trackList2 = _interopRequireDefault(_trackList);

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	/**
	 * anywhere we call this function we diverge from the spec
	 * as we only support one enabled audiotrack at a time
	 *
	 * @param {Array|AudioTrackList} list list to work on
	 * @param {AudioTrack} track the track to skip
	 */
	var disableOthers = function disableOthers(list, track) {
	  for (var i = 0; i < list.length; i++) {
	    if (track.id === list[i].id) {
	      continue;
	    }
	    // another audio track is enabled, disable it
	    list[i].enabled = false;
	  }
	};
	/**
	 * A list of possible audio tracks. All functionality is in the
	 * base class Tracklist and the spec for AudioTrackList is located at:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
	 *
	 * interface AudioTrackList : EventTarget {
	 *   readonly attribute unsigned long length;
	 *   getter AudioTrack (unsigned long index);
	 *   AudioTrack? getTrackById(DOMString id);
	 *
	 *   attribute EventHandler onchange;
	 *   attribute EventHandler onaddtrack;
	 *   attribute EventHandler onremovetrack;
	 * };
	 *
	 * @param {AudioTrack[]} tracks a list of audio tracks to instantiate the list with
	 * @extends TrackList
	 * @class AudioTrackList
	 */

	var AudioTrackList = (function (_TrackList) {
	  _inherits(AudioTrackList, _TrackList);

	  function AudioTrackList() {
	    var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	    _classCallCheck(this, AudioTrackList);

	    var list = undefined;

	    // make sure only 1 track is enabled
	    // sorted from last index to first index
	    for (var i = tracks.length - 1; i >= 0; i--) {
	      if (tracks[i].enabled) {
	        disableOthers(tracks, tracks[i]);
	        break;
	      }
	    }

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _globalDocument2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var prop in AudioTrackList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = AudioTrackList.prototype[prop];
	        }
	      }
	    }

	    list = _TrackList.call(this, tracks, list);
	    list.changing_ = false;

	    return list;
	  }

	  AudioTrackList.prototype.addTrack_ = function addTrack_(track) {
	    var _this = this;

	    if (track.enabled) {
	      disableOthers(this, track);
	    }

	    _TrackList.prototype.addTrack_.call(this, track);
	    // native tracks don't have this
	    if (!track.addEventListener) {
	      return;
	    }

	    track.addEventListener('enabledchange', function () {
	      // when we are disabling other tracks (since we don't support
	      // more than one track at a time) we will set changing_
	      // to true so that we don't trigger additional change events
	      if (_this.changing_) {
	        return;
	      }
	      _this.changing_ = true;
	      disableOthers(_this, track);
	      _this.changing_ = false;
	      _this.trigger('change');
	    });
	  };

	  AudioTrackList.prototype.addTrack = function addTrack(track) {
	    this.addTrack_(track);
	  };

	  AudioTrackList.prototype.removeTrack = function removeTrack(track) {
	    _TrackList.prototype.removeTrack_.call(this, track);
	  };

	  return AudioTrackList;
	})(_trackList2['default']);

	exports['default'] = AudioTrackList;
	module.exports = exports['default'];

	},{"../utils/browser.js":140,"./track-list":136,"global/document":1}],126:[function(_dereq_,module,exports){
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _trackEnums = _dereq_('./track-enums');

	var _track = _dereq_('./track');

	var _track2 = _interopRequireDefault(_track);

	var _utilsMergeOptions = _dereq_('../utils/merge-options');

	var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	/**
	 * A single audio text track as defined in:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack
	 *
	 * interface AudioTrack {
	 *   readonly attribute DOMString id;
	 *   readonly attribute DOMString kind;
	 *   readonly attribute DOMString label;
	 *   readonly attribute DOMString language;
	 *   attribute boolean enabled;
	 * };
	 *
	 * @param {Object=} options Object of option names and values
	 * @class AudioTrack
	 */

	var AudioTrack = (function (_Track) {
	  _inherits(AudioTrack, _Track);

	  function AudioTrack() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, AudioTrack);

	    var settings = _utilsMergeOptions2['default'](options, {
	      kind: _trackEnums.AudioTrackKind[options.kind] || ''
	    });
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var track = _Track.call(this, settings);
	    var enabled = false;

	    if (browser.IS_IE8) {
	      for (var prop in AudioTrack.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = AudioTrack.prototype[prop];
	        }
	      }
	    }

	    Object.defineProperty(track, 'enabled', {
	      get: function get() {
	        return enabled;
	      },
	      set: function set(newEnabled) {
	        // an invalid or unchanged value
	        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
	          return;
	        }
	        enabled = newEnabled;
	        this.trigger('enabledchange');
	      }
	    });

	    // if the user sets this track to selected then
	    // set selected to that true value otherwise
	    // we keep it false
	    if (settings.enabled) {
	      track.enabled = settings.enabled;
	    }
	    track.loaded_ = true;

	    return track;
	  }

	  return AudioTrack;
	})(_track2['default']);

	exports['default'] = AudioTrack;
	module.exports = exports['default'];

	},{"../utils/browser.js":140,"../utils/merge-options":148,"./track":137,"./track-enums":135}],127:[function(_dereq_,module,exports){
	/**
	 * @file html-track-element-list.js
	 */

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var HtmlTrackElementList = (function () {
	  function HtmlTrackElementList() {
	    var trackElements = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	    _classCallCheck(this, HtmlTrackElementList);

	    var list = this;

	    if (browser.IS_IE8) {
	      list = _globalDocument2['default'].createElement('custom');

	      for (var prop in HtmlTrackElementList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = HtmlTrackElementList.prototype[prop];
	        }
	      }
	    }

	    list.trackElements_ = [];

	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.trackElements_.length;
	      }
	    });

	    for (var i = 0, _length = trackElements.length; i < _length; i++) {
	      list.addTrackElement_(trackElements[i]);
	    }

	    if (browser.IS_IE8) {
	      return list;
	    }
	  }

	  HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
	    this.trackElements_.push(trackElement);
	  };

	  HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
	    var trackElement_ = undefined;

	    for (var i = 0, _length2 = this.trackElements_.length; i < _length2; i++) {
	      if (track === this.trackElements_[i].track) {
	        trackElement_ = this.trackElements_[i];

	        break;
	      }
	    }

	    return trackElement_;
	  };

	  HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
	    for (var i = 0, _length3 = this.trackElements_.length; i < _length3; i++) {
	      if (trackElement === this.trackElements_[i]) {
	        this.trackElements_.splice(i, 1);

	        break;
	      }
	    }
	  };

	  return HtmlTrackElementList;
	})();

	exports['default'] = HtmlTrackElementList;
	module.exports = exports['default'];

	},{"../utils/browser.js":140,"global/document":1}],128:[function(_dereq_,module,exports){
	/**
	 * @file html-track-element.js
	 */

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _eventTarget = _dereq_('../event-target');

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	var _tracksTextTrack = _dereq_('../tracks/text-track');

	var _tracksTextTrack2 = _interopRequireDefault(_tracksTextTrack);

	var NONE = 0;
	var LOADING = 1;
	var LOADED = 2;
	var ERROR = 3;

	/**
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement
	 *
	 * interface HTMLTrackElement : HTMLElement {
	 *   attribute DOMString kind;
	 *   attribute DOMString src;
	 *   attribute DOMString srclang;
	 *   attribute DOMString label;
	 *   attribute boolean default;
	 *
	 *   const unsigned short NONE = 0;
	 *   const unsigned short LOADING = 1;
	 *   const unsigned short LOADED = 2;
	 *   const unsigned short ERROR = 3;
	 *   readonly attribute unsigned short readyState;
	 *
	 *   readonly attribute TextTrack track;
	 * };
	 *
	 * @param {Object} options TextTrack configuration
	 * @class HTMLTrackElement
	 */

	var HTMLTrackElement = (function (_EventTarget) {
	  _inherits(HTMLTrackElement, _EventTarget);

	  function HTMLTrackElement() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, HTMLTrackElement);

	    _EventTarget.call(this);

	    var readyState = undefined,
	        trackElement = this;

	    if (browser.IS_IE8) {
	      trackElement = _globalDocument2['default'].createElement('custom');

	      for (var prop in HTMLTrackElement.prototype) {
	        if (prop !== 'constructor') {
	          trackElement[prop] = HTMLTrackElement.prototype[prop];
	        }
	      }
	    }

	    var track = new _tracksTextTrack2['default'](options);

	    trackElement.kind = track.kind;
	    trackElement.src = track.src;
	    trackElement.srclang = track.language;
	    trackElement.label = track.label;
	    trackElement['default'] = track['default'];

	    Object.defineProperty(trackElement, 'readyState', {
	      get: function get() {
	        return readyState;
	      }
	    });

	    Object.defineProperty(trackElement, 'track', {
	      get: function get() {
	        return track;
	      }
	    });

	    readyState = NONE;

	    track.addEventListener('loadeddata', function () {
	      readyState = LOADED;

	      trackElement.trigger({
	        type: 'load',
	        target: trackElement
	      });
	    });

	    if (browser.IS_IE8) {
	      return trackElement;
	    }
	  }

	  return HTMLTrackElement;
	})(_eventTarget2['default']);

	HTMLTrackElement.prototype.allowedEvents_ = {
	  load: 'load'
	};

	HTMLTrackElement.NONE = NONE;
	HTMLTrackElement.LOADING = LOADING;
	HTMLTrackElement.LOADED = LOADED;
	HTMLTrackElement.ERROR = ERROR;

	exports['default'] = HTMLTrackElement;
	module.exports = exports['default'];

	},{"../event-target":104,"../tracks/text-track":134,"../utils/browser.js":140,"global/document":1}],129:[function(_dereq_,module,exports){
	/**
	 * @file text-track-cue-list.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	/**
	 * A List of text track cues as defined in:
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist
	 *
	 * interface TextTrackCueList {
	 *   readonly attribute unsigned long length;
	 *   getter TextTrackCue (unsigned long index);
	 *   TextTrackCue? getCueById(DOMString id);
	 * };
	 *
	 * @param {Array} cues A list of cues to be initialized with
	 * @class TextTrackCueList
	 */

	var TextTrackCueList = (function () {
	  function TextTrackCueList(cues) {
	    _classCallCheck(this, TextTrackCueList);

	    var list = this;

	    if (browser.IS_IE8) {
	      list = _globalDocument2['default'].createElement('custom');

	      for (var prop in TextTrackCueList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = TextTrackCueList.prototype[prop];
	        }
	      }
	    }

	    TextTrackCueList.prototype.setCues_.call(list, cues);

	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.length_;
	      }
	    });

	    if (browser.IS_IE8) {
	      return list;
	    }
	  }

	  /**
	   * A setter for cues in this list
	   *
	   * @param {Array} cues an array of cues
	   * @method setCues_
	   * @private
	   */

	  TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
	    var oldLength = this.length || 0;
	    var i = 0;
	    var l = cues.length;

	    this.cues_ = cues;
	    this.length_ = cues.length;

	    var defineProp = function defineProp(index) {
	      if (!('' + index in this)) {
	        Object.defineProperty(this, '' + index, {
	          get: function get() {
	            return this.cues_[index];
	          }
	        });
	      }
	    };

	    if (oldLength < l) {
	      i = oldLength;

	      for (; i < l; i++) {
	        defineProp.call(this, i);
	      }
	    }
	  };

	  /**
	   * Get a cue that is currently in the Cue list by id
	   *
	   * @param {String} id
	   * @method getCueById
	   * @return {Object} a single cue
	   */

	  TextTrackCueList.prototype.getCueById = function getCueById(id) {
	    var result = null;

	    for (var i = 0, l = this.length; i < l; i++) {
	      var cue = this[i];

	      if (cue.id === id) {
	        result = cue;
	        break;
	      }
	    }

	    return result;
	  };

	  return TextTrackCueList;
	})();

	exports['default'] = TextTrackCueList;
	module.exports = exports['default'];

	},{"../utils/browser.js":140,"global/document":1}],130:[function(_dereq_,module,exports){
	/**
	 * @file text-track-display.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _component = _dereq_('../component');

	var _component2 = _interopRequireDefault(_component);

	var _menuMenuJs = _dereq_('../menu/menu.js');

	var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

	var _menuMenuItemJs = _dereq_('../menu/menu-item.js');

	var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

	var _menuMenuButtonJs = _dereq_('../menu/menu-button.js');

	var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var darkGray = '#222';
	var lightGray = '#ccc';
	var fontMap = {
	  monospace: 'monospace',
	  sansSerif: 'sans-serif',
	  serif: 'serif',
	  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
	  monospaceSerif: '"Courier New", monospace',
	  proportionalSansSerif: 'sans-serif',
	  proportionalSerif: 'serif',
	  casual: '"Comic Sans MS", Impact, fantasy',
	  script: '"Monotype Corsiva", cursive',
	  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
	};

	/**
	 * The component for displaying text track cues
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends Component
	 * @class TextTrackDisplay
	 */

	var TextTrackDisplay = (function (_Component) {
	  _inherits(TextTrackDisplay, _Component);

	  function TextTrackDisplay(player, options, ready) {
	    _classCallCheck(this, TextTrackDisplay);

	    _Component.call(this, player, options, ready);

	    player.on('loadstart', Fn.bind(this, this.toggleDisplay));
	    player.on('texttrackchange', Fn.bind(this, this.updateDisplay));

	    // This used to be called during player init, but was causing an error
	    // if a track should show by default and the display hadn't loaded yet.
	    // Should probably be moved to an external track loader when we support
	    // tracks that don't need a display.
	    player.ready(Fn.bind(this, function () {
	      if (player.tech_ && player.tech_['featuresNativeTextTracks']) {
	        this.hide();
	        return;
	      }

	      player.on('fullscreenchange', Fn.bind(this, this.updateDisplay));

	      var tracks = this.options_.playerOptions['tracks'] || [];
	      for (var i = 0; i < tracks.length; i++) {
	        var track = tracks[i];
	        this.player_.addRemoteTextTrack(track);
	      }

	      var modes = { 'captions': 1, 'subtitles': 1 };
	      var trackList = this.player_.textTracks();
	      var firstDesc = undefined;
	      var firstCaptions = undefined;

	      if (trackList) {
	        for (var i = 0; i < trackList.length; i++) {
	          var track = trackList[i];
	          if (track['default']) {
	            if (track.kind === 'descriptions' && !firstDesc) {
	              firstDesc = track;
	            } else if (track.kind in modes && !firstCaptions) {
	              firstCaptions = track;
	            }
	          }
	        }

	        // We want to show the first default track but captions and subtitles
	        // take precedence over descriptions.
	        // So, display the first default captions or subtitles track
	        // and otherwise the first default descriptions track.
	        if (firstCaptions) {
	          firstCaptions.mode = 'showing';
	        } else if (firstDesc) {
	          firstDesc.mode = 'showing';
	        }
	      }
	    }));
	  }

	  /**
	  * Add cue HTML to display
	  *
	  * @param {Number} color Hex number for color, like #f0e
	  * @param {Number} opacity Value for opacity,0.0 - 1.0
	  * @return {RGBAColor} In the form 'rgba(255, 0, 0, 0.3)'
	  * @method constructColor
	  */

	  /**
	   * Toggle display texttracks
	   *
	   * @method toggleDisplay
	   */

	  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
	    if (this.player_.tech_ && this.player_.tech_['featuresNativeTextTracks']) {
	      this.hide();
	    } else {
	      this.show();
	    }
	  };

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  TextTrackDisplay.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-text-track-display'
	    }, {
	      'aria-live': 'assertive',
	      'aria-atomic': 'true'
	    });
	  };

	  /**
	   * Clear display texttracks
	   *
	   * @method clearDisplay
	   */

	  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
	    if (typeof _globalWindow2['default']['WebVTT'] === 'function') {
	      _globalWindow2['default']['WebVTT']['processCues'](_globalWindow2['default'], [], this.el_);
	    }
	  };

	  /**
	   * Update display texttracks
	   *
	   * @method updateDisplay
	   */

	  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
	    var tracks = this.player_.textTracks();

	    this.clearDisplay();

	    if (!tracks) {
	      return;
	    }

	    // Track display prioritization model: if multiple tracks are 'showing',
	    //  display the first 'subtitles' or 'captions' track which is 'showing',
	    //  otherwise display the first 'descriptions' track which is 'showing'

	    var descriptionsTrack = null;
	    var captionsSubtitlesTrack = null;

	    var i = tracks.length;
	    while (i--) {
	      var track = tracks[i];
	      if (track['mode'] === 'showing') {
	        if (track['kind'] === 'descriptions') {
	          descriptionsTrack = track;
	        } else {
	          captionsSubtitlesTrack = track;
	        }
	      }
	    }

	    if (captionsSubtitlesTrack) {
	      this.updateForTrack(captionsSubtitlesTrack);
	    } else if (descriptionsTrack) {
	      this.updateForTrack(descriptionsTrack);
	    }
	  };

	  /**
	   * Add texttrack to texttrack list
	   *
	   * @param {TextTrackObject} track Texttrack object to be added to list
	   * @method updateForTrack
	   */

	  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
	    if (typeof _globalWindow2['default']['WebVTT'] !== 'function' || !track['activeCues']) {
	      return;
	    }

	    var overrides = this.player_['textTrackSettings'].getValues();

	    var cues = [];
	    for (var _i = 0; _i < track['activeCues'].length; _i++) {
	      cues.push(track['activeCues'][_i]);
	    }

	    _globalWindow2['default']['WebVTT']['processCues'](_globalWindow2['default'], cues, this.el_);

	    var i = cues.length;
	    while (i--) {
	      var cue = cues[i];
	      if (!cue) {
	        continue;
	      }

	      var cueDiv = cue.displayState;
	      if (overrides.color) {
	        cueDiv.firstChild.style.color = overrides.color;
	      }
	      if (overrides.textOpacity) {
	        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
	      }
	      if (overrides.backgroundColor) {
	        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
	      }
	      if (overrides.backgroundOpacity) {
	        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
	      }
	      if (overrides.windowColor) {
	        if (overrides.windowOpacity) {
	          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
	        } else {
	          cueDiv.style.backgroundColor = overrides.windowColor;
	        }
	      }
	      if (overrides.edgeStyle) {
	        if (overrides.edgeStyle === 'dropshadow') {
	          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
	        } else if (overrides.edgeStyle === 'raised') {
	          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
	        } else if (overrides.edgeStyle === 'depressed') {
	          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
	        } else if (overrides.edgeStyle === 'uniform') {
	          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
	        }
	      }
	      if (overrides.fontPercent && overrides.fontPercent !== 1) {
	        var fontSize = _globalWindow2['default'].parseFloat(cueDiv.style.fontSize);
	        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
	        cueDiv.style.height = 'auto';
	        cueDiv.style.top = 'auto';
	        cueDiv.style.bottom = '2px';
	      }
	      if (overrides.fontFamily && overrides.fontFamily !== 'default') {
	        if (overrides.fontFamily === 'small-caps') {
	          cueDiv.firstChild.style.fontVariant = 'small-caps';
	        } else {
	          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
	        }
	      }
	    }
	  };

	  return TextTrackDisplay;
	})(_component2['default']);

	function constructColor(color, opacity) {
	  return 'rgba(' +
	  // color looks like "#f0e"
	  parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
	}

	/**
	 * Try to update style
	 * Some style changes will throw an error, particularly in IE8. Those should be noops.
	 *
	 * @param {Element} el The element to be styles
	 * @param {CSSProperty} style The CSS property to be styled
	 * @param {CSSStyle} rule The actual style to be applied to the property
	 * @method tryUpdateStyle
	 */
	function tryUpdateStyle(el, style, rule) {
	  //
	  try {
	    el.style[style] = rule;
	  } catch (e) {}
	}

	_component2['default'].registerComponent('TextTrackDisplay', TextTrackDisplay);
	exports['default'] = TextTrackDisplay;
	module.exports = exports['default'];

	},{"../component":67,"../menu/menu-button.js":109,"../menu/menu-item.js":110,"../menu/menu.js":111,"../utils/fn.js":144,"global/document":1,"global/window":2}],131:[function(_dereq_,module,exports){
	/**
	 * Utilities for capturing text track state and re-creating tracks
	 * based on a capture.
	 *
	 * @file text-track-list-converter.js
	 */

	/**
	 * Examine a single text track and return a JSON-compatible javascript
	 * object that represents the text track's state.
	 * @param track {TextTrackObject} the text track to query
	 * @return {Object} a serializable javascript representation of the
	 * @private
	 */
	'use strict';

	exports.__esModule = true;
	var trackToJson_ = function trackToJson_(track) {
	  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {
	    if (track[prop]) {
	      acc[prop] = track[prop];
	    }

	    return acc;
	  }, {
	    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
	      return {
	        startTime: cue.startTime,
	        endTime: cue.endTime,
	        text: cue.text,
	        id: cue.id
	      };
	    })
	  });

	  return ret;
	};

	/**
	 * Examine a tech and return a JSON-compatible javascript array that
	 * represents the state of all text tracks currently configured. The
	 * return array is compatible with `jsonToTextTracks`.
	 * @param tech {tech} the tech object to query
	 * @return {Array} a serializable javascript representation of the
	 * @function textTracksToJson
	 */
	var textTracksToJson = function textTracksToJson(tech) {

	  var trackEls = tech.$$('track');

	  var trackObjs = Array.prototype.map.call(trackEls, function (t) {
	    return t.track;
	  });
	  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
	    var json = trackToJson_(trackEl.track);
	    if (trackEl.src) {
	      json.src = trackEl.src;
	    }
	    return json;
	  });

	  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
	    return trackObjs.indexOf(track) === -1;
	  }).map(trackToJson_));
	};

	/**
	 * Creates a set of remote text tracks on a tech based on an array of
	 * javascript text track representations.
	 * @param json {Array} an array of text track representation objects,
	 * like those that would be produced by `textTracksToJson`
	 * @param tech {tech} the tech to create text tracks on
	 * @function jsonToTextTracks
	 */
	var jsonToTextTracks = function jsonToTextTracks(json, tech) {
	  json.forEach(function (track) {
	    var addedTrack = tech.addRemoteTextTrack(track).track;
	    if (!track.src && track.cues) {
	      track.cues.forEach(function (cue) {
	        return addedTrack.addCue(cue);
	      });
	    }
	  });

	  return tech.textTracks();
	};

	exports['default'] = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };
	module.exports = exports['default'];

	},{}],132:[function(_dereq_,module,exports){
	/**
	 * @file text-track-list.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _trackList = _dereq_('./track-list');

	var _trackList2 = _interopRequireDefault(_trackList);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	/**
	 * A list of possible text tracks. All functionality is in the
	 * base class TrackList. The spec for TextTrackList is located at:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist
	 *
	 * interface TextTrackList : EventTarget {
	 *   readonly attribute unsigned long length;
	 *   getter TextTrack (unsigned long index);
	 *   TextTrack? getTrackById(DOMString id);
	 *
	 *   attribute EventHandler onchange;
	 *   attribute EventHandler onaddtrack;
	 *   attribute EventHandler onremovetrack;
	 * };
	 *
	 * @param {TextTrack[]} tracks A list of tracks to initialize the list with
	 * @extends TrackList
	 * @class TextTrackList
	 */

	var TextTrackList = (function (_TrackList) {
	  _inherits(TextTrackList, _TrackList);

	  function TextTrackList() {
	    var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	    _classCallCheck(this, TextTrackList);

	    var list = undefined;

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _globalDocument2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var prop in TextTrackList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = TextTrackList.prototype[prop];
	        }
	      }
	    }

	    list = _TrackList.call(this, tracks, list);
	    return list;
	  }

	  TextTrackList.prototype.addTrack_ = function addTrack_(track) {
	    _TrackList.prototype.addTrack_.call(this, track);
	    track.addEventListener('modechange', Fn.bind(this, function () {
	      this.trigger('change');
	    }));
	  };

	  /**
	   * Remove TextTrack from TextTrackList
	   * NOTE: Be mindful of what is passed in as it may be a HTMLTrackElement
	   *
	   * @param {TextTrack} rtrack
	   * @method removeTrack_
	   * @private
	   */

	  TextTrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {
	    var track = undefined;

	    for (var i = 0, l = this.length; i < l; i++) {
	      if (this[i] === rtrack) {
	        track = this[i];
	        if (track.off) {
	          track.off();
	        }

	        this.tracks_.splice(i, 1);

	        break;
	      }
	    }

	    if (!track) {
	      return;
	    }

	    this.trigger({
	      track: track,
	      type: 'removetrack'
	    });
	  };

	  /**
	   * Get a TextTrack from TextTrackList by a tracks id
	   *
	   * @param {String} id - the id of the track to get
	   * @method getTrackById
	   * @return {TextTrack}
	   * @private
	   */

	  TextTrackList.prototype.getTrackById = function getTrackById(id) {
	    var result = null;

	    for (var i = 0, l = this.length; i < l; i++) {
	      var track = this[i];

	      if (track.id === id) {
	        result = track;
	        break;
	      }
	    }

	    return result;
	  };

	  return TextTrackList;
	})(_trackList2['default']);

	exports['default'] = TextTrackList;
	module.exports = exports['default'];

	},{"../utils/browser.js":140,"../utils/fn.js":144,"./track-list":136,"global/document":1}],133:[function(_dereq_,module,exports){
	/**
	 * @file text-track-settings.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _component = _dereq_('../component');

	var _component2 = _interopRequireDefault(_component);

	var _utilsEventsJs = _dereq_('../utils/events.js');

	var Events = _interopRequireWildcard(_utilsEventsJs);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsLogJs = _dereq_('../utils/log.js');

	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

	var _safeJsonParseTuple = _dereq_('safe-json-parse/tuple');

	var _safeJsonParseTuple2 = _interopRequireDefault(_safeJsonParseTuple);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	/**
	 * Manipulate settings of texttracks
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @extends Component
	 * @class TextTrackSettings
	 */

	var TextTrackSettings = (function (_Component) {
	  _inherits(TextTrackSettings, _Component);

	  function TextTrackSettings(player, options) {
	    _classCallCheck(this, TextTrackSettings);

	    _Component.call(this, player, options);
	    this.hide();

	    // Grab `persistTextTrackSettings` from the player options if not passed in child options
	    if (options.persistTextTrackSettings === undefined) {
	      this.options_.persistTextTrackSettings = this.options_.playerOptions.persistTextTrackSettings;
	    }

	    Events.on(this.$('.vjs-done-button'), 'click', Fn.bind(this, function () {
	      this.saveSettings();
	      this.hide();
	    }));

	    Events.on(this.$('.vjs-default-button'), 'click', Fn.bind(this, function () {
	      this.$('.vjs-fg-color > select').selectedIndex = 0;
	      this.$('.vjs-bg-color > select').selectedIndex = 0;
	      this.$('.window-color > select').selectedIndex = 0;
	      this.$('.vjs-text-opacity > select').selectedIndex = 0;
	      this.$('.vjs-bg-opacity > select').selectedIndex = 0;
	      this.$('.vjs-window-opacity > select').selectedIndex = 0;
	      this.$('.vjs-edge-style select').selectedIndex = 0;
	      this.$('.vjs-font-family select').selectedIndex = 0;
	      this.$('.vjs-font-percent select').selectedIndex = 2;
	      this.updateDisplay();
	    }));

	    Events.on(this.$('.vjs-fg-color > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-bg-color > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.window-color > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-text-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-bg-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-window-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-font-percent select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-edge-style select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-font-family select'), 'change', Fn.bind(this, this.updateDisplay));

	    if (this.options_.persistTextTrackSettings) {
	      this.restoreSettings();
	    }
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */

	  TextTrackSettings.prototype.createEl = function createEl() {
	    var uniqueId = this.id_;
	    var dialogLabelId = 'TTsettingsDialogLabel-' + uniqueId;
	    var dialogDescriptionId = 'TTsettingsDialogDescription-' + uniqueId;

	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-caption-settings vjs-modal-overlay',
	      innerHTML: captionOptionsMenuTemplate(uniqueId, dialogLabelId, dialogDescriptionId),
	      tabIndex: -1
	    }, {
	      role: 'dialog',
	      'aria-labelledby': dialogLabelId,
	      'aria-describedby': dialogDescriptionId
	    });
	  };

	  /**
	   * Get texttrack settings
	   * Settings are
	   * .vjs-edge-style
	   * .vjs-font-family
	   * .vjs-fg-color
	   * .vjs-text-opacity
	   * .vjs-bg-color
	   * .vjs-bg-opacity
	   * .window-color
	   * .vjs-window-opacity
	   *
	   * @return {Object}
	   * @method getValues
	   */

	  TextTrackSettings.prototype.getValues = function getValues() {
	    var textEdge = getSelectedOptionValue(this.$('.vjs-edge-style select'));
	    var fontFamily = getSelectedOptionValue(this.$('.vjs-font-family select'));
	    var fgColor = getSelectedOptionValue(this.$('.vjs-fg-color > select'));
	    var textOpacity = getSelectedOptionValue(this.$('.vjs-text-opacity > select'));
	    var bgColor = getSelectedOptionValue(this.$('.vjs-bg-color > select'));
	    var bgOpacity = getSelectedOptionValue(this.$('.vjs-bg-opacity > select'));
	    var windowColor = getSelectedOptionValue(this.$('.window-color > select'));
	    var windowOpacity = getSelectedOptionValue(this.$('.vjs-window-opacity > select'));
	    var fontPercent = _globalWindow2['default']['parseFloat'](getSelectedOptionValue(this.$('.vjs-font-percent > select')));

	    var result = {
	      'backgroundOpacity': bgOpacity,
	      'textOpacity': textOpacity,
	      'windowOpacity': windowOpacity,
	      'edgeStyle': textEdge,
	      'fontFamily': fontFamily,
	      'color': fgColor,
	      'backgroundColor': bgColor,
	      'windowColor': windowColor,
	      'fontPercent': fontPercent
	    };
	    for (var _name in result) {
	      if (result[_name] === '' || result[_name] === 'none' || _name === 'fontPercent' && result[_name] === 1.00) {
	        delete result[_name];
	      }
	    }
	    return result;
	  };

	  /**
	   * Set texttrack settings
	   * Settings are
	   * .vjs-edge-style
	   * .vjs-font-family
	   * .vjs-fg-color
	   * .vjs-text-opacity
	   * .vjs-bg-color
	   * .vjs-bg-opacity
	   * .window-color
	   * .vjs-window-opacity
	   *
	   * @param {Object} values Object with texttrack setting values
	   * @method setValues
	   */

	  TextTrackSettings.prototype.setValues = function setValues(values) {
	    setSelectedOption(this.$('.vjs-edge-style select'), values.edgeStyle);
	    setSelectedOption(this.$('.vjs-font-family select'), values.fontFamily);
	    setSelectedOption(this.$('.vjs-fg-color > select'), values.color);
	    setSelectedOption(this.$('.vjs-text-opacity > select'), values.textOpacity);
	    setSelectedOption(this.$('.vjs-bg-color > select'), values.backgroundColor);
	    setSelectedOption(this.$('.vjs-bg-opacity > select'), values.backgroundOpacity);
	    setSelectedOption(this.$('.window-color > select'), values.windowColor);
	    setSelectedOption(this.$('.vjs-window-opacity > select'), values.windowOpacity);

	    var fontPercent = values.fontPercent;

	    if (fontPercent) {
	      fontPercent = fontPercent.toFixed(2);
	    }

	    setSelectedOption(this.$('.vjs-font-percent > select'), fontPercent);
	  };

	  /**
	   * Restore texttrack settings
	   *
	   * @method restoreSettings
	   */

	  TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
	    var err = undefined,
	        values = undefined;

	    try {
	      var _safeParseTuple = _safeJsonParseTuple2['default'](_globalWindow2['default'].localStorage.getItem('vjs-text-track-settings'));

	      err = _safeParseTuple[0];
	      values = _safeParseTuple[1];

	      if (err) {
	        _utilsLogJs2['default'].error(err);
	      }
	    } catch (e) {
	      _utilsLogJs2['default'].warn(e);
	    }

	    if (values) {
	      this.setValues(values);
	    }
	  };

	  /**
	   * Save texttrack settings to local storage
	   *
	   * @method saveSettings
	   */

	  TextTrackSettings.prototype.saveSettings = function saveSettings() {
	    if (!this.options_.persistTextTrackSettings) {
	      return;
	    }

	    var values = this.getValues();
	    try {
	      if (Object.getOwnPropertyNames(values).length > 0) {
	        _globalWindow2['default'].localStorage.setItem('vjs-text-track-settings', JSON.stringify(values));
	      } else {
	        _globalWindow2['default'].localStorage.removeItem('vjs-text-track-settings');
	      }
	    } catch (e) {
	      _utilsLogJs2['default'].warn(e);
	    }
	  };

	  /**
	   * Update display of texttrack settings
	   *
	   * @method updateDisplay
	   */

	  TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
	    var ttDisplay = this.player_.getChild('textTrackDisplay');
	    if (ttDisplay) {
	      ttDisplay.updateDisplay();
	    }
	  };

	  return TextTrackSettings;
	})(_component2['default']);

	_component2['default'].registerComponent('TextTrackSettings', TextTrackSettings);

	function getSelectedOptionValue(target) {
	  var selectedOption = undefined;
	  // not all browsers support selectedOptions, so, fallback to options
	  if (target.selectedOptions) {
	    selectedOption = target.selectedOptions[0];
	  } else if (target.options) {
	    selectedOption = target.options[target.options.selectedIndex];
	  }

	  return selectedOption.value;
	}

	function setSelectedOption(target, value) {
	  if (!value) {
	    return;
	  }

	  var i = undefined;
	  for (i = 0; i < target.options.length; i++) {
	    var option = target.options[i];
	    if (option.value === value) {
	      break;
	    }
	  }

	  target.selectedIndex = i;
	}

	function captionOptionsMenuTemplate(uniqueId, dialogLabelId, dialogDescriptionId) {

	  var template = '\n    <div role="document">\n      <div role="heading" aria-level="1" id="' + dialogLabelId + '" class="vjs-control-text">Captions Settings Dialog</div>\n      <div id="' + dialogDescriptionId + '" class="vjs-control-text">Beginning of dialog window. Escape will cancel and close the window.</div>\n      <div class="vjs-tracksettings">\n        <div class="vjs-tracksettings-colors">\n          <fieldset class="vjs-fg-color vjs-tracksetting">\n            <legend>Text</legend>\n            <label class="vjs-label" for="captions-foreground-color-' + uniqueId + '">Color</label>\n            <select id="captions-foreground-color-' + uniqueId + '">\n              <option value="#FFF" selected>White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-text-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-foreground-opacity-' + uniqueId + '">Transparency</label>\n              <select id="captions-foreground-opacity-' + uniqueId + '">\n                <option value="1" selected>Opaque</option>\n                <option value="0.5">Semi-Opaque</option>\n              </select>\n            </span>\n          </fieldset>\n          <fieldset class="vjs-bg-color vjs-tracksetting">\n            <legend>Background</legend>\n            <label class="vjs-label" for="captions-background-color-' + uniqueId + '">Color</label>\n            <select id="captions-background-color-' + uniqueId + '">\n              <option value="#000" selected>Black</option>\n              <option value="#FFF">White</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-bg-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-background-opacity-' + uniqueId + '">Transparency</label>\n              <select id="captions-background-opacity-' + uniqueId + '">\n                <option value="1" selected>Opaque</option>\n                <option value="0.5">Semi-Transparent</option>\n                <option value="0">Transparent</option>\n              </select>\n            </span>\n          </fieldset>\n          <fieldset class="window-color vjs-tracksetting">\n            <legend>Window</legend>\n            <label class="vjs-label" for="captions-window-color-' + uniqueId + '">Color</label>\n            <select id="captions-window-color-' + uniqueId + '">\n              <option value="#000" selected>Black</option>\n              <option value="#FFF">White</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-window-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-window-opacity-' + uniqueId + '">Transparency</label>\n              <select id="captions-window-opacity-' + uniqueId + '">\n                <option value="0" selected>Transparent</option>\n                <option value="0.5">Semi-Transparent</option>\n                <option value="1">Opaque</option>\n              </select>\n            </span>\n          </fieldset>\n        </div> <!-- vjs-tracksettings-colors -->\n        <div class="vjs-tracksettings-font">\n          <div class="vjs-font-percent vjs-tracksetting">\n            <label class="vjs-label" for="captions-font-size-' + uniqueId + '">Font Size</label>\n            <select id="captions-font-size-' + uniqueId + '">\n              <option value="0.50">50%</option>\n              <option value="0.75">75%</option>\n              <option value="1.00" selected>100%</option>\n              <option value="1.25">125%</option>\n              <option value="1.50">150%</option>\n              <option value="1.75">175%</option>\n              <option value="2.00">200%</option>\n              <option value="3.00">300%</option>\n              <option value="4.00">400%</option>\n            </select>\n          </div>\n          <div class="vjs-edge-style vjs-tracksetting">\n            <label class="vjs-label" for="captions-edge-style-' + uniqueId + '">Text Edge Style</label>\n            <select id="captions-edge-style-' + uniqueId + '">\n              <option value="none" selected>None</option>\n              <option value="raised">Raised</option>\n              <option value="depressed">Depressed</option>\n              <option value="uniform">Uniform</option>\n              <option value="dropshadow">Dropshadow</option>\n            </select>\n          </div>\n          <div class="vjs-font-family vjs-tracksetting">\n            <label class="vjs-label" for="captions-font-family-' + uniqueId + '">Font Family</label>\n            <select id="captions-font-family-' + uniqueId + '">\n              <option value="proportionalSansSerif" selected>Proportional Sans-Serif</option>\n              <option value="monospaceSansSerif">Monospace Sans-Serif</option>\n              <option value="proportionalSerif">Proportional Serif</option>\n              <option value="monospaceSerif">Monospace Serif</option>\n              <option value="casual">Casual</option>\n              <option value="script">Script</option>\n              <option value="small-caps">Small Caps</option>\n            </select>\n          </div>\n        </div> <!-- vjs-tracksettings-font -->\n        <div class="vjs-tracksettings-controls">\n          <button class="vjs-default-button">Defaults</button>\n          <button class="vjs-done-button">Done</button>\n        </div>\n      </div> <!-- vjs-tracksettings -->\n    </div> <!--  role="document" -->';

	  return template;
	}

	exports['default'] = TextTrackSettings;
	module.exports = exports['default'];

	},{"../component":67,"../utils/events.js":143,"../utils/fn.js":144,"../utils/log.js":147,"global/window":2,"safe-json-parse/tuple":54}],134:[function(_dereq_,module,exports){
	/**
	 * @file text-track.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _textTrackCueList = _dereq_('./text-track-cue-list');

	var _textTrackCueList2 = _interopRequireDefault(_textTrackCueList);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _trackEnums = _dereq_('./track-enums');

	var _utilsLogJs = _dereq_('../utils/log.js');

	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _trackJs = _dereq_('./track.js');

	var _trackJs2 = _interopRequireDefault(_trackJs);

	var _utilsUrlJs = _dereq_('../utils/url.js');

	var _xhr = _dereq_('xhr');

	var _xhr2 = _interopRequireDefault(_xhr);

	var _utilsMergeOptions = _dereq_('../utils/merge-options');

	var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	/**
	 * takes a webvtt file contents and parses it into cues
	 *
	 * @param {String} srcContent webVTT file contents
	 * @param {Track} track track to addcues to
	 */
	var parseCues = function parseCues(srcContent, track) {
	  var parser = new _globalWindow2['default'].WebVTT.Parser(_globalWindow2['default'], _globalWindow2['default'].vttjs, _globalWindow2['default'].WebVTT.StringDecoder());
	  var errors = [];

	  parser.oncue = function (cue) {
	    track.addCue(cue);
	  };

	  parser.onparsingerror = function (error) {
	    errors.push(error);
	  };

	  parser.onflush = function () {
	    track.trigger({
	      type: 'loadeddata',
	      target: track
	    });
	  };

	  parser.parse(srcContent);
	  if (errors.length > 0) {
	    if (console.groupCollapsed) {
	      console.groupCollapsed('Text Track parsing errors for ' + track.src);
	    }
	    errors.forEach(function (error) {
	      return _utilsLogJs2['default'].error(error);
	    });
	    if (console.groupEnd) {
	      console.groupEnd();
	    }
	  }

	  parser.flush();
	};

	/**
	 * load a track from a  specifed url
	 *
	 * @param {String} src url to load track from
	 * @param {Track} track track to addcues to
	 */
	var loadTrack = function loadTrack(src, track) {
	  var opts = {
	    uri: src
	  };
	  var crossOrigin = _utilsUrlJs.isCrossOrigin(src);

	  if (crossOrigin) {
	    opts.cors = crossOrigin;
	  }

	  _xhr2['default'](opts, Fn.bind(this, function (err, response, responseBody) {
	    if (err) {
	      return _utilsLogJs2['default'].error(err, response);
	    }

	    track.loaded_ = true;

	    // Make sure that vttjs has loaded, otherwise, wait till it finished loading
	    // NOTE: this is only used for the alt/video.novtt.js build
	    if (typeof _globalWindow2['default'].WebVTT !== 'function') {
	      if (track.tech_) {
	        (function () {
	          var loadHandler = function loadHandler() {
	            return parseCues(responseBody, track);
	          };
	          track.tech_.on('vttjsloaded', loadHandler);
	          track.tech_.on('vttjserror', function () {
	            _utilsLogJs2['default'].error('vttjs failed to load, stopping trying to process ' + track.src);
	            track.tech_.off('vttjsloaded', loadHandler);
	          });
	        })();
	      }
	    } else {
	      parseCues(responseBody, track);
	    }
	  }));
	};

	/**
	 * A single text track as defined in:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack
	 *
	 * interface TextTrack : EventTarget {
	 *   readonly attribute TextTrackKind kind;
	 *   readonly attribute DOMString label;
	 *   readonly attribute DOMString language;
	 *
	 *   readonly attribute DOMString id;
	 *   readonly attribute DOMString inBandMetadataTrackDispatchType;
	 *
	 *   attribute TextTrackMode mode;
	 *
	 *   readonly attribute TextTrackCueList? cues;
	 *   readonly attribute TextTrackCueList? activeCues;
	 *
	 *   void addCue(TextTrackCue cue);
	 *   void removeCue(TextTrackCue cue);
	 *
	 *   attribute EventHandler oncuechange;
	 * };
	 *
	 * @param {Object=} options Object of option names and values
	 * @extends Track
	 * @class TextTrack
	 */

	var TextTrack = (function (_Track) {
	  _inherits(TextTrack, _Track);

	  function TextTrack() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, TextTrack);

	    if (!options.tech) {
	      throw new Error('A tech was not provided.');
	    }

	    var settings = _utilsMergeOptions2['default'](options, {
	      kind: _trackEnums.TextTrackKind[options.kind] || 'subtitles',
	      language: options.language || options.srclang || ''
	    });
	    var mode = _trackEnums.TextTrackMode[settings.mode] || 'disabled';
	    var default_ = settings['default'];

	    if (settings.kind === 'metadata' || settings.kind === 'chapters') {
	      mode = 'hidden';
	    }
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var tt = _Track.call(this, settings);
	    tt.tech_ = settings.tech;

	    if (browser.IS_IE8) {
	      for (var prop in TextTrack.prototype) {
	        if (prop !== 'constructor') {
	          tt[prop] = TextTrack.prototype[prop];
	        }
	      }
	    }

	    tt.cues_ = [];
	    tt.activeCues_ = [];

	    var cues = new _textTrackCueList2['default'](tt.cues_);
	    var activeCues = new _textTrackCueList2['default'](tt.activeCues_);
	    var changed = false;
	    var timeupdateHandler = Fn.bind(tt, function () {
	      this.activeCues;
	      if (changed) {
	        this.trigger('cuechange');
	        changed = false;
	      }
	    });

	    if (mode !== 'disabled') {
	      tt.tech_.on('timeupdate', timeupdateHandler);
	    }

	    Object.defineProperty(tt, 'default', {
	      get: function get() {
	        return default_;
	      },
	      set: function set() {}
	    });

	    Object.defineProperty(tt, 'mode', {
	      get: function get() {
	        return mode;
	      },
	      set: function set(newMode) {
	        if (!_trackEnums.TextTrackMode[newMode]) {
	          return;
	        }
	        mode = newMode;
	        if (mode === 'showing') {
	          this.tech_.on('timeupdate', timeupdateHandler);
	        }
	        this.trigger('modechange');
	      }
	    });

	    Object.defineProperty(tt, 'cues', {
	      get: function get() {
	        if (!this.loaded_) {
	          return null;
	        }

	        return cues;
	      },
	      set: function set() {}
	    });

	    Object.defineProperty(tt, 'activeCues', {
	      get: function get() {
	        if (!this.loaded_) {
	          return null;
	        }

	        // nothing to do
	        if (this.cues.length === 0) {
	          return activeCues;
	        }

	        var ct = this.tech_.currentTime();
	        var active = [];

	        for (var i = 0, l = this.cues.length; i < l; i++) {
	          var cue = this.cues[i];

	          if (cue.startTime <= ct && cue.endTime >= ct) {
	            active.push(cue);
	          } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
	            active.push(cue);
	          }
	        }

	        changed = false;

	        if (active.length !== this.activeCues_.length) {
	          changed = true;
	        } else {
	          for (var i = 0; i < active.length; i++) {
	            if (this.activeCues_.indexOf(active[i]) === -1) {
	              changed = true;
	            }
	          }
	        }

	        this.activeCues_ = active;
	        activeCues.setCues_(this.activeCues_);

	        return activeCues;
	      },
	      set: function set() {}
	    });

	    if (settings.src) {
	      tt.src = settings.src;
	      loadTrack(settings.src, tt);
	    } else {
	      tt.loaded_ = true;
	    }

	    return tt;
	  }

	  /**
	   * cuechange - One or more cues in the track have become active or stopped being active.
	   */

	  /**
	   * add a cue to the internal list of cues
	   *
	   * @param {Object} cue the cue to add to our internal list
	   * @method addCue
	   */

	  TextTrack.prototype.addCue = function addCue(cue) {
	    var tracks = this.tech_.textTracks();

	    if (tracks) {
	      for (var i = 0; i < tracks.length; i++) {
	        if (tracks[i] !== this) {
	          tracks[i].removeCue(cue);
	        }
	      }
	    }

	    this.cues_.push(cue);
	    this.cues.setCues_(this.cues_);
	  };

	  /**
	   * remvoe a cue from our internal list
	   *
	   * @param {Object} removeCue the cue to remove from our internal list
	   * @method removeCue
	   */

	  TextTrack.prototype.removeCue = function removeCue(_removeCue) {
	    var removed = false;

	    for (var i = 0, l = this.cues_.length; i < l; i++) {
	      var cue = this.cues_[i];

	      if (cue === _removeCue) {
	        this.cues_.splice(i, 1);
	        removed = true;
	      }
	    }

	    if (removed) {
	      this.cues.setCues_(this.cues_);
	    }
	  };

	  return TextTrack;
	})(_trackJs2['default']);

	TextTrack.prototype.allowedEvents_ = {
	  cuechange: 'cuechange'
	};

	exports['default'] = TextTrack;
	module.exports = exports['default'];

	},{"../utils/browser.js":140,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options":148,"../utils/url.js":152,"./text-track-cue-list":129,"./track-enums":135,"./track.js":137,"global/document":1,"global/window":2,"xhr":56}],135:[function(_dereq_,module,exports){
	/**
	 * @file track-kinds.js
	 */

	/**
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
	 *
	 * enum VideoTrackKind {
	 *   "alternative",
	 *   "captions",
	 *   "main",
	 *   "sign",
	 *   "subtitles",
	 *   "commentary",
	 *   "",
	 * };
	 */
	'use strict';

	exports.__esModule = true;
	var VideoTrackKind = {
	  alternative: 'alternative',
	  captions: 'captions',
	  main: 'main',
	  sign: 'sign',
	  subtitles: 'subtitles',
	  commentary: 'commentary'
	};

	/**
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
	 *
	 * enum AudioTrackKind {
	 *   "alternative",
	 *   "descriptions",
	 *   "main",
	 *   "main-desc",
	 *   "translation",
	 *   "commentary",
	 *   "",
	 * };
	 */
	var AudioTrackKind = {
	  alternative: 'alternative',
	  descriptions: 'descriptions',
	  main: 'main',
	  'main-desc': 'main-desc',
	  translation: 'translation',
	  commentary: 'commentary'
	};

	/**
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackkind
	 *
	 * enum TextTrackKind {
	 *   "subtitles",
	 *   "captions",
	 *   "descriptions",
	 *   "chapters",
	 *   "metadata"
	 * };
	 */
	var TextTrackKind = {
	  subtitles: 'subtitles',
	  captions: 'captions',
	  descriptions: 'descriptions',
	  chapters: 'chapters',
	  metadata: 'metadata'
	};

	/**
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
	 *
	 * enum TextTrackMode { "disabled",  "hidden",  "showing" };
	 */
	var TextTrackMode = {
	  disabled: 'disabled',
	  hidden: 'hidden',
	  showing: 'showing'
	};

	/* jshint ignore:start */
	// we ignore jshint here because it does not see
	// AudioTrackKind as defined here
	exports['default'] = { VideoTrackKind: VideoTrackKind, AudioTrackKind: AudioTrackKind, TextTrackKind: TextTrackKind, TextTrackMode: TextTrackMode };

	/* jshint ignore:end */
	module.exports = exports['default'];

	},{}],136:[function(_dereq_,module,exports){
	/**
	 * @file track-list.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _eventTarget = _dereq_('../event-target');

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	var _utilsFnJs = _dereq_('../utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	/**
	 * Common functionaliy between Text, Audio, and Video TrackLists
	 * Interfaces defined in the following spec:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html
	 *
	 * @param {Track[]} tracks A list of tracks to initialize the list with
	 * @param {Object} list the child object with inheritance done manually for ie8
	 * @extends EventTarget
	 * @class TrackList
	 */

	var TrackList = (function (_EventTarget) {
	  _inherits(TrackList, _EventTarget);

	  function TrackList() {
	    var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	    var list = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

	    _classCallCheck(this, TrackList);

	    _EventTarget.call(this);
	    if (!list) {
	      list = this;
	      if (browser.IS_IE8) {
	        list = _globalDocument2['default'].createElement('custom');
	        for (var prop in TrackList.prototype) {
	          if (prop !== 'constructor') {
	            list[prop] = TrackList.prototype[prop];
	          }
	        }
	      }
	    }

	    list.tracks_ = [];
	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.tracks_.length;
	      }
	    });

	    for (var i = 0; i < tracks.length; i++) {
	      list.addTrack_(tracks[i]);
	    }

	    return list;
	  }

	  /**
	   * change - One or more tracks in the track list have been enabled or disabled.
	   * addtrack - A track has been added to the track list.
	   * removetrack - A track has been removed from the track list.
	   */

	  /**
	   * Add a Track from TrackList
	   *
	   * @param {Mixed} track
	   * @method addTrack_
	   * @private
	   */

	  TrackList.prototype.addTrack_ = function addTrack_(track) {
	    var index = this.tracks_.length;

	    if (!('' + index in this)) {
	      Object.defineProperty(this, index, {
	        get: function get() {
	          return this.tracks_[index];
	        }
	      });
	    }

	    // Do not add duplicate tracks
	    if (this.tracks_.indexOf(track) === -1) {
	      this.tracks_.push(track);
	      this.trigger({
	        track: track,
	        type: 'addtrack'
	      });
	    }
	  };

	  /**
	   * Remove a Track from TrackList
	   *
	   * @param {Track} rtrack track to be removed
	   * @method removeTrack_
	   * @private
	   */

	  TrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {
	    var track = undefined;

	    for (var i = 0, l = this.length; i < l; i++) {
	      if (this[i] === rtrack) {
	        track = this[i];
	        if (track.off) {
	          track.off();
	        }

	        this.tracks_.splice(i, 1);

	        break;
	      }
	    }

	    if (!track) {
	      return;
	    }

	    this.trigger({
	      track: track,
	      type: 'removetrack'
	    });
	  };

	  /**
	   * Get a Track from the TrackList by a tracks id
	   *
	   * @param {String} id - the id of the track to get
	   * @method getTrackById
	   * @return {Track}
	   * @private
	   */

	  TrackList.prototype.getTrackById = function getTrackById(id) {
	    var result = null;

	    for (var i = 0, l = this.length; i < l; i++) {
	      var track = this[i];
	      if (track.id === id) {
	        result = track;
	        break;
	      }
	    }

	    return result;
	  };

	  return TrackList;
	})(_eventTarget2['default']);

	TrackList.prototype.allowedEvents_ = {
	  change: 'change',
	  addtrack: 'addtrack',
	  removetrack: 'removetrack'
	};

	// emulate attribute EventHandler support to allow for feature detection
	for (var _event in TrackList.prototype.allowedEvents_) {
	  TrackList.prototype['on' + _event] = null;
	}

	exports['default'] = TrackList;
	module.exports = exports['default'];

	},{"../event-target":104,"../utils/browser.js":140,"../utils/fn.js":144,"global/document":1}],137:[function(_dereq_,module,exports){
	/**
	 * @file track.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _utilsGuidJs = _dereq_('../utils/guid.js');

	var Guid = _interopRequireWildcard(_utilsGuidJs);

	var _eventTarget = _dereq_('../event-target');

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	/**
	 * setup the common parts of an audio, video, or text track
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html
	 *
	 * @param {String} type The type of track we are dealing with audio|video|text
	 * @param {Object=} options Object of option names and values
	 * @extends EventTarget
	 * @class Track
	 */

	var Track = (function (_EventTarget) {
	  _inherits(Track, _EventTarget);

	  function Track() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, Track);

	    _EventTarget.call(this);

	    var track = this;
	    if (browser.IS_IE8) {
	      track = _globalDocument2['default'].createElement('custom');
	      for (var prop in Track.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = Track.prototype[prop];
	        }
	      }
	    }

	    var trackProps = {
	      id: options.id || 'vjs_track_' + Guid.newGUID(),
	      kind: options.kind || '',
	      label: options.label || '',
	      language: options.language || ''
	    };

	    var _loop = function (key) {
	      Object.defineProperty(track, key, {
	        get: function get() {
	          return trackProps[key];
	        },
	        set: function set() {}
	      });
	    };

	    for (var key in trackProps) {
	      _loop(key);
	    }

	    return track;
	  }

	  return Track;
	})(_eventTarget2['default']);

	exports['default'] = Track;
	module.exports = exports['default'];

	},{"../event-target":104,"../utils/browser.js":140,"../utils/guid.js":146,"global/document":1}],138:[function(_dereq_,module,exports){
	/**
	 * @file video-track-list.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _trackList = _dereq_('./track-list');

	var _trackList2 = _interopRequireDefault(_trackList);

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	/**
	 * disable other video tracks before selecting the new one
	 *
	 * @param {Array|VideoTrackList} list list to work on
	 * @param {VideoTrack} track the track to skip
	 */
	var disableOthers = function disableOthers(list, track) {
	  for (var i = 0; i < list.length; i++) {
	    if (track.id === list[i].id) {
	      continue;
	    }
	    // another audio track is enabled, disable it
	    list[i].selected = false;
	  }
	};

	/**
	* A list of possiblee video tracks. Most functionality is in the
	 * base class Tracklist and the spec for VideoTrackList is located at:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
	 *
	 * interface VideoTrackList : EventTarget {
	 *   readonly attribute unsigned long length;
	 *   getter VideoTrack (unsigned long index);
	 *   VideoTrack? getTrackById(DOMString id);
	 *   readonly attribute long selectedIndex;
	 *
	 *   attribute EventHandler onchange;
	 *   attribute EventHandler onaddtrack;
	 *   attribute EventHandler onremovetrack;
	 * };
	 *
	 * @param {VideoTrack[]} tracks a list of video tracks to instantiate the list with
	 # @extends TrackList
	 * @class VideoTrackList
	 */

	var VideoTrackList = (function (_TrackList) {
	  _inherits(VideoTrackList, _TrackList);

	  function VideoTrackList() {
	    var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	    _classCallCheck(this, VideoTrackList);

	    var list = undefined;

	    // make sure only 1 track is enabled
	    // sorted from last index to first index
	    for (var i = tracks.length - 1; i >= 0; i--) {
	      if (tracks[i].selected) {
	        disableOthers(tracks, tracks[i]);
	        break;
	      }
	    }

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _globalDocument2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var prop in VideoTrackList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = VideoTrackList.prototype[prop];
	        }
	      }
	    }

	    list = _TrackList.call(this, tracks, list);
	    list.changing_ = false;

	    Object.defineProperty(list, 'selectedIndex', {
	      get: function get() {
	        for (var i = 0; i < this.length; i++) {
	          if (this[i].selected) {
	            return i;
	          }
	        }
	        return -1;
	      },
	      set: function set() {}
	    });

	    return list;
	  }

	  VideoTrackList.prototype.addTrack_ = function addTrack_(track) {
	    var _this = this;

	    if (track.selected) {
	      disableOthers(this, track);
	    }

	    _TrackList.prototype.addTrack_.call(this, track);
	    // native tracks don't have this
	    if (!track.addEventListener) {
	      return;
	    }
	    track.addEventListener('selectedchange', function () {
	      if (_this.changing_) {
	        return;
	      }
	      _this.changing_ = true;
	      disableOthers(_this, track);
	      _this.changing_ = false;
	      _this.trigger('change');
	    });
	  };

	  VideoTrackList.prototype.addTrack = function addTrack(track) {
	    this.addTrack_(track);
	  };

	  VideoTrackList.prototype.removeTrack = function removeTrack(track) {
	    _TrackList.prototype.removeTrack_.call(this, track);
	  };

	  return VideoTrackList;
	})(_trackList2['default']);

	exports['default'] = VideoTrackList;
	module.exports = exports['default'];

	},{"../utils/browser.js":140,"./track-list":136,"global/document":1}],139:[function(_dereq_,module,exports){
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _trackEnums = _dereq_('./track-enums');

	var _track = _dereq_('./track');

	var _track2 = _interopRequireDefault(_track);

	var _utilsMergeOptions = _dereq_('../utils/merge-options');

	var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);

	var _utilsBrowserJs = _dereq_('../utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	/**
	 * A single video text track as defined in:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack
	 *
	 * interface VideoTrack {
	 *   readonly attribute DOMString id;
	 *   readonly attribute DOMString kind;
	 *   readonly attribute DOMString label;
	 *   readonly attribute DOMString language;
	 *   attribute boolean selected;
	 * };
	 *
	 * @param {Object=} options Object of option names and values
	 * @class VideoTrack
	 */

	var VideoTrack = (function (_Track) {
	  _inherits(VideoTrack, _Track);

	  function VideoTrack() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, VideoTrack);

	    var settings = _utilsMergeOptions2['default'](options, {
	      kind: _trackEnums.VideoTrackKind[options.kind] || ''
	    });

	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var track = _Track.call(this, settings);
	    var selected = false;

	    if (browser.IS_IE8) {
	      for (var prop in VideoTrack.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = VideoTrack.prototype[prop];
	        }
	      }
	    }

	    Object.defineProperty(track, 'selected', {
	      get: function get() {
	        return selected;
	      },
	      set: function set(newSelected) {
	        // an invalid or unchanged value
	        if (typeof newSelected !== 'boolean' || newSelected === selected) {
	          return;
	        }
	        selected = newSelected;
	        this.trigger('selectedchange');
	      }
	    });

	    // if the user sets this track to selected then
	    // set selected to that true value otherwise
	    // we keep it false
	    if (settings.selected) {
	      track.selected = settings.selected;
	    }

	    return track;
	  }

	  return VideoTrack;
	})(_track2['default']);

	exports['default'] = VideoTrack;
	module.exports = exports['default'];

	},{"../utils/browser.js":140,"../utils/merge-options":148,"./track":137,"./track-enums":135}],140:[function(_dereq_,module,exports){
	/**
	 * @file browser.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var USER_AGENT = _globalWindow2['default'].navigator.userAgent;
	var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
	var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;

	/*
	 * Device is an iPhone
	 *
	 * @type {Boolean}
	 * @constant
	 * @private
	 */
	var IS_IPAD = /iPad/i.test(USER_AGENT);

	exports.IS_IPAD = IS_IPAD;
	// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
	// to identify iPhones, we need to exclude iPads.
	// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
	var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
	exports.IS_IPHONE = IS_IPHONE;
	var IS_IPOD = /iPod/i.test(USER_AGENT);
	exports.IS_IPOD = IS_IPOD;
	var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

	exports.IS_IOS = IS_IOS;
	var IOS_VERSION = (function () {
	  var match = USER_AGENT.match(/OS (\d+)_/i);
	  if (match && match[1]) {
	    return match[1];
	  }
	})();

	exports.IOS_VERSION = IOS_VERSION;
	var IS_ANDROID = /Android/i.test(USER_AGENT);
	exports.IS_ANDROID = IS_ANDROID;
	var ANDROID_VERSION = (function () {
	  // This matches Android Major.Minor.Patch versions
	  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
	  var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i),
	      major,
	      minor;

	  if (!match) {
	    return null;
	  }

	  major = match[1] && parseFloat(match[1]);
	  minor = match[2] && parseFloat(match[2]);

	  if (major && minor) {
	    return parseFloat(match[1] + '.' + match[2]);
	  } else if (major) {
	    return major;
	  } else {
	    return null;
	  }
	})();
	exports.ANDROID_VERSION = ANDROID_VERSION;
	// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
	var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
	exports.IS_OLD_ANDROID = IS_OLD_ANDROID;
	var IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;

	exports.IS_NATIVE_ANDROID = IS_NATIVE_ANDROID;
	var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
	exports.IS_FIREFOX = IS_FIREFOX;
	var IS_EDGE = /Edge/i.test(USER_AGENT);
	exports.IS_EDGE = IS_EDGE;
	var IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
	exports.IS_CHROME = IS_CHROME;
	var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
	exports.IS_IE8 = IS_IE8;
	var IE_VERSION = (function (result) {
	  return result && parseFloat(result[1]);
	})(/MSIE\s(\d+)\.\d/.exec(USER_AGENT));

	exports.IE_VERSION = IE_VERSION;
	var TOUCH_ENABLED = !!('ontouchstart' in _globalWindow2['default'] || _globalWindow2['default'].DocumentTouch && _globalDocument2['default'] instanceof _globalWindow2['default'].DocumentTouch);
	exports.TOUCH_ENABLED = TOUCH_ENABLED;
	var BACKGROUND_SIZE_SUPPORTED = ('backgroundSize' in _globalDocument2['default'].createElement('video').style);
	exports.BACKGROUND_SIZE_SUPPORTED = BACKGROUND_SIZE_SUPPORTED;

	},{"global/document":1,"global/window":2}],141:[function(_dereq_,module,exports){
	/**
	 * @file buffer.js
	 */
	'use strict';

	exports.__esModule = true;
	exports.bufferedPercent = bufferedPercent;

	var _timeRangesJs = _dereq_('./time-ranges.js');

	/**
	 * Compute how much your video has been buffered
	 *
	 * @param  {Object} Buffered object
	 * @param  {Number} Total duration
	 * @return {Number} Percent buffered of the total duration
	 * @private
	 * @function bufferedPercent
	 */

	function bufferedPercent(buffered, duration) {
	  var bufferedDuration = 0,
	      start,
	      end;

	  if (!duration) {
	    return 0;
	  }

	  if (!buffered || !buffered.length) {
	    buffered = _timeRangesJs.createTimeRange(0, 0);
	  }

	  for (var i = 0; i < buffered.length; i++) {
	    start = buffered.start(i);
	    end = buffered.end(i);

	    // buffered end can be bigger than duration by a very small fraction
	    if (end > duration) {
	      end = duration;
	    }

	    bufferedDuration += end - start;
	  }

	  return bufferedDuration / duration;
	}

	},{"./time-ranges.js":150}],142:[function(_dereq_,module,exports){
	/**
	 * @file dom.js
	 */
	'use strict';

	exports.__esModule = true;
	exports.getEl = getEl;
	exports.createEl = createEl;
	exports.textContent = textContent;
	exports.insertElFirst = insertElFirst;
	exports.getElData = getElData;
	exports.hasElData = hasElData;
	exports.removeElData = removeElData;
	exports.hasElClass = hasElClass;
	exports.addElClass = addElClass;
	exports.removeElClass = removeElClass;
	exports.toggleElClass = toggleElClass;
	exports.setElAttributes = setElAttributes;
	exports.getElAttributes = getElAttributes;
	exports.blockTextSelection = blockTextSelection;
	exports.unblockTextSelection = unblockTextSelection;
	exports.findElPosition = findElPosition;
	exports.getPointerPosition = getPointerPosition;
	exports.isEl = isEl;
	exports.isTextNode = isTextNode;
	exports.emptyEl = emptyEl;
	exports.normalizeContent = normalizeContent;
	exports.appendContent = appendContent;
	exports.insertContent = insertContent;

	var _templateObject = _taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _guidJs = _dereq_('./guid.js');

	var Guid = _interopRequireWildcard(_guidJs);

	var _logJs = _dereq_('./log.js');

	var _logJs2 = _interopRequireDefault(_logJs);

	var _tsml = _dereq_('tsml');

	var _tsml2 = _interopRequireDefault(_tsml);

	/**
	 * Detect if a value is a string with any non-whitespace characters.
	 *
	 * @param  {String} str
	 * @return {Boolean}
	 */
	function isNonBlankString(str) {
	  return typeof str === 'string' && /\S/.test(str);
	}

	/**
	 * Throws an error if the passed string has whitespace. This is used by
	 * class methods to be relatively consistent with the classList API.
	 *
	 * @param  {String} str
	 * @return {Boolean}
	 */
	function throwIfWhitespace(str) {
	  if (/\s/.test(str)) {
	    throw new Error('class has illegal whitespace characters');
	  }
	}

	/**
	 * Produce a regular expression for matching a class name.
	 *
	 * @param  {String} className
	 * @return {RegExp}
	 */
	function classRegExp(className) {
	  return new RegExp('(^|\\s)' + className + '($|\\s)');
	}

	/**
	 * Creates functions to query the DOM using a given method.
	 *
	 * @function createQuerier
	 * @private
	 * @param  {String} method
	 * @return {Function}
	 */
	function createQuerier(method) {
	  return function (selector, context) {
	    if (!isNonBlankString(selector)) {
	      return _globalDocument2['default'][method](null);
	    }
	    if (isNonBlankString(context)) {
	      context = _globalDocument2['default'].querySelector(context);
	    }
	    return (isEl(context) ? context : _globalDocument2['default'])[method](selector);
	  };
	}

	/**
	 * Shorthand for document.getElementById()
	 * Also allows for CSS (jQuery) ID syntax. But nothing other than IDs.
	 *
	 * @param  {String} id  Element ID
	 * @return {Element}    Element with supplied ID
	 * @function getEl
	 */

	function getEl(id) {
	  if (id.indexOf('#') === 0) {
	    id = id.slice(1);
	  }

	  return _globalDocument2['default'].getElementById(id);
	}

	/**
	 * Creates an element and applies properties.
	 *
	 * @param  {String} [tagName='div'] Name of tag to be created.
	 * @param  {Object} [properties={}] Element properties to be applied.
	 * @param  {Object} [attributes={}] Element attributes to be applied.
	 * @return {Element}
	 * @function createEl
	 */

	function createEl() {
	  var tagName = arguments.length <= 0 || arguments[0] === undefined ? 'div' : arguments[0];
	  var properties = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	  var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  var el = _globalDocument2['default'].createElement(tagName);

	  Object.getOwnPropertyNames(properties).forEach(function (propName) {
	    var val = properties[propName];

	    // See #2176
	    // We originally were accepting both properties and attributes in the
	    // same object, but that doesn't work so well.
	    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
	      _logJs2['default'].warn(_tsml2['default'](_templateObject, propName, val));
	      el.setAttribute(propName, val);
	    } else {
	      el[propName] = val;
	    }
	  });

	  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
	    var val = attributes[attrName];
	    el.setAttribute(attrName, attributes[attrName]);
	  });

	  return el;
	}

	/**
	 * Injects text into an element, replacing any existing contents entirely.
	 *
	 * @param  {Element} el
	 * @param  {String} text
	 * @return {Element}
	 * @function textContent
	 */

	function textContent(el, text) {
	  if (typeof el.textContent === 'undefined') {
	    el.innerText = text;
	  } else {
	    el.textContent = text;
	  }
	}

	/**
	 * Insert an element as the first child node of another
	 *
	 * @param  {Element} child   Element to insert
	 * @param  {Element} parent Element to insert child into
	 * @private
	 * @function insertElFirst
	 */

	function insertElFirst(child, parent) {
	  if (parent.firstChild) {
	    parent.insertBefore(child, parent.firstChild);
	  } else {
	    parent.appendChild(child);
	  }
	}

	/**
	 * Element Data Store. Allows for binding data to an element without putting it directly on the element.
	 * Ex. Event listeners are stored here.
	 * (also from jsninja.com, slightly modified and updated for closure compiler)
	 *
	 * @type {Object}
	 * @private
	 */
	var elData = {};

	/*
	 * Unique attribute name to store an element's guid in
	 *
	 * @type {String}
	 * @constant
	 * @private
	 */
	var elIdAttr = 'vdata' + new Date().getTime();

	/**
	 * Returns the cache object where data for an element is stored
	 *
	 * @param  {Element} el Element to store data for.
	 * @return {Object}
	 * @function getElData
	 */

	function getElData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    id = el[elIdAttr] = Guid.newGUID();
	  }

	  if (!elData[id]) {
	    elData[id] = {};
	  }

	  return elData[id];
	}

	/**
	 * Returns whether or not an element has cached data
	 *
	 * @param  {Element} el A dom element
	 * @return {Boolean}
	 * @private
	 * @function hasElData
	 */

	function hasElData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    return false;
	  }

	  return !!Object.getOwnPropertyNames(elData[id]).length;
	}

	/**
	 * Delete data for the element from the cache and the guid attr from getElementById
	 *
	 * @param  {Element} el Remove data for an element
	 * @private
	 * @function removeElData
	 */

	function removeElData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    return;
	  }

	  // Remove all stored data
	  delete elData[id];

	  // Remove the elIdAttr property from the DOM node
	  try {
	    delete el[elIdAttr];
	  } catch (e) {
	    if (el.removeAttribute) {
	      el.removeAttribute(elIdAttr);
	    } else {
	      // IE doesn't appear to support removeAttribute on the document element
	      el[elIdAttr] = null;
	    }
	  }
	}

	/**
	 * Check if an element has a CSS class
	 *
	 * @function hasElClass
	 * @param {Element} element Element to check
	 * @param {String} classToCheck Classname to check
	 */

	function hasElClass(element, classToCheck) {
	  if (element.classList) {
	    return element.classList.contains(classToCheck);
	  } else {
	    throwIfWhitespace(classToCheck);
	    return classRegExp(classToCheck).test(element.className);
	  }
	}

	/**
	 * Add a CSS class name to an element
	 *
	 * @function addElClass
	 * @param {Element} element    Element to add class name to
	 * @param {String} classToAdd Classname to add
	 */

	function addElClass(element, classToAdd) {
	  if (element.classList) {
	    element.classList.add(classToAdd);

	    // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
	    // in the case of classList not being supported.
	  } else if (!hasElClass(element, classToAdd)) {
	      element.className = (element.className + ' ' + classToAdd).trim();
	    }

	  return element;
	}

	/**
	 * Remove a CSS class name from an element
	 *
	 * @function removeElClass
	 * @param {Element} element    Element to remove from class name
	 * @param {String} classToRemove Classname to remove
	 */

	function removeElClass(element, classToRemove) {
	  if (element.classList) {
	    element.classList.remove(classToRemove);
	  } else {
	    throwIfWhitespace(classToRemove);
	    element.className = element.className.split(/\s+/).filter(function (c) {
	      return c !== classToRemove;
	    }).join(' ');
	  }

	  return element;
	}

	/**
	 * Adds or removes a CSS class name on an element depending on an optional
	 * condition or the presence/absence of the class name.
	 *
	 * @function toggleElClass
	 * @param    {Element} element
	 * @param    {String} classToToggle
	 * @param    {Boolean|Function} [predicate]
	 *           Can be a function that returns a Boolean. If `true`, the class
	 *           will be added; if `false`, the class will be removed. If not
	 *           given, the class will be added if not present and vice versa.
	 */

	function toggleElClass(element, classToToggle, predicate) {

	  // This CANNOT use `classList` internally because IE does not support the
	  // second parameter to the `classList.toggle()` method! Which is fine because
	  // `classList` will be used by the add/remove functions.
	  var has = hasElClass(element, classToToggle);

	  if (typeof predicate === 'function') {
	    predicate = predicate(element, classToToggle);
	  }

	  if (typeof predicate !== 'boolean') {
	    predicate = !has;
	  }

	  // If the necessary class operation matches the current state of the
	  // element, no action is required.
	  if (predicate === has) {
	    return;
	  }

	  if (predicate) {
	    addElClass(element, classToToggle);
	  } else {
	    removeElClass(element, classToToggle);
	  }

	  return element;
	}

	/**
	 * Apply attributes to an HTML element.
	 *
	 * @param  {Element} el         Target element.
	 * @param  {Object=} attributes Element attributes to be applied.
	 * @private
	 * @function setElAttributes
	 */

	function setElAttributes(el, attributes) {
	  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
	    var attrValue = attributes[attrName];

	    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
	      el.removeAttribute(attrName);
	    } else {
	      el.setAttribute(attrName, attrValue === true ? '' : attrValue);
	    }
	  });
	}

	/**
	 * Get an element's attribute values, as defined on the HTML tag
	 * Attributes are not the same as properties. They're defined on the tag
	 * or with setAttribute (which shouldn't be used with HTML)
	 * This will return true or false for boolean attributes.
	 *
	 * @param  {Element} tag Element from which to get tag attributes
	 * @return {Object}
	 * @private
	 * @function getElAttributes
	 */

	function getElAttributes(tag) {
	  var obj, knownBooleans, attrs, attrName, attrVal;

	  obj = {};

	  // known boolean attributes
	  // we can check for matching boolean properties, but older browsers
	  // won't know about HTML5 boolean attributes that we still read from
	  knownBooleans = ',' + 'autoplay,controls,loop,muted,default' + ',';

	  if (tag && tag.attributes && tag.attributes.length > 0) {
	    attrs = tag.attributes;

	    for (var i = attrs.length - 1; i >= 0; i--) {
	      attrName = attrs[i].name;
	      attrVal = attrs[i].value;

	      // check for known booleans
	      // the matching element property will return a value for typeof
	      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
	        // the value of an included boolean attribute is typically an empty
	        // string ('') which would equal false if we just check for a false value.
	        // we also don't want support bad code like autoplay='false'
	        attrVal = attrVal !== null ? true : false;
	      }

	      obj[attrName] = attrVal;
	    }
	  }

	  return obj;
	}

	/**
	 * Attempt to block the ability to select text while dragging controls
	 *
	 * @return {Boolean}
	 * @function blockTextSelection
	 */

	function blockTextSelection() {
	  _globalDocument2['default'].body.focus();
	  _globalDocument2['default'].onselectstart = function () {
	    return false;
	  };
	}

	/**
	 * Turn off text selection blocking
	 *
	 * @return {Boolean}
	 * @function unblockTextSelection
	 */

	function unblockTextSelection() {
	  _globalDocument2['default'].onselectstart = function () {
	    return true;
	  };
	}

	/**
	 * Offset Left
	 * getBoundingClientRect technique from
	 * John Resig http://ejohn.org/blog/getboundingclientrect-is-awesome/
	 *
	 * @function findElPosition
	 * @param {Element} el Element from which to get offset
	 * @return {Object}
	 */

	function findElPosition(el) {
	  var box = undefined;

	  if (el.getBoundingClientRect && el.parentNode) {
	    box = el.getBoundingClientRect();
	  }

	  if (!box) {
	    return {
	      left: 0,
	      top: 0
	    };
	  }

	  var docEl = _globalDocument2['default'].documentElement;
	  var body = _globalDocument2['default'].body;

	  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
	  var scrollLeft = _globalWindow2['default'].pageXOffset || body.scrollLeft;
	  var left = box.left + scrollLeft - clientLeft;

	  var clientTop = docEl.clientTop || body.clientTop || 0;
	  var scrollTop = _globalWindow2['default'].pageYOffset || body.scrollTop;
	  var top = box.top + scrollTop - clientTop;

	  // Android sometimes returns slightly off decimal values, so need to round
	  return {
	    left: Math.round(left),
	    top: Math.round(top)
	  };
	}

	/**
	 * Get pointer position in element
	 * Returns an object with x and y coordinates.
	 * The base on the coordinates are the bottom left of the element.
	 *
	 * @function getPointerPosition
	 * @param {Element} el Element on which to get the pointer position on
	 * @param {Event} event Event object
	 * @return {Object} This object will have x and y coordinates corresponding to the mouse position
	 */

	function getPointerPosition(el, event) {
	  var position = {};
	  var box = findElPosition(el);
	  var boxW = el.offsetWidth;
	  var boxH = el.offsetHeight;

	  var boxY = box.top;
	  var boxX = box.left;
	  var pageY = event.pageY;
	  var pageX = event.pageX;

	  if (event.changedTouches) {
	    pageX = event.changedTouches[0].pageX;
	    pageY = event.changedTouches[0].pageY;
	  }

	  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
	  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));

	  return position;
	}

	/**
	 * Determines, via duck typing, whether or not a value is a DOM element.
	 *
	 * @function isEl
	 * @param    {Mixed} value
	 * @return   {Boolean}
	 */

	function isEl(value) {
	  return !!value && typeof value === 'object' && value.nodeType === 1;
	}

	/**
	 * Determines, via duck typing, whether or not a value is a text node.
	 *
	 * @param  {Mixed} value
	 * @return {Boolean}
	 */

	function isTextNode(value) {
	  return !!value && typeof value === 'object' && value.nodeType === 3;
	}

	/**
	 * Empties the contents of an element.
	 *
	 * @function emptyEl
	 * @param    {Element} el
	 * @return   {Element}
	 */

	function emptyEl(el) {
	  while (el.firstChild) {
	    el.removeChild(el.firstChild);
	  }
	  return el;
	}

	/**
	 * Normalizes content for eventual insertion into the DOM.
	 *
	 * This allows a wide range of content definition methods, but protects
	 * from falling into the trap of simply writing to `innerHTML`, which is
	 * an XSS concern.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @function normalizeContent
	 * @param    {String|Element|TextNode|Array|Function} content
	 * @return   {Array}
	 */

	function normalizeContent(content) {

	  // First, invoke content if it is a function. If it produces an array,
	  // that needs to happen before normalization.
	  if (typeof content === 'function') {
	    content = content();
	  }

	  // Next up, normalize to an array, so one or many items can be normalized,
	  // filtered, and returned.
	  return (Array.isArray(content) ? content : [content]).map(function (value) {

	    // First, invoke value if it is a function to produce a new value,
	    // which will be subsequently normalized to a Node of some kind.
	    if (typeof value === 'function') {
	      value = value();
	    }

	    if (isEl(value) || isTextNode(value)) {
	      return value;
	    }

	    if (typeof value === 'string' && /\S/.test(value)) {
	      return _globalDocument2['default'].createTextNode(value);
	    }
	  }).filter(function (value) {
	    return value;
	  });
	}

	/**
	 * Normalizes and appends content to an element.
	 *
	 * @function appendContent
	 * @param    {Element} el
	 * @param    {String|Element|TextNode|Array|Function} content
	 *           See: `normalizeContent`
	 * @return   {Element}
	 */

	function appendContent(el, content) {
	  normalizeContent(content).forEach(function (node) {
	    return el.appendChild(node);
	  });
	  return el;
	}

	/**
	 * Normalizes and inserts content into an element; this is identical to
	 * `appendContent()`, except it empties the element first.
	 *
	 * @function insertContent
	 * @param    {Element} el
	 * @param    {String|Element|TextNode|Array|Function} content
	 *           See: `normalizeContent`
	 * @return   {Element}
	 */

	function insertContent(el, content) {
	  return appendContent(emptyEl(el), content);
	}

	/**
	 * Finds a single DOM element matching `selector` within the optional
	 * `context` of another DOM element (defaulting to `document`).
	 *
	 * @function $
	 * @param    {String} selector
	 *           A valid CSS selector, which will be passed to `querySelector`.
	 *
	 * @param    {Element|String} [context=document]
	 *           A DOM element within which to query. Can also be a selector
	 *           string in which case the first matching element will be used
	 *           as context. If missing (or no element matches selector), falls
	 *           back to `document`.
	 *
	 * @return   {Element|null}
	 */
	var $ = createQuerier('querySelector');

	exports.$ = $;
	/**
	 * Finds a all DOM elements matching `selector` within the optional
	 * `context` of another DOM element (defaulting to `document`).
	 *
	 * @function $$
	 * @param    {String} selector
	 *           A valid CSS selector, which will be passed to `querySelectorAll`.
	 *
	 * @param    {Element|String} [context=document]
	 *           A DOM element within which to query. Can also be a selector
	 *           string in which case the first matching element will be used
	 *           as context. If missing (or no element matches selector), falls
	 *           back to `document`.
	 *
	 * @return   {NodeList}
	 */
	var $$ = createQuerier('querySelectorAll');
	exports.$$ = $$;

	},{"./guid.js":146,"./log.js":147,"global/document":1,"global/window":2,"tsml":55}],143:[function(_dereq_,module,exports){
	/**
	 * @file events.js
	 *
	 * Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
	 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
	 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
	 * robust as jquery's, so there's probably some differences.
	 */

	'use strict';

	exports.__esModule = true;
	exports.on = on;
	exports.off = off;
	exports.trigger = trigger;
	exports.one = one;
	exports.fixEvent = fixEvent;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _domJs = _dereq_('./dom.js');

	var Dom = _interopRequireWildcard(_domJs);

	var _guidJs = _dereq_('./guid.js');

	var Guid = _interopRequireWildcard(_guidJs);

	var _logJs = _dereq_('./log.js');

	var _logJs2 = _interopRequireDefault(_logJs);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	/**
	 * Add an event listener to element
	 * It stores the handler function in a separate cache object
	 * and adds a generic handler to the element's event,
	 * along with a unique id (guid) to the element.
	 *
	 * @param  {Element|Object}   elem Element or object to bind listeners to
	 * @param  {String|Array}   type Type of event to bind to.
	 * @param  {Function} fn   Event listener.
	 * @method on
	 */

	function on(elem, type, fn) {
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(on, elem, type, fn);
	  }

	  var data = Dom.getElData(elem);

	  // We need a place to store all our handler data
	  if (!data.handlers) data.handlers = {};

	  if (!data.handlers[type]) data.handlers[type] = [];

	  if (!fn.guid) fn.guid = Guid.newGUID();

	  data.handlers[type].push(fn);

	  if (!data.dispatcher) {
	    data.disabled = false;

	    data.dispatcher = function (event, hash) {

	      if (data.disabled) return;
	      event = fixEvent(event);

	      var handlers = data.handlers[event.type];

	      if (handlers) {
	        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
	        var handlersCopy = handlers.slice(0);

	        for (var m = 0, n = handlersCopy.length; m < n; m++) {
	          if (event.isImmediatePropagationStopped()) {
	            break;
	          } else {
	            try {
	              handlersCopy[m].call(elem, event, hash);
	            } catch (e) {
	              _logJs2['default'].error(e);
	            }
	          }
	        }
	      }
	    };
	  }

	  if (data.handlers[type].length === 1) {
	    if (elem.addEventListener) {
	      elem.addEventListener(type, data.dispatcher, false);
	    } else if (elem.attachEvent) {
	      elem.attachEvent('on' + type, data.dispatcher);
	    }
	  }
	}

	/**
	 * Removes event listeners from an element
	 *
	 * @param  {Element|Object}   elem Object to remove listeners from
	 * @param  {String|Array=}   type Type of listener to remove. Don't include to remove all events from element.
	 * @param  {Function} fn   Specific listener to remove. Don't include to remove listeners for an event type.
	 * @method off
	 */

	function off(elem, type, fn) {
	  // Don't want to add a cache object through getElData if not needed
	  if (!Dom.hasElData(elem)) return;

	  var data = Dom.getElData(elem);

	  // If no events exist, nothing to unbind
	  if (!data.handlers) {
	    return;
	  }

	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(off, elem, type, fn);
	  }

	  // Utility function
	  var removeType = function removeType(t) {
	    data.handlers[t] = [];
	    _cleanUpEvents(elem, t);
	  };

	  // Are we removing all bound events?
	  if (!type) {
	    for (var t in data.handlers) {
	      removeType(t);
	    }return;
	  }

	  var handlers = data.handlers[type];

	  // If no handlers exist, nothing to unbind
	  if (!handlers) return;

	  // If no listener was provided, remove all listeners for type
	  if (!fn) {
	    removeType(type);
	    return;
	  }

	  // We're only removing a single handler
	  if (fn.guid) {
	    for (var n = 0; n < handlers.length; n++) {
	      if (handlers[n].guid === fn.guid) {
	        handlers.splice(n--, 1);
	      }
	    }
	  }

	  _cleanUpEvents(elem, type);
	}

	/**
	 * Trigger an event for an element
	 *
	 * @param  {Element|Object}      elem  Element to trigger an event on
	 * @param  {Event|Object|String} event A string (the type) or an event object with a type attribute
	 * @param  {Object} [hash] data hash to pass along with the event
	 * @return {Boolean=} Returned only if default was prevented
	 * @method trigger
	 */

	function trigger(elem, event, hash) {
	  // Fetches element data and a reference to the parent (for bubbling).
	  // Don't want to add a data object to cache for every parent,
	  // so checking hasElData first.
	  var elemData = Dom.hasElData(elem) ? Dom.getElData(elem) : {};
	  var parent = elem.parentNode || elem.ownerDocument;
	  // type = event.type || event,
	  // handler;

	  // If an event name was passed as a string, creates an event out of it
	  if (typeof event === 'string') {
	    event = { type: event, target: elem };
	  }
	  // Normalizes the event properties.
	  event = fixEvent(event);

	  // If the passed element has a dispatcher, executes the established handlers.
	  if (elemData.dispatcher) {
	    elemData.dispatcher.call(elem, event, hash);
	  }

	  // Unless explicitly stopped or the event does not bubble (e.g. media events)
	  // recursively calls this function to bubble the event up the DOM.
	  if (parent && !event.isPropagationStopped() && event.bubbles === true) {
	    trigger.call(null, parent, event, hash);

	    // If at the top of the DOM, triggers the default action unless disabled.
	  } else if (!parent && !event.defaultPrevented) {
	      var targetData = Dom.getElData(event.target);

	      // Checks if the target has a default action for this event.
	      if (event.target[event.type]) {
	        // Temporarily disables event dispatching on the target as we have already executed the handler.
	        targetData.disabled = true;
	        // Executes the default action.
	        if (typeof event.target[event.type] === 'function') {
	          event.target[event.type]();
	        }
	        // Re-enables event dispatching.
	        targetData.disabled = false;
	      }
	    }

	  // Inform the triggerer if the default was prevented by returning false
	  return !event.defaultPrevented;
	}

	/**
	 * Trigger a listener only once for an event
	 *
	 * @param  {Element|Object}   elem Element or object to
	 * @param  {String|Array}   type Name/type of event
	 * @param  {Function} fn Event handler function
	 * @method one
	 */

	function one(elem, type, fn) {
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(one, elem, type, fn);
	  }
	  var func = function func() {
	    off(elem, type, func);
	    fn.apply(this, arguments);
	  };
	  // copy the guid to the new function so it can removed using the original function's ID
	  func.guid = fn.guid = fn.guid || Guid.newGUID();
	  on(elem, type, func);
	}

	/**
	 * Fix a native event to have standard property values
	 *
	 * @param  {Object} event Event object to fix
	 * @return {Object}
	 * @private
	 * @method fixEvent
	 */

	function fixEvent(event) {

	  function returnTrue() {
	    return true;
	  }
	  function returnFalse() {
	    return false;
	  }

	  // Test if fixing up is needed
	  // Used to check if !event.stopPropagation instead of isPropagationStopped
	  // But native events return true for stopPropagation, but don't have
	  // other expected methods like isPropagationStopped. Seems to be a problem
	  // with the Javascript Ninja code. So we're just overriding all events now.
	  if (!event || !event.isPropagationStopped) {
	    var old = event || _globalWindow2['default'].event;

	    event = {};
	    // Clone the old object so that we can modify the values event = {};
	    // IE8 Doesn't like when you mess with native event properties
	    // Firefox returns false for event.hasOwnProperty('type') and other props
	    //  which makes copying more difficult.
	    // TODO: Probably best to create a whitelist of event props
	    for (var key in old) {
	      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
	      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
	      // and webkitMovementX/Y
	      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
	        // Chrome 32+ warns if you try to copy deprecated returnValue, but
	        // we still want to if preventDefault isn't supported (IE8).
	        if (!(key === 'returnValue' && old.preventDefault)) {
	          event[key] = old[key];
	        }
	      }
	    }

	    // The event occurred on this element
	    if (!event.target) {
	      event.target = event.srcElement || _globalDocument2['default'];
	    }

	    // Handle which other element the event is related to
	    if (!event.relatedTarget) {
	      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
	    }

	    // Stop the default browser action
	    event.preventDefault = function () {
	      if (old.preventDefault) {
	        old.preventDefault();
	      }
	      event.returnValue = false;
	      old.returnValue = false;
	      event.defaultPrevented = true;
	    };

	    event.defaultPrevented = false;

	    // Stop the event from bubbling
	    event.stopPropagation = function () {
	      if (old.stopPropagation) {
	        old.stopPropagation();
	      }
	      event.cancelBubble = true;
	      old.cancelBubble = true;
	      event.isPropagationStopped = returnTrue;
	    };

	    event.isPropagationStopped = returnFalse;

	    // Stop the event from bubbling and executing other handlers
	    event.stopImmediatePropagation = function () {
	      if (old.stopImmediatePropagation) {
	        old.stopImmediatePropagation();
	      }
	      event.isImmediatePropagationStopped = returnTrue;
	      event.stopPropagation();
	    };

	    event.isImmediatePropagationStopped = returnFalse;

	    // Handle mouse position
	    if (event.clientX != null) {
	      var doc = _globalDocument2['default'].documentElement,
	          body = _globalDocument2['default'].body;

	      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	    }

	    // Handle key presses
	    event.which = event.charCode || event.keyCode;

	    // Fix button for mouse clicks:
	    // 0 == left; 1 == middle; 2 == right
	    if (event.button != null) {
	      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
	    }
	  }

	  // Returns fixed-up instance
	  return event;
	}

	/**
	 * Clean up the listener cache and dispatchers
	*
	 * @param  {Element|Object} elem Element to clean up
	 * @param  {String} type Type of event to clean up
	 * @private
	 * @method _cleanUpEvents
	 */
	function _cleanUpEvents(elem, type) {
	  var data = Dom.getElData(elem);

	  // Remove the events of a particular type if there are none left
	  if (data.handlers[type].length === 0) {
	    delete data.handlers[type];
	    // data.handlers[type] = null;
	    // Setting to null was causing an error with data.handlers

	    // Remove the meta-handler from the element
	    if (elem.removeEventListener) {
	      elem.removeEventListener(type, data.dispatcher, false);
	    } else if (elem.detachEvent) {
	      elem.detachEvent('on' + type, data.dispatcher);
	    }
	  }

	  // Remove the events object if there are no types left
	  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
	    delete data.handlers;
	    delete data.dispatcher;
	    delete data.disabled;
	  }

	  // Finally remove the element data if there is no data left
	  if (Object.getOwnPropertyNames(data).length === 0) {
	    Dom.removeElData(elem);
	  }
	}

	/**
	 * Loops through an array of event types and calls the requested method for each type.
	 *
	 * @param  {Function} fn   The event method we want to use.
	 * @param  {Element|Object} elem Element or object to bind listeners to
	 * @param  {String}   type Type of event to bind to.
	 * @param  {Function} callback   Event listener.
	 * @private
	 * @function _handleMultipleEvents
	 */
	function _handleMultipleEvents(fn, elem, types, callback) {
	  types.forEach(function (type) {
	    //Call the event method for each one of the types
	    fn(elem, type, callback);
	  });
	}

	},{"./dom.js":142,"./guid.js":146,"./log.js":147,"global/document":1,"global/window":2}],144:[function(_dereq_,module,exports){
	/**
	 * @file fn.js
	 */
	'use strict';

	exports.__esModule = true;

	var _guidJs = _dereq_('./guid.js');

	/**
	 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
	 * It also stores a unique id on the function so it can be easily removed from events
	 *
	 * @param  {*}   context The object to bind as scope
	 * @param  {Function} fn      The function to be bound to a scope
	 * @param  {Number=}   uid     An optional unique ID for the function to be set
	 * @return {Function}
	 * @private
	 * @method bind
	 */
	var bind = function bind(context, fn, uid) {
	  // Make sure the function has a unique ID
	  if (!fn.guid) {
	    fn.guid = _guidJs.newGUID();
	  }

	  // Create the new function that changes the context
	  var ret = function ret() {
	    return fn.apply(context, arguments);
	  };

	  // Allow for the ability to individualize this function
	  // Needed in the case where multiple objects might share the same prototype
	  // IF both items add an event listener with the same function, then you try to remove just one
	  // it will remove both because they both have the same guid.
	  // when using this, you need to use the bind method when you remove the listener as well.
	  // currently used in text tracks
	  ret.guid = uid ? uid + '_' + fn.guid : fn.guid;

	  return ret;
	};
	exports.bind = bind;

	},{"./guid.js":146}],145:[function(_dereq_,module,exports){
	/**
	 * @file format-time.js
	 *
	 * Format seconds as a time string, H:MM:SS or M:SS
	 * Supplying a guide (in seconds) will force a number of leading zeros
	 * to cover the length of the guide
	 *
	 * @param  {Number} seconds Number of seconds to be turned into a string
	 * @param  {Number} guide   Number (in seconds) to model the string after
	 * @return {String}         Time formatted as H:MM:SS or M:SS
	 * @private
	 * @function formatTime
	 */
	'use strict';

	exports.__esModule = true;
	function formatTime(seconds) {
	  var guide = arguments.length <= 1 || arguments[1] === undefined ? seconds : arguments[1];
	  return (function () {
	    seconds = seconds < 0 ? 0 : seconds;
	    var s = Math.floor(seconds % 60);
	    var m = Math.floor(seconds / 60 % 60);
	    var h = Math.floor(seconds / 3600);
	    var gm = Math.floor(guide / 60 % 60);
	    var gh = Math.floor(guide / 3600);

	    // handle invalid times
	    if (isNaN(seconds) || seconds === Infinity) {
	      // '-' is false for all relational operators (e.g. <, >=) so this setting
	      // will add the minimum number of fields specified by the guide
	      h = m = s = '-';
	    }

	    // Check if we need to show hours
	    h = h > 0 || gh > 0 ? h + ':' : '';

	    // If hours are showing, we may need to add a leading zero.
	    // Always show at least one digit of minutes.
	    m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

	    // Check if leading zero is need for seconds
	    s = s < 10 ? '0' + s : s;

	    return h + m + s;
	  })();
	}

	exports['default'] = formatTime;
	module.exports = exports['default'];

	},{}],146:[function(_dereq_,module,exports){
	/**
	 * @file guid.js
	 *
	 * Unique ID for an element or function
	 * @type {Number}
	 * @private
	 */
	"use strict";

	exports.__esModule = true;
	exports.newGUID = newGUID;
	var _guid = 1;

	/**
	 * Get the next unique ID
	 *
	 * @return {String} 
	 * @function newGUID
	 */

	function newGUID() {
	  return _guid++;
	}

	},{}],147:[function(_dereq_,module,exports){
	/**
	 * @file log.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _browser = _dereq_('./browser');

	/**
	 * Log messages to the console and history based on the type of message
	 *
	 * @param  {String} type
	 *         The name of the console method to use.
	 * @param  {Array} args
	 *         The arguments to be passed to the matching console method.
	 * @param  {Boolean} [stringify]
	 *         By default, only old IEs should get console argument stringification,
	 *         but this is exposed as a parameter to facilitate testing.
	 */
	var logByType = function logByType(type, args) {
	  var stringify = arguments.length <= 2 || arguments[2] === undefined ? !!_browser.IE_VERSION && _browser.IE_VERSION < 11 : arguments[2];

	  var console = _globalWindow2['default'].console;

	  // If there's no console then don't try to output messages, but they will
	  // still be stored in `log.history`.
	  //
	  // Was setting these once outside of this function, but containing them
	  // in the function makes it easier to test cases where console doesn't exist
	  // when the module is executed.
	  var fn = console && console[type] || function () {};

	  if (type !== 'log') {

	    // add the type to the front of the message when it's not "log"
	    args.unshift(type.toUpperCase() + ':');
	  }

	  // add to history
	  log.history.push(args);

	  // add console prefix after adding to history
	  args.unshift('VIDEOJS:');

	  // IEs previous to 11 log objects uselessly as "[object Object]"; so, JSONify
	  // objects and arrays for those less-capable browsers.
	  if (stringify) {
	    args = args.map(function (a) {
	      if (a && typeof a === 'object' || Array.isArray(a)) {
	        try {
	          return JSON.stringify(a);
	        } catch (x) {}
	      }

	      // Cast to string before joining, so we get null and undefined explicitly
	      // included in output (as we would in a modern console).
	      return String(a);
	    }).join(' ');
	  }

	  // Old IE versions do not allow .apply() for console methods (they are
	  // reported as objects rather than functions).
	  if (!fn.apply) {
	    fn(args);
	  } else {
	    fn[Array.isArray(args) ? 'apply' : 'call'](console, args);
	  }
	};

	exports.logByType = logByType;
	/**
	 * Log plain debug messages
	 *
	 * @function log
	 */
	function log() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  logByType('log', args);
	}

	/**
	 * Keep a history of log messages
	 *
	 * @type {Array}
	 */
	log.history = [];

	/**
	 * Log error messages
	 *
	 * @method error
	 */
	log.error = function () {
	  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }

	  return logByType('error', args);
	};

	/**
	 * Log warning messages
	 *
	 * @method warn
	 */
	log.warn = function () {
	  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }

	  return logByType('warn', args);
	};

	exports['default'] = log;

	},{"./browser":140,"global/window":2}],148:[function(_dereq_,module,exports){
	/**
	 * @file merge-options.js
	 */
	'use strict';

	exports.__esModule = true;
	exports['default'] = mergeOptions;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _lodashCompatObjectMerge = _dereq_('lodash-compat/object/merge');

	var _lodashCompatObjectMerge2 = _interopRequireDefault(_lodashCompatObjectMerge);

	function isPlain(obj) {
	  return !!obj && typeof obj === 'object' && obj.toString() === '[object Object]' && obj.constructor === Object;
	}

	/**
	 * Merge customizer. video.js simply overwrites non-simple objects
	 * (like arrays) instead of attempting to overlay them.
	 * @see https://lodash.com/docs#merge
	 */
	var customizer = function customizer(destination, source) {
	  // If we're not working with a plain object, copy the value as is
	  // If source is an array, for instance, it will replace destination
	  if (!isPlain(source)) {
	    return source;
	  }

	  // If the new value is a plain object but the first object value is not
	  // we need to create a new object for the first object to merge with.
	  // This makes it consistent with how merge() works by default
	  // and also protects from later changes the to first object affecting
	  // the second object's values.
	  if (!isPlain(destination)) {
	    return mergeOptions(source);
	  }
	};

	/**
	 * Merge one or more options objects, recursively merging **only**
	 * plain object properties.  Previously `deepMerge`.
	 *
	 * @param  {...Object} source One or more objects to merge
	 * @returns {Object}          a new object that is the union of all
	 * provided objects
	 * @function mergeOptions
	 */

	function mergeOptions() {
	  // contruct the call dynamically to handle the variable number of
	  // objects to merge
	  var args = Array.prototype.slice.call(arguments);

	  // unshift an empty object into the front of the call as the target
	  // of the merge
	  args.unshift({});

	  // customize conflict resolution to match our historical merge behavior
	  args.push(customizer);

	  _lodashCompatObjectMerge2['default'].apply(null, args);

	  // return the mutated result object
	  return args[0];
	}

	module.exports = exports['default'];

	},{"lodash-compat/object/merge":40}],149:[function(_dereq_,module,exports){
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var createStyleElement = function createStyleElement(className) {
	  var style = _globalDocument2['default'].createElement('style');
	  style.className = className;

	  return style;
	};

	exports.createStyleElement = createStyleElement;
	var setTextContent = function setTextContent(el, content) {
	  if (el.styleSheet) {
	    el.styleSheet.cssText = content;
	  } else {
	    el.textContent = content;
	  }
	};
	exports.setTextContent = setTextContent;

	},{"global/document":1}],150:[function(_dereq_,module,exports){
	'use strict';

	exports.__esModule = true;
	exports.createTimeRanges = createTimeRanges;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _logJs = _dereq_('./log.js');

	var _logJs2 = _interopRequireDefault(_logJs);

	/**
	 * @file time-ranges.js
	 *
	 * Should create a fake TimeRange object
	 * Mimics an HTML5 time range instance, which has functions that
	 * return the start and end times for a range
	 * TimeRanges are returned by the buffered() method
	 *
	 * @param  {(Number|Array)} Start of a single range or an array of ranges
	 * @param  {Number} End of a single range
	 * @private
	 * @method createTimeRanges
	 */

	function createTimeRanges(start, end) {
	  if (Array.isArray(start)) {
	    return createTimeRangesObj(start);
	  } else if (start === undefined || end === undefined) {
	    return createTimeRangesObj();
	  }
	  return createTimeRangesObj([[start, end]]);
	}

	exports.createTimeRange = createTimeRanges;

	function createTimeRangesObj(ranges) {
	  if (ranges === undefined || ranges.length === 0) {
	    return {
	      length: 0,
	      start: function start() {
	        throw new Error('This TimeRanges object is empty');
	      },
	      end: function end() {
	        throw new Error('This TimeRanges object is empty');
	      }
	    };
	  }
	  return {
	    length: ranges.length,
	    start: getRange.bind(null, 'start', 0, ranges),
	    end: getRange.bind(null, 'end', 1, ranges)
	  };
	}

	function getRange(fnName, valueIndex, ranges, rangeIndex) {
	  if (rangeIndex === undefined) {
	    _logJs2['default'].warn('DEPRECATED: Function \'' + fnName + '\' on \'TimeRanges\' called without an index argument.');
	    rangeIndex = 0;
	  }
	  rangeCheck(fnName, rangeIndex, ranges.length - 1);
	  return ranges[rangeIndex][valueIndex];
	}

	function rangeCheck(fnName, index, maxIndex) {
	  if (index < 0 || index > maxIndex) {
	    throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is greater than or equal to the maximum bound (' + maxIndex + ').');
	  }
	}

	},{"./log.js":147}],151:[function(_dereq_,module,exports){
	/**
	 * @file to-title-case.js
	 *
	 * Uppercase the first letter of a string
	 *
	 * @param  {String} string String to be uppercased
	 * @return {String}
	 * @private
	 * @method toTitleCase
	 */
	"use strict";

	exports.__esModule = true;
	function toTitleCase(string) {
	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	exports["default"] = toTitleCase;
	module.exports = exports["default"];

	},{}],152:[function(_dereq_,module,exports){
	/**
	 * @file url.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	/**
	 * Resolve and parse the elements of a URL
	 *
	 * @param  {String} url The url to parse
	 * @return {Object}     An object of url details
	 * @method parseUrl
	 */
	var parseUrl = function parseUrl(url) {
	  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

	  // add the url to an anchor and let the browser parse the URL
	  var a = _globalDocument2['default'].createElement('a');
	  a.href = url;

	  // IE8 (and 9?) Fix
	  // ie8 doesn't parse the URL correctly until the anchor is actually
	  // added to the body, and an innerHTML is needed to trigger the parsing
	  var addToBody = a.host === '' && a.protocol !== 'file:';
	  var div = undefined;
	  if (addToBody) {
	    div = _globalDocument2['default'].createElement('div');
	    div.innerHTML = '<a href="' + url + '"></a>';
	    a = div.firstChild;
	    // prevent the div from affecting layout
	    div.setAttribute('style', 'display:none; position:absolute;');
	    _globalDocument2['default'].body.appendChild(div);
	  }

	  // Copy the specific URL properties to a new object
	  // This is also needed for IE8 because the anchor loses its
	  // properties when it's removed from the dom
	  var details = {};
	  for (var i = 0; i < props.length; i++) {
	    details[props[i]] = a[props[i]];
	  }

	  // IE9 adds the port to the host property unlike everyone else. If
	  // a port identifier is added for standard ports, strip it.
	  if (details.protocol === 'http:') {
	    details.host = details.host.replace(/:80$/, '');
	  }
	  if (details.protocol === 'https:') {
	    details.host = details.host.replace(/:443$/, '');
	  }

	  if (addToBody) {
	    _globalDocument2['default'].body.removeChild(div);
	  }

	  return details;
	};

	exports.parseUrl = parseUrl;
	/**
	 * Get absolute version of relative URL. Used to tell flash correct URL.
	 * http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
	 *
	 * @param  {String} url URL to make absolute
	 * @return {String}     Absolute URL
	 * @private
	 * @method getAbsoluteURL
	 */
	var getAbsoluteURL = function getAbsoluteURL(url) {
	  // Check if absolute URL
	  if (!url.match(/^https?:\/\//)) {
	    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
	    var div = _globalDocument2['default'].createElement('div');
	    div.innerHTML = '<a href="' + url + '">x</a>';
	    url = div.firstChild.href;
	  }

	  return url;
	};

	exports.getAbsoluteURL = getAbsoluteURL;
	/**
	 * Returns the extension of the passed file name. It will return an empty string if you pass an invalid path
	 *
	 * @param {String}    path    The fileName path like '/path/to/file.mp4'
	 * @returns {String}          The extension in lower case or an empty string if no extension could be found.
	 * @method getFileExtension
	 */
	var getFileExtension = function getFileExtension(path) {
	  if (typeof path === 'string') {
	    var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
	    var pathParts = splitPathRe.exec(path);

	    if (pathParts) {
	      return pathParts.pop().toLowerCase();
	    }
	  }

	  return '';
	};

	exports.getFileExtension = getFileExtension;
	/**
	 * Returns whether the url passed is a cross domain request or not.
	 *
	 * @param {String} url The url to check
	 * @return {Boolean}   Whether it is a cross domain request or not
	 * @method isCrossOrigin
	 */
	var isCrossOrigin = function isCrossOrigin(url) {
	  var winLoc = _globalWindow2['default'].location;
	  var urlInfo = parseUrl(url);

	  // IE8 protocol relative urls will return ':' for protocol
	  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;

	  // Check if url is for another domain/origin
	  // IE8 doesn't know location.origin, so we won't rely on it here
	  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;

	  return crossOrigin;
	};
	exports.isCrossOrigin = isCrossOrigin;

	},{"global/document":1,"global/window":2}],153:[function(_dereq_,module,exports){
	/**
	 * @file video.js
	 */
	'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _globalWindow = _dereq_('global/window');

	var _globalWindow2 = _interopRequireDefault(_globalWindow);

	var _globalDocument = _dereq_('global/document');

	var _globalDocument2 = _interopRequireDefault(_globalDocument);

	var _setup = _dereq_('./setup');

	var setup = _interopRequireWildcard(_setup);

	var _utilsStylesheetJs = _dereq_('./utils/stylesheet.js');

	var stylesheet = _interopRequireWildcard(_utilsStylesheetJs);

	var _component = _dereq_('./component');

	var _component2 = _interopRequireDefault(_component);

	var _eventTarget = _dereq_('./event-target');

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	var _utilsEventsJs = _dereq_('./utils/events.js');

	var Events = _interopRequireWildcard(_utilsEventsJs);

	var _player = _dereq_('./player');

	var _player2 = _interopRequireDefault(_player);

	var _pluginsJs = _dereq_('./plugins.js');

	var _pluginsJs2 = _interopRequireDefault(_pluginsJs);

	var _srcJsUtilsMergeOptionsJs = _dereq_('../../src/js/utils/merge-options.js');

	var _srcJsUtilsMergeOptionsJs2 = _interopRequireDefault(_srcJsUtilsMergeOptionsJs);

	var _utilsFnJs = _dereq_('./utils/fn.js');

	var Fn = _interopRequireWildcard(_utilsFnJs);

	var _tracksTextTrackJs = _dereq_('./tracks/text-track.js');

	var _tracksTextTrackJs2 = _interopRequireDefault(_tracksTextTrackJs);

	var _tracksAudioTrackJs = _dereq_('./tracks/audio-track.js');

	var _tracksAudioTrackJs2 = _interopRequireDefault(_tracksAudioTrackJs);

	var _tracksVideoTrackJs = _dereq_('./tracks/video-track.js');

	var _tracksVideoTrackJs2 = _interopRequireDefault(_tracksVideoTrackJs);

	var _utilsTimeRangesJs = _dereq_('./utils/time-ranges.js');

	var _utilsFormatTimeJs = _dereq_('./utils/format-time.js');

	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

	var _utilsLogJs = _dereq_('./utils/log.js');

	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

	var _utilsDomJs = _dereq_('./utils/dom.js');

	var Dom = _interopRequireWildcard(_utilsDomJs);

	var _utilsBrowserJs = _dereq_('./utils/browser.js');

	var browser = _interopRequireWildcard(_utilsBrowserJs);

	var _utilsUrlJs = _dereq_('./utils/url.js');

	var Url = _interopRequireWildcard(_utilsUrlJs);

	var _extendJs = _dereq_('./extend.js');

	var _extendJs2 = _interopRequireDefault(_extendJs);

	var _lodashCompatObjectMerge = _dereq_('lodash-compat/object/merge');

	var _lodashCompatObjectMerge2 = _interopRequireDefault(_lodashCompatObjectMerge);

	var _xhr = _dereq_('xhr');

	var _xhr2 = _interopRequireDefault(_xhr);

	// Include the built-in techs

	var _techTechJs = _dereq_('./tech/tech.js');

	var _techTechJs2 = _interopRequireDefault(_techTechJs);

	var _techHtml5Js = _dereq_('./tech/html5.js');

	var _techHtml5Js2 = _interopRequireDefault(_techHtml5Js);

	var _techFlashJs = _dereq_('./tech/flash.js');

	var _techFlashJs2 = _interopRequireDefault(_techFlashJs);

	// HTML5 Element Shim for IE8
	if (typeof HTMLVideoElement === 'undefined') {
	  _globalDocument2['default'].createElement('video');
	  _globalDocument2['default'].createElement('audio');
	  _globalDocument2['default'].createElement('track');
	}

	/**
	 * Doubles as the main function for users to create a player instance and also
	 * the main library object.
	 * The `videojs` function can be used to initialize or retrieve a player.
	 * ```js
	 *     var myPlayer = videojs('my_video_id');
	 * ```
	 *
	 * @param  {String|Element} id      Video element or video element ID
	 * @param  {Object=} options        Optional options object for config/settings
	 * @param  {Function=} ready        Optional ready callback
	 * @return {Player}                 A player instance
	 * @mixes videojs
	 * @method videojs
	 */
	function videojs(id, options, ready) {
	  var tag = undefined; // Element of ID

	  // Allow for element or ID to be passed in
	  // String ID
	  if (typeof id === 'string') {

	    // Adjust for jQuery ID syntax
	    if (id.indexOf('#') === 0) {
	      id = id.slice(1);
	    }

	    // If a player instance has already been created for this ID return it.
	    if (videojs.getPlayers()[id]) {

	      // If options or ready funtion are passed, warn
	      if (options) {
	        _utilsLogJs2['default'].warn('Player "' + id + '" is already initialised. Options will not be applied.');
	      }

	      if (ready) {
	        videojs.getPlayers()[id].ready(ready);
	      }

	      return videojs.getPlayers()[id];

	      // Otherwise get element for ID
	    } else {
	        tag = Dom.getEl(id);
	      }

	    // ID is a media element
	  } else {
	      tag = id;
	    }

	  // Check for a useable element
	  if (!tag || !tag.nodeName) {
	    // re: nodeName, could be a box div also
	    throw new TypeError('The element or ID supplied is not valid. (videojs)'); // Returns
	  }

	  // Element may have a player attr referring to an already created player instance.
	  // If not, set up a new player and return the instance.
	  return tag['player'] || _player2['default'].players[tag.playerId] || new _player2['default'](tag, options, ready);
	}

	// Add default styles
	if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
	  var style = Dom.$('.vjs-styles-defaults');

	  if (!style) {
	    style = stylesheet.createStyleElement('vjs-styles-defaults');
	    var head = Dom.$('head');
	    head.insertBefore(style, head.firstChild);
	    stylesheet.setTextContent(style, '\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ');
	  }
	}

	// Run Auto-load players
	// You have to wait at least once in case this script is loaded after your video in the DOM (weird behavior only with minified version)
	setup.autoSetupTimeout(1, videojs);

	/*
	 * Current software version (semver)
	 *
	 * @type {String}
	 */
	videojs.VERSION = '5.11.6';

	/**
	 * The global options object. These are the settings that take effect
	 * if no overrides are specified when the player is created.
	 *
	 * ```js
	 *     videojs.options.autoplay = true
	 *     // -> all players will autoplay by default
	 * ```
	 *
	 * @type {Object}
	 */
	videojs.options = _player2['default'].prototype.options_;

	/**
	 * Get an object with the currently created players, keyed by player ID
	 *
	 * @return {Object} The created players
	 * @mixes videojs
	 * @method getPlayers
	 */
	videojs.getPlayers = function () {
	  return _player2['default'].players;
	};

	/**
	 * Expose players object.
	 *
	 * @memberOf videojs
	 * @property {Object} players
	 */
	videojs.players = _player2['default'].players;

	/**
	 * Get a component class object by name
	 * ```js
	 *     var VjsButton = videojs.getComponent('Button');
	 *     // Create a new instance of the component
	 *     var myButton = new VjsButton(myPlayer);
	 * ```
	 *
	 * @return {Component} Component identified by name
	 * @mixes videojs
	 * @method getComponent
	 */
	videojs.getComponent = _component2['default'].getComponent;

	/**
	 * Register a component so it can referred to by name
	 * Used when adding to other
	 * components, either through addChild
	 * `component.addChild('myComponent')`
	 * or through default children options
	 * `{ children: ['myComponent'] }`.
	 * ```js
	 *     // Get a component to subclass
	 *     var VjsButton = videojs.getComponent('Button');
	 *     // Subclass the component (see 'extend' doc for more info)
	 *     var MySpecialButton = videojs.extend(VjsButton, {});
	 *     // Register the new component
	 *     VjsButton.registerComponent('MySepcialButton', MySepcialButton);
	 *     // (optionally) add the new component as a default player child
	 *     myPlayer.addChild('MySepcialButton');
	 * ```
	 * NOTE: You could also just initialize the component before adding.
	 * `component.addChild(new MyComponent());`
	 *
	 * @param {String} The class name of the component
	 * @param {Component} The component class
	 * @return {Component} The newly registered component
	 * @mixes videojs
	 * @method registerComponent
	 */
	videojs.registerComponent = function (name, comp) {
	  if (_techTechJs2['default'].isTech(comp)) {
	    _utilsLogJs2['default'].warn('The ' + name + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
	  }

	  _component2['default'].registerComponent.call(_component2['default'], name, comp);
	};

	/**
	 * Get a Tech class object by name
	 * ```js
	 *     var Html5 = videojs.getTech('Html5');
	 *     // Create a new instance of the component
	 *     var html5 = new Html5(options);
	 * ```
	 *
	 * @return {Tech} Tech identified by name
	 * @mixes videojs
	 * @method getComponent
	 */
	videojs.getTech = _techTechJs2['default'].getTech;

	/**
	 * Register a Tech so it can referred to by name.
	 * This is used in the tech order for the player.
	 *
	 * ```js
	 *     // get the Html5 Tech
	 *     var Html5 = videojs.getTech('Html5');
	 *     var MyTech = videojs.extend(Html5, {});
	 *     // Register the new Tech
	 *     VjsButton.registerTech('Tech', MyTech);
	 *     var player = videojs('myplayer', {
	 *       techOrder: ['myTech', 'html5']
	 *     });
	 * ```
	 *
	 * @param {String} The class name of the tech
	 * @param {Tech} The tech class
	 * @return {Tech} The newly registered Tech
	 * @mixes videojs
	 * @method registerTech
	 */
	videojs.registerTech = _techTechJs2['default'].registerTech;

	/**
	 * A suite of browser and device tests
	 *
	 * @type {Object}
	 * @private
	 */
	videojs.browser = browser;

	/**
	 * Whether or not the browser supports touch events. Included for backward
	 * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
	 * instead going forward.
	 *
	 * @deprecated
	 * @type {Boolean}
	 */
	videojs.TOUCH_ENABLED = browser.TOUCH_ENABLED;

	/**
	 * Subclass an existing class
	 * Mimics ES6 subclassing with the `extend` keyword
	 * ```js
	 *     // Create a basic javascript 'class'
	 *     function MyClass(name){
	 *       // Set a property at initialization
	 *       this.myName = name;
	 *     }
	 *     // Create an instance method
	 *     MyClass.prototype.sayMyName = function(){
	 *       alert(this.myName);
	 *     };
	 *     // Subclass the exisitng class and change the name
	 *     // when initializing
	 *     var MySubClass = videojs.extend(MyClass, {
	 *       constructor: function(name) {
	 *         // Call the super class constructor for the subclass
	 *         MyClass.call(this, name)
	 *       }
	 *     });
	 *     // Create an instance of the new sub class
	 *     var myInstance = new MySubClass('John');
	 *     myInstance.sayMyName(); // -> should alert "John"
	 * ```
	 *
	 * @param {Function} The Class to subclass
	 * @param {Object} An object including instace methods for the new class
	 *                   Optionally including a `constructor` function
	 * @return {Function} The newly created subclass
	 * @mixes videojs
	 * @method extend
	 */
	videojs.extend = _extendJs2['default'];

	/**
	 * Merge two options objects recursively
	 * Performs a deep merge like lodash.merge but **only merges plain objects**
	 * (not arrays, elements, anything else)
	 * Other values will be copied directly from the second object.
	 * ```js
	 *     var defaultOptions = {
	 *       foo: true,
	 *       bar: {
	 *         a: true,
	 *         b: [1,2,3]
	 *       }
	 *     };
	 *     var newOptions = {
	 *       foo: false,
	 *       bar: {
	 *         b: [4,5,6]
	 *       }
	 *     };
	 *     var result = videojs.mergeOptions(defaultOptions, newOptions);
	 *     // result.foo = false;
	 *     // result.bar.a = true;
	 *     // result.bar.b = [4,5,6];
	 * ```
	 *
	 * @param {Object} defaults  The options object whose values will be overriden
	 * @param {Object} overrides The options object with values to override the first
	 * @param {Object} etc       Any number of additional options objects
	 *
	 * @return {Object} a new object with the merged values
	 * @mixes videojs
	 * @method mergeOptions
	 */
	videojs.mergeOptions = _srcJsUtilsMergeOptionsJs2['default'];

	/**
	 * Change the context (this) of a function
	 *
	 *     videojs.bind(newContext, function(){
	 *       this === newContext
	 *     });
	 *
	 * NOTE: as of v5.0 we require an ES5 shim, so you should use the native
	 * `function(){}.bind(newContext);` instead of this.
	 *
	 * @param  {*}        context The object to bind as scope
	 * @param  {Function} fn      The function to be bound to a scope
	 * @param  {Number=}  uid     An optional unique ID for the function to be set
	 * @return {Function}
	 */
	videojs.bind = Fn.bind;

	/**
	 * Create a Video.js player plugin
	 * Plugins are only initialized when options for the plugin are included
	 * in the player options, or the plugin function on the player instance is
	 * called.
	 * **See the plugin guide in the docs for a more detailed example**
	 * ```js
	 *     // Make a plugin that alerts when the player plays
	 *     videojs.plugin('myPlugin', function(myPluginOptions) {
	 *       myPluginOptions = myPluginOptions || {};
	 *
	 *       var player = this;
	 *       var alertText = myPluginOptions.text || 'Player is playing!'
	 *
	 *       player.on('play', function(){
	 *         alert(alertText);
	 *       });
	 *     });
	 *     // USAGE EXAMPLES
	 *     // EXAMPLE 1: New player with plugin options, call plugin immediately
	 *     var player1 = videojs('idOne', {
	 *       myPlugin: {
	 *         text: 'Custom text!'
	 *       }
	 *     });
	 *     // Click play
	 *     // --> Should alert 'Custom text!'
	 *     // EXAMPLE 3: New player, initialize plugin later
	 *     var player3 = videojs('idThree');
	 *     // Click play
	 *     // --> NO ALERT
	 *     // Click pause
	 *     // Initialize plugin using the plugin function on the player instance
	 *     player3.myPlugin({
	 *       text: 'Plugin added later!'
	 *     });
	 *     // Click play
	 *     // --> Should alert 'Plugin added later!'
	 * ```
	 *
	 * @param {String} name The plugin name
	 * @param {Function} fn The plugin function that will be called with options
	 * @mixes videojs
	 * @method plugin
	 */
	videojs.plugin = _pluginsJs2['default'];

	/**
	 * Adding languages so that they're available to all players.
	 * ```js
	 *     videojs.addLanguage('es', { 'Hello': 'Hola' });
	 * ```
	 *
	 * @param  {String} code The language code or dictionary property
	 * @param  {Object} data The data values to be translated
	 * @return {Object} The resulting language dictionary object
	 * @mixes videojs
	 * @method addLanguage
	 */
	videojs.addLanguage = function (code, data) {
	  var _merge;

	  code = ('' + code).toLowerCase();
	  return _lodashCompatObjectMerge2['default'](videojs.options.languages, (_merge = {}, _merge[code] = data, _merge))[code];
	};

	/**
	 * Log debug messages.
	 *
	 * @param {...Object} messages One or more messages to log
	 */
	videojs.log = _utilsLogJs2['default'];

	/**
	 * Creates an emulated TimeRange object.
	 *
	 * @param  {Number|Array} start Start time in seconds or an array of ranges
	 * @param  {Number} end   End time in seconds
	 * @return {Object}       Fake TimeRange object
	 * @method createTimeRange
	 */
	videojs.createTimeRange = videojs.createTimeRanges = _utilsTimeRangesJs.createTimeRanges;

	/**
	 * Format seconds as a time string, H:MM:SS or M:SS
	 * Supplying a guide (in seconds) will force a number of leading zeros
	 * to cover the length of the guide
	 *
	 * @param  {Number} seconds Number of seconds to be turned into a string
	 * @param  {Number} guide   Number (in seconds) to model the string after
	 * @return {String}         Time formatted as H:MM:SS or M:SS
	 * @method formatTime
	 */
	videojs.formatTime = _utilsFormatTimeJs2['default'];

	/**
	 * Resolve and parse the elements of a URL
	 *
	 * @param  {String} url The url to parse
	 * @return {Object}     An object of url details
	 * @method parseUrl
	 */
	videojs.parseUrl = Url.parseUrl;

	/**
	 * Returns whether the url passed is a cross domain request or not.
	 *
	 * @param {String} url The url to check
	 * @return {Boolean}   Whether it is a cross domain request or not
	 * @method isCrossOrigin
	 */
	videojs.isCrossOrigin = Url.isCrossOrigin;

	/**
	 * Event target class.
	 *
	 * @type {Function}
	 */
	videojs.EventTarget = _eventTarget2['default'];

	/**
	 * Add an event listener to element
	 * It stores the handler function in a separate cache object
	 * and adds a generic handler to the element's event,
	 * along with a unique id (guid) to the element.
	 *
	 * @param  {Element|Object}   elem Element or object to bind listeners to
	 * @param  {String|Array}   type Type of event to bind to.
	 * @param  {Function} fn   Event listener.
	 * @method on
	 */
	videojs.on = Events.on;

	/**
	 * Trigger a listener only once for an event
	 *
	 * @param  {Element|Object}   elem Element or object to
	 * @param  {String|Array}   type Name/type of event
	 * @param  {Function} fn Event handler function
	 * @method one
	 */
	videojs.one = Events.one;

	/**
	 * Removes event listeners from an element
	 *
	 * @param  {Element|Object}   elem Object to remove listeners from
	 * @param  {String|Array=}   type Type of listener to remove. Don't include to remove all events from element.
	 * @param  {Function} fn   Specific listener to remove. Don't include to remove listeners for an event type.
	 * @method off
	 */
	videojs.off = Events.off;

	/**
	 * Trigger an event for an element
	 *
	 * @param  {Element|Object}      elem  Element to trigger an event on
	 * @param  {Event|Object|String} event A string (the type) or an event object with a type attribute
	 * @param  {Object} [hash] data hash to pass along with the event
	 * @return {Boolean=} Returned only if default was prevented
	 * @method trigger
	 */
	videojs.trigger = Events.trigger;

	/**
	 * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
	 *
	 *     videojs.xhr({
	 *       body: someJSONString,
	 *       uri: "/foo",
	 *       headers: {
	 *         "Content-Type": "application/json"
	 *       }
	 *     }, function (err, resp, body) {
	 *       // check resp.statusCode
	 *     });
	 *
	 * Check out the [full
	 * documentation](https://github.com/Raynos/xhr/blob/v2.1.0/README.md)
	 * for more options.
	 *
	 * @param {Object} options settings for the request.
	 * @return {XMLHttpRequest|XDomainRequest} the request object.
	 * @see https://github.com/Raynos/xhr
	 */
	videojs.xhr = _xhr2['default'];

	/**
	 * TextTrack class
	 *
	 * @type {Function}
	 */
	videojs.TextTrack = _tracksTextTrackJs2['default'];

	/**
	 * export the AudioTrack class so that source handlers can create
	 * AudioTracks and then add them to the players AudioTrackList
	 *
	 * @type {Function}
	 */
	videojs.AudioTrack = _tracksAudioTrackJs2['default'];

	/**
	 * export the VideoTrack class so that source handlers can create
	 * VideoTracks and then add them to the players VideoTrackList
	 *
	 * @type {Function}
	 */
	videojs.VideoTrack = _tracksVideoTrackJs2['default'];

	/**
	 * Determines, via duck typing, whether or not a value is a DOM element.
	 *
	 * @method isEl
	 * @param  {Mixed} value
	 * @return {Boolean}
	 */
	videojs.isEl = Dom.isEl;

	/**
	 * Determines, via duck typing, whether or not a value is a text node.
	 *
	 * @method isTextNode
	 * @param  {Mixed} value
	 * @return {Boolean}
	 */
	videojs.isTextNode = Dom.isTextNode;

	/**
	 * Creates an element and applies properties.
	 *
	 * @method createEl
	 * @param  {String} [tagName='div'] Name of tag to be created.
	 * @param  {Object} [properties={}] Element properties to be applied.
	 * @param  {Object} [attributes={}] Element attributes to be applied.
	 * @return {Element}
	 */
	videojs.createEl = Dom.createEl;

	/**
	 * Check if an element has a CSS class
	 *
	 * @method hasClass
	 * @param {Element} element Element to check
	 * @param {String} classToCheck Classname to check
	 */
	videojs.hasClass = Dom.hasElClass;

	/**
	 * Add a CSS class name to an element
	 *
	 * @method addClass
	 * @param {Element} element    Element to add class name to
	 * @param {String} classToAdd Classname to add
	 */
	videojs.addClass = Dom.addElClass;

	/**
	 * Remove a CSS class name from an element
	 *
	 * @method removeClass
	 * @param {Element} element    Element to remove from class name
	 * @param {String} classToRemove Classname to remove
	 */
	videojs.removeClass = Dom.removeElClass;

	/**
	 * Adds or removes a CSS class name on an element depending on an optional
	 * condition or the presence/absence of the class name.
	 *
	 * @method toggleElClass
	 * @param  {Element} element
	 * @param  {String} classToToggle
	 * @param  {Boolean|Function} [predicate]
	 *         Can be a function that returns a Boolean. If `true`, the class
	 *         will be added; if `false`, the class will be removed. If not
	 *         given, the class will be added if not present and vice versa.
	 */
	videojs.toggleClass = Dom.toggleElClass;

	/**
	 * Apply attributes to an HTML element.
	 *
	 * @method setAttributes
	 * @param  {Element} el         Target element.
	 * @param  {Object=} attributes Element attributes to be applied.
	 */
	videojs.setAttributes = Dom.setElAttributes;

	/**
	 * Get an element's attribute values, as defined on the HTML tag
	 * Attributes are not the same as properties. They're defined on the tag
	 * or with setAttribute (which shouldn't be used with HTML)
	 * This will return true or false for boolean attributes.
	 *
	 * @method getAttributes
	 * @param  {Element} tag Element from which to get tag attributes
	 * @return {Object}
	 */
	videojs.getAttributes = Dom.getElAttributes;

	/**
	 * Empties the contents of an element.
	 *
	 * @method emptyEl
	 * @param  {Element} el
	 * @return {Element}
	 */
	videojs.emptyEl = Dom.emptyEl;

	/**
	 * Normalizes and appends content to an element.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @method appendContent
	 * @param  {Element} el
	 * @param  {String|Element|TextNode|Array|Function} content
	 * @return {Element}
	 */
	videojs.appendContent = Dom.appendContent;

	/**
	 * Normalizes and inserts content into an element; this is identical to
	 * `appendContent()`, except it empties the element first.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @method insertContent
	 * @param  {Element} el
	 * @param  {String|Element|TextNode|Array|Function} content
	 * @return {Element}
	 */
	videojs.insertContent = Dom.insertContent;

	/*
	 * Custom Universal Module Definition (UMD)
	 *
	 * Video.js will never be a non-browser lib so we can simplify UMD a bunch and
	 * still support requirejs and browserify. This also needs to be closure
	 * compiler compatible, so string keys are used.
	 */
	if (typeof define === 'function' && define['amd']) {
	  define('videojs', [], function () {
	    return videojs;
	  });

	  // checking that module is an object too because of umdjs/umd#35
	} else if (typeof exports === 'object' && typeof module === 'object') {
	    module['exports'] = videojs;
	  }

	exports['default'] = videojs;
	module.exports = exports['default'];

	},{"../../src/js/utils/merge-options.js":148,"./component":67,"./event-target":104,"./extend.js":105,"./player":113,"./plugins.js":114,"./setup":118,"./tech/flash.js":121,"./tech/html5.js":122,"./tech/tech.js":124,"./tracks/audio-track.js":126,"./tracks/text-track.js":134,"./tracks/video-track.js":139,"./utils/browser.js":140,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/format-time.js":145,"./utils/log.js":147,"./utils/stylesheet.js":149,"./utils/time-ranges.js":150,"./utils/url.js":152,"global/document":1,"global/window":2,"lodash-compat/object/merge":40,"xhr":56}]},{},[153])(153)
	});


	//# sourceMappingURL=video.js.map
	/* vtt.js - v0.12.1 (https://github.com/mozilla/vtt.js) built on 08-07-2015 */

	(function(root) {
	  var vttjs = root.vttjs = {};
	  var cueShim = vttjs.VTTCue;
	  var regionShim = vttjs.VTTRegion;
	  var oldVTTCue = root.VTTCue;
	  var oldVTTRegion = root.VTTRegion;

	  vttjs.shim = function() {
	    vttjs.VTTCue = cueShim;
	    vttjs.VTTRegion = regionShim;
	  };

	  vttjs.restore = function() {
	    vttjs.VTTCue = oldVTTCue;
	    vttjs.VTTRegion = oldVTTRegion;
	  };
	}(this));

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	(function(root, vttjs) {

	  var autoKeyword = "auto";
	  var directionSetting = {
	    "": true,
	    "lr": true,
	    "rl": true
	  };
	  var alignSetting = {
	    "start": true,
	    "middle": true,
	    "end": true,
	    "left": true,
	    "right": true
	  };

	  function findDirectionSetting(value) {
	    if (typeof value !== "string") {
	      return false;
	    }
	    var dir = directionSetting[value.toLowerCase()];
	    return dir ? value.toLowerCase() : false;
	  }

	  function findAlignSetting(value) {
	    if (typeof value !== "string") {
	      return false;
	    }
	    var align = alignSetting[value.toLowerCase()];
	    return align ? value.toLowerCase() : false;
	  }

	  function extend(obj) {
	    var i = 1;
	    for (; i < arguments.length; i++) {
	      var cobj = arguments[i];
	      for (var p in cobj) {
	        obj[p] = cobj[p];
	      }
	    }

	    return obj;
	  }

	  function VTTCue(startTime, endTime, text) {
	    var cue = this;
	    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
	    var baseObj = {};

	    if (isIE8) {
	      cue = document.createElement('custom');
	    } else {
	      baseObj.enumerable = true;
	    }

	    /**
	     * Shim implementation specific properties. These properties are not in
	     * the spec.
	     */

	    // Lets us know when the VTTCue's data has changed in such a way that we need
	    // to recompute its display state. This lets us compute its display state
	    // lazily.
	    cue.hasBeenReset = false;

	    /**
	     * VTTCue and TextTrackCue properties
	     * http://dev.w3.org/html5/webvtt/#vttcue-interface
	     */

	    var _id = "";
	    var _pauseOnExit = false;
	    var _startTime = startTime;
	    var _endTime = endTime;
	    var _text = text;
	    var _region = null;
	    var _vertical = "";
	    var _snapToLines = true;
	    var _line = "auto";
	    var _lineAlign = "start";
	    var _position = 50;
	    var _positionAlign = "middle";
	    var _size = 50;
	    var _align = "middle";

	    Object.defineProperty(cue,
	      "id", extend({}, baseObj, {
	        get: function() {
	          return _id;
	        },
	        set: function(value) {
	          _id = "" + value;
	        }
	      }));

	    Object.defineProperty(cue,
	      "pauseOnExit", extend({}, baseObj, {
	        get: function() {
	          return _pauseOnExit;
	        },
	        set: function(value) {
	          _pauseOnExit = !!value;
	        }
	      }));

	    Object.defineProperty(cue,
	      "startTime", extend({}, baseObj, {
	        get: function() {
	          return _startTime;
	        },
	        set: function(value) {
	          if (typeof value !== "number") {
	            throw new TypeError("Start time must be set to a number.");
	          }
	          _startTime = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "endTime", extend({}, baseObj, {
	        get: function() {
	          return _endTime;
	        },
	        set: function(value) {
	          if (typeof value !== "number") {
	            throw new TypeError("End time must be set to a number.");
	          }
	          _endTime = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "text", extend({}, baseObj, {
	        get: function() {
	          return _text;
	        },
	        set: function(value) {
	          _text = "" + value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "region", extend({}, baseObj, {
	        get: function() {
	          return _region;
	        },
	        set: function(value) {
	          _region = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "vertical", extend({}, baseObj, {
	        get: function() {
	          return _vertical;
	        },
	        set: function(value) {
	          var setting = findDirectionSetting(value);
	          // Have to check for false because the setting an be an empty string.
	          if (setting === false) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _vertical = setting;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "snapToLines", extend({}, baseObj, {
	        get: function() {
	          return _snapToLines;
	        },
	        set: function(value) {
	          _snapToLines = !!value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "line", extend({}, baseObj, {
	        get: function() {
	          return _line;
	        },
	        set: function(value) {
	          if (typeof value !== "number" && value !== autoKeyword) {
	            throw new SyntaxError("An invalid number or illegal string was specified.");
	          }
	          _line = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "lineAlign", extend({}, baseObj, {
	        get: function() {
	          return _lineAlign;
	        },
	        set: function(value) {
	          var setting = findAlignSetting(value);
	          if (!setting) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _lineAlign = setting;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "position", extend({}, baseObj, {
	        get: function() {
	          return _position;
	        },
	        set: function(value) {
	          if (value < 0 || value > 100) {
	            throw new Error("Position must be between 0 and 100.");
	          }
	          _position = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "positionAlign", extend({}, baseObj, {
	        get: function() {
	          return _positionAlign;
	        },
	        set: function(value) {
	          var setting = findAlignSetting(value);
	          if (!setting) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _positionAlign = setting;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "size", extend({}, baseObj, {
	        get: function() {
	          return _size;
	        },
	        set: function(value) {
	          if (value < 0 || value > 100) {
	            throw new Error("Size must be between 0 and 100.");
	          }
	          _size = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "align", extend({}, baseObj, {
	        get: function() {
	          return _align;
	        },
	        set: function(value) {
	          var setting = findAlignSetting(value);
	          if (!setting) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _align = setting;
	          this.hasBeenReset = true;
	        }
	      }));

	    /**
	     * Other <track> spec defined properties
	     */

	    // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
	    cue.displayState = undefined;

	    if (isIE8) {
	      return cue;
	    }
	  }

	  /**
	   * VTTCue methods
	   */

	  VTTCue.prototype.getCueAsHTML = function() {
	    // Assume WebVTT.convertCueToDOMTree is on the global.
	    return WebVTT.convertCueToDOMTree(window, this.text);
	  };

	  root.VTTCue = root.VTTCue || VTTCue;
	  vttjs.VTTCue = VTTCue;
	}(this, (this.vttjs || {})));

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	(function(root, vttjs) {

	  var scrollSetting = {
	    "": true,
	    "up": true
	  };

	  function findScrollSetting(value) {
	    if (typeof value !== "string") {
	      return false;
	    }
	    var scroll = scrollSetting[value.toLowerCase()];
	    return scroll ? value.toLowerCase() : false;
	  }

	  function isValidPercentValue(value) {
	    return typeof value === "number" && (value >= 0 && value <= 100);
	  }

	  // VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
	  function VTTRegion() {
	    var _width = 100;
	    var _lines = 3;
	    var _regionAnchorX = 0;
	    var _regionAnchorY = 100;
	    var _viewportAnchorX = 0;
	    var _viewportAnchorY = 100;
	    var _scroll = "";

	    Object.defineProperties(this, {
	      "width": {
	        enumerable: true,
	        get: function() {
	          return _width;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("Width must be between 0 and 100.");
	          }
	          _width = value;
	        }
	      },
	      "lines": {
	        enumerable: true,
	        get: function() {
	          return _lines;
	        },
	        set: function(value) {
	          if (typeof value !== "number") {
	            throw new TypeError("Lines must be set to a number.");
	          }
	          _lines = value;
	        }
	      },
	      "regionAnchorY": {
	        enumerable: true,
	        get: function() {
	          return _regionAnchorY;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("RegionAnchorX must be between 0 and 100.");
	          }
	          _regionAnchorY = value;
	        }
	      },
	      "regionAnchorX": {
	        enumerable: true,
	        get: function() {
	          return _regionAnchorX;
	        },
	        set: function(value) {
	          if(!isValidPercentValue(value)) {
	            throw new Error("RegionAnchorY must be between 0 and 100.");
	          }
	          _regionAnchorX = value;
	        }
	      },
	      "viewportAnchorY": {
	        enumerable: true,
	        get: function() {
	          return _viewportAnchorY;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("ViewportAnchorY must be between 0 and 100.");
	          }
	          _viewportAnchorY = value;
	        }
	      },
	      "viewportAnchorX": {
	        enumerable: true,
	        get: function() {
	          return _viewportAnchorX;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("ViewportAnchorX must be between 0 and 100.");
	          }
	          _viewportAnchorX = value;
	        }
	      },
	      "scroll": {
	        enumerable: true,
	        get: function() {
	          return _scroll;
	        },
	        set: function(value) {
	          var setting = findScrollSetting(value);
	          // Have to check for false as an empty string is a legal value.
	          if (setting === false) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _scroll = setting;
	        }
	      }
	    });
	  }

	  root.VTTRegion = root.VTTRegion || VTTRegion;
	  vttjs.VTTRegion = VTTRegion;
	}(this, (this.vttjs || {})));

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
	/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

	(function(global) {

	  var _objCreate = Object.create || (function() {
	    function F() {}
	    return function(o) {
	      if (arguments.length !== 1) {
	        throw new Error('Object.create shim only accepts one parameter.');
	      }
	      F.prototype = o;
	      return new F();
	    };
	  })();

	  // Creates a new ParserError object from an errorData object. The errorData
	  // object should have default code and message properties. The default message
	  // property can be overriden by passing in a message parameter.
	  // See ParsingError.Errors below for acceptable errors.
	  function ParsingError(errorData, message) {
	    this.name = "ParsingError";
	    this.code = errorData.code;
	    this.message = message || errorData.message;
	  }
	  ParsingError.prototype = _objCreate(Error.prototype);
	  ParsingError.prototype.constructor = ParsingError;

	  // ParsingError metadata for acceptable ParsingErrors.
	  ParsingError.Errors = {
	    BadSignature: {
	      code: 0,
	      message: "Malformed WebVTT signature."
	    },
	    BadTimeStamp: {
	      code: 1,
	      message: "Malformed time stamp."
	    }
	  };

	  // Try to parse input as a time stamp.
	  function parseTimeStamp(input) {

	    function computeSeconds(h, m, s, f) {
	      return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
	    }

	    var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
	    if (!m) {
	      return null;
	    }

	    if (m[3]) {
	      // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
	      return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
	    } else if (m[1] > 59) {
	      // Timestamp takes the form of [hours]:[minutes].[milliseconds]
	      // First position is hours as it's over 59.
	      return computeSeconds(m[1], m[2], 0,  m[4]);
	    } else {
	      // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
	      return computeSeconds(0, m[1], m[2], m[4]);
	    }
	  }

	  // A settings object holds key/value pairs and will ignore anything but the first
	  // assignment to a specific key.
	  function Settings() {
	    this.values = _objCreate(null);
	  }

	  Settings.prototype = {
	    // Only accept the first assignment to any key.
	    set: function(k, v) {
	      if (!this.get(k) && v !== "") {
	        this.values[k] = v;
	      }
	    },
	    // Return the value for a key, or a default value.
	    // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
	    // a number of possible default values as properties where 'defaultKey' is
	    // the key of the property that will be chosen; otherwise it's assumed to be
	    // a single value.
	    get: function(k, dflt, defaultKey) {
	      if (defaultKey) {
	        return this.has(k) ? this.values[k] : dflt[defaultKey];
	      }
	      return this.has(k) ? this.values[k] : dflt;
	    },
	    // Check whether we have a value for a key.
	    has: function(k) {
	      return k in this.values;
	    },
	    // Accept a setting if its one of the given alternatives.
	    alt: function(k, v, a) {
	      for (var n = 0; n < a.length; ++n) {
	        if (v === a[n]) {
	          this.set(k, v);
	          break;
	        }
	      }
	    },
	    // Accept a setting if its a valid (signed) integer.
	    integer: function(k, v) {
	      if (/^-?\d+$/.test(v)) { // integer
	        this.set(k, parseInt(v, 10));
	      }
	    },
	    // Accept a setting if its a valid percentage.
	    percent: function(k, v) {
	      var m;
	      if ((m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/))) {
	        v = parseFloat(v);
	        if (v >= 0 && v <= 100) {
	          this.set(k, v);
	          return true;
	        }
	      }
	      return false;
	    }
	  };

	  // Helper function to parse input into groups separated by 'groupDelim', and
	  // interprete each group as a key/value pair separated by 'keyValueDelim'.
	  function parseOptions(input, callback, keyValueDelim, groupDelim) {
	    var groups = groupDelim ? input.split(groupDelim) : [input];
	    for (var i in groups) {
	      if (typeof groups[i] !== "string") {
	        continue;
	      }
	      var kv = groups[i].split(keyValueDelim);
	      if (kv.length !== 2) {
	        continue;
	      }
	      var k = kv[0];
	      var v = kv[1];
	      callback(k, v);
	    }
	  }

	  function parseCue(input, cue, regionList) {
	    // Remember the original input if we need to throw an error.
	    var oInput = input;
	    // 4.1 WebVTT timestamp
	    function consumeTimeStamp() {
	      var ts = parseTimeStamp(input);
	      if (ts === null) {
	        throw new ParsingError(ParsingError.Errors.BadTimeStamp,
	                              "Malformed timestamp: " + oInput);
	      }
	      // Remove time stamp from input.
	      input = input.replace(/^[^\sa-zA-Z-]+/, "");
	      return ts;
	    }

	    // 4.4.2 WebVTT cue settings
	    function consumeCueSettings(input, cue) {
	      var settings = new Settings();

	      parseOptions(input, function (k, v) {
	        switch (k) {
	        case "region":
	          // Find the last region we parsed with the same region id.
	          for (var i = regionList.length - 1; i >= 0; i--) {
	            if (regionList[i].id === v) {
	              settings.set(k, regionList[i].region);
	              break;
	            }
	          }
	          break;
	        case "vertical":
	          settings.alt(k, v, ["rl", "lr"]);
	          break;
	        case "line":
	          var vals = v.split(","),
	              vals0 = vals[0];
	          settings.integer(k, vals0);
	          settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
	          settings.alt(k, vals0, ["auto"]);
	          if (vals.length === 2) {
	            settings.alt("lineAlign", vals[1], ["start", "middle", "end"]);
	          }
	          break;
	        case "position":
	          vals = v.split(",");
	          settings.percent(k, vals[0]);
	          if (vals.length === 2) {
	            settings.alt("positionAlign", vals[1], ["start", "middle", "end"]);
	          }
	          break;
	        case "size":
	          settings.percent(k, v);
	          break;
	        case "align":
	          settings.alt(k, v, ["start", "middle", "end", "left", "right"]);
	          break;
	        }
	      }, /:/, /\s/);

	      // Apply default values for any missing fields.
	      cue.region = settings.get("region", null);
	      cue.vertical = settings.get("vertical", "");
	      cue.line = settings.get("line", "auto");
	      cue.lineAlign = settings.get("lineAlign", "start");
	      cue.snapToLines = settings.get("snapToLines", true);
	      cue.size = settings.get("size", 100);
	      cue.align = settings.get("align", "middle");
	      cue.position = settings.get("position", {
	        start: 0,
	        left: 0,
	        middle: 50,
	        end: 100,
	        right: 100
	      }, cue.align);
	      cue.positionAlign = settings.get("positionAlign", {
	        start: "start",
	        left: "start",
	        middle: "middle",
	        end: "end",
	        right: "end"
	      }, cue.align);
	    }

	    function skipWhitespace() {
	      input = input.replace(/^\s+/, "");
	    }

	    // 4.1 WebVTT cue timings.
	    skipWhitespace();
	    cue.startTime = consumeTimeStamp();   // (1) collect cue start time
	    skipWhitespace();
	    if (input.substr(0, 3) !== "-->") {     // (3) next characters must match "-->"
	      throw new ParsingError(ParsingError.Errors.BadTimeStamp,
	                             "Malformed time stamp (time stamps must be separated by '-->'): " +
	                             oInput);
	    }
	    input = input.substr(3);
	    skipWhitespace();
	    cue.endTime = consumeTimeStamp();     // (5) collect cue end time

	    // 4.1 WebVTT cue settings list.
	    skipWhitespace();
	    consumeCueSettings(input, cue);
	  }

	  var ESCAPE = {
	    "&amp;": "&",
	    "&lt;": "<",
	    "&gt;": ">",
	    "&lrm;": "\u200e",
	    "&rlm;": "\u200f",
	    "&nbsp;": "\u00a0"
	  };

	  var TAG_NAME = {
	    c: "span",
	    i: "i",
	    b: "b",
	    u: "u",
	    ruby: "ruby",
	    rt: "rt",
	    v: "span",
	    lang: "span"
	  };

	  var TAG_ANNOTATION = {
	    v: "title",
	    lang: "lang"
	  };

	  var NEEDS_PARENT = {
	    rt: "ruby"
	  };

	  // Parse content into a document fragment.
	  function parseContent(window, input) {
	    function nextToken() {
	      // Check for end-of-string.
	      if (!input) {
	        return null;
	      }

	      // Consume 'n' characters from the input.
	      function consume(result) {
	        input = input.substr(result.length);
	        return result;
	      }

	      var m = input.match(/^([^<]*)(<[^>]+>?)?/);
	      // If there is some text before the next tag, return it, otherwise return
	      // the tag.
	      return consume(m[1] ? m[1] : m[2]);
	    }

	    // Unescape a string 's'.
	    function unescape1(e) {
	      return ESCAPE[e];
	    }
	    function unescape(s) {
	      while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {
	        s = s.replace(m[0], unescape1);
	      }
	      return s;
	    }

	    function shouldAdd(current, element) {
	      return !NEEDS_PARENT[element.localName] ||
	             NEEDS_PARENT[element.localName] === current.localName;
	    }

	    // Create an element for this tag.
	    function createElement(type, annotation) {
	      var tagName = TAG_NAME[type];
	      if (!tagName) {
	        return null;
	      }
	      var element = window.document.createElement(tagName);
	      element.localName = tagName;
	      var name = TAG_ANNOTATION[type];
	      if (name && annotation) {
	        element[name] = annotation.trim();
	      }
	      return element;
	    }

	    var rootDiv = window.document.createElement("div"),
	        current = rootDiv,
	        t,
	        tagStack = [];

	    while ((t = nextToken()) !== null) {
	      if (t[0] === '<') {
	        if (t[1] === "/") {
	          // If the closing tag matches, move back up to the parent node.
	          if (tagStack.length &&
	              tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
	            tagStack.pop();
	            current = current.parentNode;
	          }
	          // Otherwise just ignore the end tag.
	          continue;
	        }
	        var ts = parseTimeStamp(t.substr(1, t.length - 2));
	        var node;
	        if (ts) {
	          // Timestamps are lead nodes as well.
	          node = window.document.createProcessingInstruction("timestamp", ts);
	          current.appendChild(node);
	          continue;
	        }
	        var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
	        // If we can't parse the tag, skip to the next tag.
	        if (!m) {
	          continue;
	        }
	        // Try to construct an element, and ignore the tag if we couldn't.
	        node = createElement(m[1], m[3]);
	        if (!node) {
	          continue;
	        }
	        // Determine if the tag should be added based on the context of where it
	        // is placed in the cuetext.
	        if (!shouldAdd(current, node)) {
	          continue;
	        }
	        // Set the class list (as a list of classes, separated by space).
	        if (m[2]) {
	          node.className = m[2].substr(1).replace('.', ' ');
	        }
	        // Append the node to the current node, and enter the scope of the new
	        // node.
	        tagStack.push(m[1]);
	        current.appendChild(node);
	        current = node;
	        continue;
	      }

	      // Text nodes are leaf nodes.
	      current.appendChild(window.document.createTextNode(unescape(t)));
	    }

	    return rootDiv;
	  }

	  // This is a list of all the Unicode characters that have a strong
	  // right-to-left category. What this means is that these characters are
	  // written right-to-left for sure. It was generated by pulling all the strong
	  // right-to-left characters out of the Unicode data table. That table can
	  // found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
	  var strongRTLChars = [0x05BE, 0x05C0, 0x05C3, 0x05C6, 0x05D0, 0x05D1,
	      0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7, 0x05D8, 0x05D9, 0x05DA,
	      0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF, 0x05E0, 0x05E1, 0x05E2, 0x05E3,
	      0x05E4, 0x05E5, 0x05E6, 0x05E7, 0x05E8, 0x05E9, 0x05EA, 0x05F0, 0x05F1,
	      0x05F2, 0x05F3, 0x05F4, 0x0608, 0x060B, 0x060D, 0x061B, 0x061E, 0x061F,
	      0x0620, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, 0x0628,
	      0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F, 0x0630, 0x0631,
	      0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A,
	      0x063B, 0x063C, 0x063D, 0x063E, 0x063F, 0x0640, 0x0641, 0x0642, 0x0643,
	      0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A, 0x066D, 0x066E,
	      0x066F, 0x0671, 0x0672, 0x0673, 0x0674, 0x0675, 0x0676, 0x0677, 0x0678,
	      0x0679, 0x067A, 0x067B, 0x067C, 0x067D, 0x067E, 0x067F, 0x0680, 0x0681,
	      0x0682, 0x0683, 0x0684, 0x0685, 0x0686, 0x0687, 0x0688, 0x0689, 0x068A,
	      0x068B, 0x068C, 0x068D, 0x068E, 0x068F, 0x0690, 0x0691, 0x0692, 0x0693,
	      0x0694, 0x0695, 0x0696, 0x0697, 0x0698, 0x0699, 0x069A, 0x069B, 0x069C,
	      0x069D, 0x069E, 0x069F, 0x06A0, 0x06A1, 0x06A2, 0x06A3, 0x06A4, 0x06A5,
	      0x06A6, 0x06A7, 0x06A8, 0x06A9, 0x06AA, 0x06AB, 0x06AC, 0x06AD, 0x06AE,
	      0x06AF, 0x06B0, 0x06B1, 0x06B2, 0x06B3, 0x06B4, 0x06B5, 0x06B6, 0x06B7,
	      0x06B8, 0x06B9, 0x06BA, 0x06BB, 0x06BC, 0x06BD, 0x06BE, 0x06BF, 0x06C0,
	      0x06C1, 0x06C2, 0x06C3, 0x06C4, 0x06C5, 0x06C6, 0x06C7, 0x06C8, 0x06C9,
	      0x06CA, 0x06CB, 0x06CC, 0x06CD, 0x06CE, 0x06CF, 0x06D0, 0x06D1, 0x06D2,
	      0x06D3, 0x06D4, 0x06D5, 0x06E5, 0x06E6, 0x06EE, 0x06EF, 0x06FA, 0x06FB,
	      0x06FC, 0x06FD, 0x06FE, 0x06FF, 0x0700, 0x0701, 0x0702, 0x0703, 0x0704,
	      0x0705, 0x0706, 0x0707, 0x0708, 0x0709, 0x070A, 0x070B, 0x070C, 0x070D,
	      0x070F, 0x0710, 0x0712, 0x0713, 0x0714, 0x0715, 0x0716, 0x0717, 0x0718,
	      0x0719, 0x071A, 0x071B, 0x071C, 0x071D, 0x071E, 0x071F, 0x0720, 0x0721,
	      0x0722, 0x0723, 0x0724, 0x0725, 0x0726, 0x0727, 0x0728, 0x0729, 0x072A,
	      0x072B, 0x072C, 0x072D, 0x072E, 0x072F, 0x074D, 0x074E, 0x074F, 0x0750,
	      0x0751, 0x0752, 0x0753, 0x0754, 0x0755, 0x0756, 0x0757, 0x0758, 0x0759,
	      0x075A, 0x075B, 0x075C, 0x075D, 0x075E, 0x075F, 0x0760, 0x0761, 0x0762,
	      0x0763, 0x0764, 0x0765, 0x0766, 0x0767, 0x0768, 0x0769, 0x076A, 0x076B,
	      0x076C, 0x076D, 0x076E, 0x076F, 0x0770, 0x0771, 0x0772, 0x0773, 0x0774,
	      0x0775, 0x0776, 0x0777, 0x0778, 0x0779, 0x077A, 0x077B, 0x077C, 0x077D,
	      0x077E, 0x077F, 0x0780, 0x0781, 0x0782, 0x0783, 0x0784, 0x0785, 0x0786,
	      0x0787, 0x0788, 0x0789, 0x078A, 0x078B, 0x078C, 0x078D, 0x078E, 0x078F,
	      0x0790, 0x0791, 0x0792, 0x0793, 0x0794, 0x0795, 0x0796, 0x0797, 0x0798,
	      0x0799, 0x079A, 0x079B, 0x079C, 0x079D, 0x079E, 0x079F, 0x07A0, 0x07A1,
	      0x07A2, 0x07A3, 0x07A4, 0x07A5, 0x07B1, 0x07C0, 0x07C1, 0x07C2, 0x07C3,
	      0x07C4, 0x07C5, 0x07C6, 0x07C7, 0x07C8, 0x07C9, 0x07CA, 0x07CB, 0x07CC,
	      0x07CD, 0x07CE, 0x07CF, 0x07D0, 0x07D1, 0x07D2, 0x07D3, 0x07D4, 0x07D5,
	      0x07D6, 0x07D7, 0x07D8, 0x07D9, 0x07DA, 0x07DB, 0x07DC, 0x07DD, 0x07DE,
	      0x07DF, 0x07E0, 0x07E1, 0x07E2, 0x07E3, 0x07E4, 0x07E5, 0x07E6, 0x07E7,
	      0x07E8, 0x07E9, 0x07EA, 0x07F4, 0x07F5, 0x07FA, 0x0800, 0x0801, 0x0802,
	      0x0803, 0x0804, 0x0805, 0x0806, 0x0807, 0x0808, 0x0809, 0x080A, 0x080B,
	      0x080C, 0x080D, 0x080E, 0x080F, 0x0810, 0x0811, 0x0812, 0x0813, 0x0814,
	      0x0815, 0x081A, 0x0824, 0x0828, 0x0830, 0x0831, 0x0832, 0x0833, 0x0834,
	      0x0835, 0x0836, 0x0837, 0x0838, 0x0839, 0x083A, 0x083B, 0x083C, 0x083D,
	      0x083E, 0x0840, 0x0841, 0x0842, 0x0843, 0x0844, 0x0845, 0x0846, 0x0847,
	      0x0848, 0x0849, 0x084A, 0x084B, 0x084C, 0x084D, 0x084E, 0x084F, 0x0850,
	      0x0851, 0x0852, 0x0853, 0x0854, 0x0855, 0x0856, 0x0857, 0x0858, 0x085E,
	      0x08A0, 0x08A2, 0x08A3, 0x08A4, 0x08A5, 0x08A6, 0x08A7, 0x08A8, 0x08A9,
	      0x08AA, 0x08AB, 0x08AC, 0x200F, 0xFB1D, 0xFB1F, 0xFB20, 0xFB21, 0xFB22,
	      0xFB23, 0xFB24, 0xFB25, 0xFB26, 0xFB27, 0xFB28, 0xFB2A, 0xFB2B, 0xFB2C,
	      0xFB2D, 0xFB2E, 0xFB2F, 0xFB30, 0xFB31, 0xFB32, 0xFB33, 0xFB34, 0xFB35,
	      0xFB36, 0xFB38, 0xFB39, 0xFB3A, 0xFB3B, 0xFB3C, 0xFB3E, 0xFB40, 0xFB41,
	      0xFB43, 0xFB44, 0xFB46, 0xFB47, 0xFB48, 0xFB49, 0xFB4A, 0xFB4B, 0xFB4C,
	      0xFB4D, 0xFB4E, 0xFB4F, 0xFB50, 0xFB51, 0xFB52, 0xFB53, 0xFB54, 0xFB55,
	      0xFB56, 0xFB57, 0xFB58, 0xFB59, 0xFB5A, 0xFB5B, 0xFB5C, 0xFB5D, 0xFB5E,
	      0xFB5F, 0xFB60, 0xFB61, 0xFB62, 0xFB63, 0xFB64, 0xFB65, 0xFB66, 0xFB67,
	      0xFB68, 0xFB69, 0xFB6A, 0xFB6B, 0xFB6C, 0xFB6D, 0xFB6E, 0xFB6F, 0xFB70,
	      0xFB71, 0xFB72, 0xFB73, 0xFB74, 0xFB75, 0xFB76, 0xFB77, 0xFB78, 0xFB79,
	      0xFB7A, 0xFB7B, 0xFB7C, 0xFB7D, 0xFB7E, 0xFB7F, 0xFB80, 0xFB81, 0xFB82,
	      0xFB83, 0xFB84, 0xFB85, 0xFB86, 0xFB87, 0xFB88, 0xFB89, 0xFB8A, 0xFB8B,
	      0xFB8C, 0xFB8D, 0xFB8E, 0xFB8F, 0xFB90, 0xFB91, 0xFB92, 0xFB93, 0xFB94,
	      0xFB95, 0xFB96, 0xFB97, 0xFB98, 0xFB99, 0xFB9A, 0xFB9B, 0xFB9C, 0xFB9D,
	      0xFB9E, 0xFB9F, 0xFBA0, 0xFBA1, 0xFBA2, 0xFBA3, 0xFBA4, 0xFBA5, 0xFBA6,
	      0xFBA7, 0xFBA8, 0xFBA9, 0xFBAA, 0xFBAB, 0xFBAC, 0xFBAD, 0xFBAE, 0xFBAF,
	      0xFBB0, 0xFBB1, 0xFBB2, 0xFBB3, 0xFBB4, 0xFBB5, 0xFBB6, 0xFBB7, 0xFBB8,
	      0xFBB9, 0xFBBA, 0xFBBB, 0xFBBC, 0xFBBD, 0xFBBE, 0xFBBF, 0xFBC0, 0xFBC1,
	      0xFBD3, 0xFBD4, 0xFBD5, 0xFBD6, 0xFBD7, 0xFBD8, 0xFBD9, 0xFBDA, 0xFBDB,
	      0xFBDC, 0xFBDD, 0xFBDE, 0xFBDF, 0xFBE0, 0xFBE1, 0xFBE2, 0xFBE3, 0xFBE4,
	      0xFBE5, 0xFBE6, 0xFBE7, 0xFBE8, 0xFBE9, 0xFBEA, 0xFBEB, 0xFBEC, 0xFBED,
	      0xFBEE, 0xFBEF, 0xFBF0, 0xFBF1, 0xFBF2, 0xFBF3, 0xFBF4, 0xFBF5, 0xFBF6,
	      0xFBF7, 0xFBF8, 0xFBF9, 0xFBFA, 0xFBFB, 0xFBFC, 0xFBFD, 0xFBFE, 0xFBFF,
	      0xFC00, 0xFC01, 0xFC02, 0xFC03, 0xFC04, 0xFC05, 0xFC06, 0xFC07, 0xFC08,
	      0xFC09, 0xFC0A, 0xFC0B, 0xFC0C, 0xFC0D, 0xFC0E, 0xFC0F, 0xFC10, 0xFC11,
	      0xFC12, 0xFC13, 0xFC14, 0xFC15, 0xFC16, 0xFC17, 0xFC18, 0xFC19, 0xFC1A,
	      0xFC1B, 0xFC1C, 0xFC1D, 0xFC1E, 0xFC1F, 0xFC20, 0xFC21, 0xFC22, 0xFC23,
	      0xFC24, 0xFC25, 0xFC26, 0xFC27, 0xFC28, 0xFC29, 0xFC2A, 0xFC2B, 0xFC2C,
	      0xFC2D, 0xFC2E, 0xFC2F, 0xFC30, 0xFC31, 0xFC32, 0xFC33, 0xFC34, 0xFC35,
	      0xFC36, 0xFC37, 0xFC38, 0xFC39, 0xFC3A, 0xFC3B, 0xFC3C, 0xFC3D, 0xFC3E,
	      0xFC3F, 0xFC40, 0xFC41, 0xFC42, 0xFC43, 0xFC44, 0xFC45, 0xFC46, 0xFC47,
	      0xFC48, 0xFC49, 0xFC4A, 0xFC4B, 0xFC4C, 0xFC4D, 0xFC4E, 0xFC4F, 0xFC50,
	      0xFC51, 0xFC52, 0xFC53, 0xFC54, 0xFC55, 0xFC56, 0xFC57, 0xFC58, 0xFC59,
	      0xFC5A, 0xFC5B, 0xFC5C, 0xFC5D, 0xFC5E, 0xFC5F, 0xFC60, 0xFC61, 0xFC62,
	      0xFC63, 0xFC64, 0xFC65, 0xFC66, 0xFC67, 0xFC68, 0xFC69, 0xFC6A, 0xFC6B,
	      0xFC6C, 0xFC6D, 0xFC6E, 0xFC6F, 0xFC70, 0xFC71, 0xFC72, 0xFC73, 0xFC74,
	      0xFC75, 0xFC76, 0xFC77, 0xFC78, 0xFC79, 0xFC7A, 0xFC7B, 0xFC7C, 0xFC7D,
	      0xFC7E, 0xFC7F, 0xFC80, 0xFC81, 0xFC82, 0xFC83, 0xFC84, 0xFC85, 0xFC86,
	      0xFC87, 0xFC88, 0xFC89, 0xFC8A, 0xFC8B, 0xFC8C, 0xFC8D, 0xFC8E, 0xFC8F,
	      0xFC90, 0xFC91, 0xFC92, 0xFC93, 0xFC94, 0xFC95, 0xFC96, 0xFC97, 0xFC98,
	      0xFC99, 0xFC9A, 0xFC9B, 0xFC9C, 0xFC9D, 0xFC9E, 0xFC9F, 0xFCA0, 0xFCA1,
	      0xFCA2, 0xFCA3, 0xFCA4, 0xFCA5, 0xFCA6, 0xFCA7, 0xFCA8, 0xFCA9, 0xFCAA,
	      0xFCAB, 0xFCAC, 0xFCAD, 0xFCAE, 0xFCAF, 0xFCB0, 0xFCB1, 0xFCB2, 0xFCB3,
	      0xFCB4, 0xFCB5, 0xFCB6, 0xFCB7, 0xFCB8, 0xFCB9, 0xFCBA, 0xFCBB, 0xFCBC,
	      0xFCBD, 0xFCBE, 0xFCBF, 0xFCC0, 0xFCC1, 0xFCC2, 0xFCC3, 0xFCC4, 0xFCC5,
	      0xFCC6, 0xFCC7, 0xFCC8, 0xFCC9, 0xFCCA, 0xFCCB, 0xFCCC, 0xFCCD, 0xFCCE,
	      0xFCCF, 0xFCD0, 0xFCD1, 0xFCD2, 0xFCD3, 0xFCD4, 0xFCD5, 0xFCD6, 0xFCD7,
	      0xFCD8, 0xFCD9, 0xFCDA, 0xFCDB, 0xFCDC, 0xFCDD, 0xFCDE, 0xFCDF, 0xFCE0,
	      0xFCE1, 0xFCE2, 0xFCE3, 0xFCE4, 0xFCE5, 0xFCE6, 0xFCE7, 0xFCE8, 0xFCE9,
	      0xFCEA, 0xFCEB, 0xFCEC, 0xFCED, 0xFCEE, 0xFCEF, 0xFCF0, 0xFCF1, 0xFCF2,
	      0xFCF3, 0xFCF4, 0xFCF5, 0xFCF6, 0xFCF7, 0xFCF8, 0xFCF9, 0xFCFA, 0xFCFB,
	      0xFCFC, 0xFCFD, 0xFCFE, 0xFCFF, 0xFD00, 0xFD01, 0xFD02, 0xFD03, 0xFD04,
	      0xFD05, 0xFD06, 0xFD07, 0xFD08, 0xFD09, 0xFD0A, 0xFD0B, 0xFD0C, 0xFD0D,
	      0xFD0E, 0xFD0F, 0xFD10, 0xFD11, 0xFD12, 0xFD13, 0xFD14, 0xFD15, 0xFD16,
	      0xFD17, 0xFD18, 0xFD19, 0xFD1A, 0xFD1B, 0xFD1C, 0xFD1D, 0xFD1E, 0xFD1F,
	      0xFD20, 0xFD21, 0xFD22, 0xFD23, 0xFD24, 0xFD25, 0xFD26, 0xFD27, 0xFD28,
	      0xFD29, 0xFD2A, 0xFD2B, 0xFD2C, 0xFD2D, 0xFD2E, 0xFD2F, 0xFD30, 0xFD31,
	      0xFD32, 0xFD33, 0xFD34, 0xFD35, 0xFD36, 0xFD37, 0xFD38, 0xFD39, 0xFD3A,
	      0xFD3B, 0xFD3C, 0xFD3D, 0xFD50, 0xFD51, 0xFD52, 0xFD53, 0xFD54, 0xFD55,
	      0xFD56, 0xFD57, 0xFD58, 0xFD59, 0xFD5A, 0xFD5B, 0xFD5C, 0xFD5D, 0xFD5E,
	      0xFD5F, 0xFD60, 0xFD61, 0xFD62, 0xFD63, 0xFD64, 0xFD65, 0xFD66, 0xFD67,
	      0xFD68, 0xFD69, 0xFD6A, 0xFD6B, 0xFD6C, 0xFD6D, 0xFD6E, 0xFD6F, 0xFD70,
	      0xFD71, 0xFD72, 0xFD73, 0xFD74, 0xFD75, 0xFD76, 0xFD77, 0xFD78, 0xFD79,
	      0xFD7A, 0xFD7B, 0xFD7C, 0xFD7D, 0xFD7E, 0xFD7F, 0xFD80, 0xFD81, 0xFD82,
	      0xFD83, 0xFD84, 0xFD85, 0xFD86, 0xFD87, 0xFD88, 0xFD89, 0xFD8A, 0xFD8B,
	      0xFD8C, 0xFD8D, 0xFD8E, 0xFD8F, 0xFD92, 0xFD93, 0xFD94, 0xFD95, 0xFD96,
	      0xFD97, 0xFD98, 0xFD99, 0xFD9A, 0xFD9B, 0xFD9C, 0xFD9D, 0xFD9E, 0xFD9F,
	      0xFDA0, 0xFDA1, 0xFDA2, 0xFDA3, 0xFDA4, 0xFDA5, 0xFDA6, 0xFDA7, 0xFDA8,
	      0xFDA9, 0xFDAA, 0xFDAB, 0xFDAC, 0xFDAD, 0xFDAE, 0xFDAF, 0xFDB0, 0xFDB1,
	      0xFDB2, 0xFDB3, 0xFDB4, 0xFDB5, 0xFDB6, 0xFDB7, 0xFDB8, 0xFDB9, 0xFDBA,
	      0xFDBB, 0xFDBC, 0xFDBD, 0xFDBE, 0xFDBF, 0xFDC0, 0xFDC1, 0xFDC2, 0xFDC3,
	      0xFDC4, 0xFDC5, 0xFDC6, 0xFDC7, 0xFDF0, 0xFDF1, 0xFDF2, 0xFDF3, 0xFDF4,
	      0xFDF5, 0xFDF6, 0xFDF7, 0xFDF8, 0xFDF9, 0xFDFA, 0xFDFB, 0xFDFC, 0xFE70,
	      0xFE71, 0xFE72, 0xFE73, 0xFE74, 0xFE76, 0xFE77, 0xFE78, 0xFE79, 0xFE7A,
	      0xFE7B, 0xFE7C, 0xFE7D, 0xFE7E, 0xFE7F, 0xFE80, 0xFE81, 0xFE82, 0xFE83,
	      0xFE84, 0xFE85, 0xFE86, 0xFE87, 0xFE88, 0xFE89, 0xFE8A, 0xFE8B, 0xFE8C,
	      0xFE8D, 0xFE8E, 0xFE8F, 0xFE90, 0xFE91, 0xFE92, 0xFE93, 0xFE94, 0xFE95,
	      0xFE96, 0xFE97, 0xFE98, 0xFE99, 0xFE9A, 0xFE9B, 0xFE9C, 0xFE9D, 0xFE9E,
	      0xFE9F, 0xFEA0, 0xFEA1, 0xFEA2, 0xFEA3, 0xFEA4, 0xFEA5, 0xFEA6, 0xFEA7,
	      0xFEA8, 0xFEA9, 0xFEAA, 0xFEAB, 0xFEAC, 0xFEAD, 0xFEAE, 0xFEAF, 0xFEB0,
	      0xFEB1, 0xFEB2, 0xFEB3, 0xFEB4, 0xFEB5, 0xFEB6, 0xFEB7, 0xFEB8, 0xFEB9,
	      0xFEBA, 0xFEBB, 0xFEBC, 0xFEBD, 0xFEBE, 0xFEBF, 0xFEC0, 0xFEC1, 0xFEC2,
	      0xFEC3, 0xFEC4, 0xFEC5, 0xFEC6, 0xFEC7, 0xFEC8, 0xFEC9, 0xFECA, 0xFECB,
	      0xFECC, 0xFECD, 0xFECE, 0xFECF, 0xFED0, 0xFED1, 0xFED2, 0xFED3, 0xFED4,
	      0xFED5, 0xFED6, 0xFED7, 0xFED8, 0xFED9, 0xFEDA, 0xFEDB, 0xFEDC, 0xFEDD,
	      0xFEDE, 0xFEDF, 0xFEE0, 0xFEE1, 0xFEE2, 0xFEE3, 0xFEE4, 0xFEE5, 0xFEE6,
	      0xFEE7, 0xFEE8, 0xFEE9, 0xFEEA, 0xFEEB, 0xFEEC, 0xFEED, 0xFEEE, 0xFEEF,
	      0xFEF0, 0xFEF1, 0xFEF2, 0xFEF3, 0xFEF4, 0xFEF5, 0xFEF6, 0xFEF7, 0xFEF8,
	      0xFEF9, 0xFEFA, 0xFEFB, 0xFEFC, 0x10800, 0x10801, 0x10802, 0x10803,
	      0x10804, 0x10805, 0x10808, 0x1080A, 0x1080B, 0x1080C, 0x1080D, 0x1080E,
	      0x1080F, 0x10810, 0x10811, 0x10812, 0x10813, 0x10814, 0x10815, 0x10816,
	      0x10817, 0x10818, 0x10819, 0x1081A, 0x1081B, 0x1081C, 0x1081D, 0x1081E,
	      0x1081F, 0x10820, 0x10821, 0x10822, 0x10823, 0x10824, 0x10825, 0x10826,
	      0x10827, 0x10828, 0x10829, 0x1082A, 0x1082B, 0x1082C, 0x1082D, 0x1082E,
	      0x1082F, 0x10830, 0x10831, 0x10832, 0x10833, 0x10834, 0x10835, 0x10837,
	      0x10838, 0x1083C, 0x1083F, 0x10840, 0x10841, 0x10842, 0x10843, 0x10844,
	      0x10845, 0x10846, 0x10847, 0x10848, 0x10849, 0x1084A, 0x1084B, 0x1084C,
	      0x1084D, 0x1084E, 0x1084F, 0x10850, 0x10851, 0x10852, 0x10853, 0x10854,
	      0x10855, 0x10857, 0x10858, 0x10859, 0x1085A, 0x1085B, 0x1085C, 0x1085D,
	      0x1085E, 0x1085F, 0x10900, 0x10901, 0x10902, 0x10903, 0x10904, 0x10905,
	      0x10906, 0x10907, 0x10908, 0x10909, 0x1090A, 0x1090B, 0x1090C, 0x1090D,
	      0x1090E, 0x1090F, 0x10910, 0x10911, 0x10912, 0x10913, 0x10914, 0x10915,
	      0x10916, 0x10917, 0x10918, 0x10919, 0x1091A, 0x1091B, 0x10920, 0x10921,
	      0x10922, 0x10923, 0x10924, 0x10925, 0x10926, 0x10927, 0x10928, 0x10929,
	      0x1092A, 0x1092B, 0x1092C, 0x1092D, 0x1092E, 0x1092F, 0x10930, 0x10931,
	      0x10932, 0x10933, 0x10934, 0x10935, 0x10936, 0x10937, 0x10938, 0x10939,
	      0x1093F, 0x10980, 0x10981, 0x10982, 0x10983, 0x10984, 0x10985, 0x10986,
	      0x10987, 0x10988, 0x10989, 0x1098A, 0x1098B, 0x1098C, 0x1098D, 0x1098E,
	      0x1098F, 0x10990, 0x10991, 0x10992, 0x10993, 0x10994, 0x10995, 0x10996,
	      0x10997, 0x10998, 0x10999, 0x1099A, 0x1099B, 0x1099C, 0x1099D, 0x1099E,
	      0x1099F, 0x109A0, 0x109A1, 0x109A2, 0x109A3, 0x109A4, 0x109A5, 0x109A6,
	      0x109A7, 0x109A8, 0x109A9, 0x109AA, 0x109AB, 0x109AC, 0x109AD, 0x109AE,
	      0x109AF, 0x109B0, 0x109B1, 0x109B2, 0x109B3, 0x109B4, 0x109B5, 0x109B6,
	      0x109B7, 0x109BE, 0x109BF, 0x10A00, 0x10A10, 0x10A11, 0x10A12, 0x10A13,
	      0x10A15, 0x10A16, 0x10A17, 0x10A19, 0x10A1A, 0x10A1B, 0x10A1C, 0x10A1D,
	      0x10A1E, 0x10A1F, 0x10A20, 0x10A21, 0x10A22, 0x10A23, 0x10A24, 0x10A25,
	      0x10A26, 0x10A27, 0x10A28, 0x10A29, 0x10A2A, 0x10A2B, 0x10A2C, 0x10A2D,
	      0x10A2E, 0x10A2F, 0x10A30, 0x10A31, 0x10A32, 0x10A33, 0x10A40, 0x10A41,
	      0x10A42, 0x10A43, 0x10A44, 0x10A45, 0x10A46, 0x10A47, 0x10A50, 0x10A51,
	      0x10A52, 0x10A53, 0x10A54, 0x10A55, 0x10A56, 0x10A57, 0x10A58, 0x10A60,
	      0x10A61, 0x10A62, 0x10A63, 0x10A64, 0x10A65, 0x10A66, 0x10A67, 0x10A68,
	      0x10A69, 0x10A6A, 0x10A6B, 0x10A6C, 0x10A6D, 0x10A6E, 0x10A6F, 0x10A70,
	      0x10A71, 0x10A72, 0x10A73, 0x10A74, 0x10A75, 0x10A76, 0x10A77, 0x10A78,
	      0x10A79, 0x10A7A, 0x10A7B, 0x10A7C, 0x10A7D, 0x10A7E, 0x10A7F, 0x10B00,
	      0x10B01, 0x10B02, 0x10B03, 0x10B04, 0x10B05, 0x10B06, 0x10B07, 0x10B08,
	      0x10B09, 0x10B0A, 0x10B0B, 0x10B0C, 0x10B0D, 0x10B0E, 0x10B0F, 0x10B10,
	      0x10B11, 0x10B12, 0x10B13, 0x10B14, 0x10B15, 0x10B16, 0x10B17, 0x10B18,
	      0x10B19, 0x10B1A, 0x10B1B, 0x10B1C, 0x10B1D, 0x10B1E, 0x10B1F, 0x10B20,
	      0x10B21, 0x10B22, 0x10B23, 0x10B24, 0x10B25, 0x10B26, 0x10B27, 0x10B28,
	      0x10B29, 0x10B2A, 0x10B2B, 0x10B2C, 0x10B2D, 0x10B2E, 0x10B2F, 0x10B30,
	      0x10B31, 0x10B32, 0x10B33, 0x10B34, 0x10B35, 0x10B40, 0x10B41, 0x10B42,
	      0x10B43, 0x10B44, 0x10B45, 0x10B46, 0x10B47, 0x10B48, 0x10B49, 0x10B4A,
	      0x10B4B, 0x10B4C, 0x10B4D, 0x10B4E, 0x10B4F, 0x10B50, 0x10B51, 0x10B52,
	      0x10B53, 0x10B54, 0x10B55, 0x10B58, 0x10B59, 0x10B5A, 0x10B5B, 0x10B5C,
	      0x10B5D, 0x10B5E, 0x10B5F, 0x10B60, 0x10B61, 0x10B62, 0x10B63, 0x10B64,
	      0x10B65, 0x10B66, 0x10B67, 0x10B68, 0x10B69, 0x10B6A, 0x10B6B, 0x10B6C,
	      0x10B6D, 0x10B6E, 0x10B6F, 0x10B70, 0x10B71, 0x10B72, 0x10B78, 0x10B79,
	      0x10B7A, 0x10B7B, 0x10B7C, 0x10B7D, 0x10B7E, 0x10B7F, 0x10C00, 0x10C01,
	      0x10C02, 0x10C03, 0x10C04, 0x10C05, 0x10C06, 0x10C07, 0x10C08, 0x10C09,
	      0x10C0A, 0x10C0B, 0x10C0C, 0x10C0D, 0x10C0E, 0x10C0F, 0x10C10, 0x10C11,
	      0x10C12, 0x10C13, 0x10C14, 0x10C15, 0x10C16, 0x10C17, 0x10C18, 0x10C19,
	      0x10C1A, 0x10C1B, 0x10C1C, 0x10C1D, 0x10C1E, 0x10C1F, 0x10C20, 0x10C21,
	      0x10C22, 0x10C23, 0x10C24, 0x10C25, 0x10C26, 0x10C27, 0x10C28, 0x10C29,
	      0x10C2A, 0x10C2B, 0x10C2C, 0x10C2D, 0x10C2E, 0x10C2F, 0x10C30, 0x10C31,
	      0x10C32, 0x10C33, 0x10C34, 0x10C35, 0x10C36, 0x10C37, 0x10C38, 0x10C39,
	      0x10C3A, 0x10C3B, 0x10C3C, 0x10C3D, 0x10C3E, 0x10C3F, 0x10C40, 0x10C41,
	      0x10C42, 0x10C43, 0x10C44, 0x10C45, 0x10C46, 0x10C47, 0x10C48, 0x1EE00,
	      0x1EE01, 0x1EE02, 0x1EE03, 0x1EE05, 0x1EE06, 0x1EE07, 0x1EE08, 0x1EE09,
	      0x1EE0A, 0x1EE0B, 0x1EE0C, 0x1EE0D, 0x1EE0E, 0x1EE0F, 0x1EE10, 0x1EE11,
	      0x1EE12, 0x1EE13, 0x1EE14, 0x1EE15, 0x1EE16, 0x1EE17, 0x1EE18, 0x1EE19,
	      0x1EE1A, 0x1EE1B, 0x1EE1C, 0x1EE1D, 0x1EE1E, 0x1EE1F, 0x1EE21, 0x1EE22,
	      0x1EE24, 0x1EE27, 0x1EE29, 0x1EE2A, 0x1EE2B, 0x1EE2C, 0x1EE2D, 0x1EE2E,
	      0x1EE2F, 0x1EE30, 0x1EE31, 0x1EE32, 0x1EE34, 0x1EE35, 0x1EE36, 0x1EE37,
	      0x1EE39, 0x1EE3B, 0x1EE42, 0x1EE47, 0x1EE49, 0x1EE4B, 0x1EE4D, 0x1EE4E,
	      0x1EE4F, 0x1EE51, 0x1EE52, 0x1EE54, 0x1EE57, 0x1EE59, 0x1EE5B, 0x1EE5D,
	      0x1EE5F, 0x1EE61, 0x1EE62, 0x1EE64, 0x1EE67, 0x1EE68, 0x1EE69, 0x1EE6A,
	      0x1EE6C, 0x1EE6D, 0x1EE6E, 0x1EE6F, 0x1EE70, 0x1EE71, 0x1EE72, 0x1EE74,
	      0x1EE75, 0x1EE76, 0x1EE77, 0x1EE79, 0x1EE7A, 0x1EE7B, 0x1EE7C, 0x1EE7E,
	      0x1EE80, 0x1EE81, 0x1EE82, 0x1EE83, 0x1EE84, 0x1EE85, 0x1EE86, 0x1EE87,
	      0x1EE88, 0x1EE89, 0x1EE8B, 0x1EE8C, 0x1EE8D, 0x1EE8E, 0x1EE8F, 0x1EE90,
	      0x1EE91, 0x1EE92, 0x1EE93, 0x1EE94, 0x1EE95, 0x1EE96, 0x1EE97, 0x1EE98,
	      0x1EE99, 0x1EE9A, 0x1EE9B, 0x1EEA1, 0x1EEA2, 0x1EEA3, 0x1EEA5, 0x1EEA6,
	      0x1EEA7, 0x1EEA8, 0x1EEA9, 0x1EEAB, 0x1EEAC, 0x1EEAD, 0x1EEAE, 0x1EEAF,
	      0x1EEB0, 0x1EEB1, 0x1EEB2, 0x1EEB3, 0x1EEB4, 0x1EEB5, 0x1EEB6, 0x1EEB7,
	      0x1EEB8, 0x1EEB9, 0x1EEBA, 0x1EEBB, 0x10FFFD];

	  function determineBidi(cueDiv) {
	    var nodeStack = [],
	        text = "",
	        charCode;

	    if (!cueDiv || !cueDiv.childNodes) {
	      return "ltr";
	    }

	    function pushNodes(nodeStack, node) {
	      for (var i = node.childNodes.length - 1; i >= 0; i--) {
	        nodeStack.push(node.childNodes[i]);
	      }
	    }

	    function nextTextNode(nodeStack) {
	      if (!nodeStack || !nodeStack.length) {
	        return null;
	      }

	      var node = nodeStack.pop(),
	          text = node.textContent || node.innerText;
	      if (text) {
	        // TODO: This should match all unicode type B characters (paragraph
	        // separator characters). See issue #115.
	        var m = text.match(/^.*(\n|\r)/);
	        if (m) {
	          nodeStack.length = 0;
	          return m[0];
	        }
	        return text;
	      }
	      if (node.tagName === "ruby") {
	        return nextTextNode(nodeStack);
	      }
	      if (node.childNodes) {
	        pushNodes(nodeStack, node);
	        return nextTextNode(nodeStack);
	      }
	    }

	    pushNodes(nodeStack, cueDiv);
	    while ((text = nextTextNode(nodeStack))) {
	      for (var i = 0; i < text.length; i++) {
	        charCode = text.charCodeAt(i);
	        for (var j = 0; j < strongRTLChars.length; j++) {
	          if (strongRTLChars[j] === charCode) {
	            return "rtl";
	          }
	        }
	      }
	    }
	    return "ltr";
	  }

	  function computeLinePos(cue) {
	    if (typeof cue.line === "number" &&
	        (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {
	      return cue.line;
	    }
	    if (!cue.track || !cue.track.textTrackList ||
	        !cue.track.textTrackList.mediaElement) {
	      return -1;
	    }
	    var track = cue.track,
	        trackList = track.textTrackList,
	        count = 0;
	    for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
	      if (trackList[i].mode === "showing") {
	        count++;
	      }
	    }
	    return ++count * -1;
	  }

	  function StyleBox() {
	  }

	  // Apply styles to a div. If there is no div passed then it defaults to the
	  // div on 'this'.
	  StyleBox.prototype.applyStyles = function(styles, div) {
	    div = div || this.div;
	    for (var prop in styles) {
	      if (styles.hasOwnProperty(prop)) {
	        div.style[prop] = styles[prop];
	      }
	    }
	  };

	  StyleBox.prototype.formatStyle = function(val, unit) {
	    return val === 0 ? 0 : val + unit;
	  };

	  // Constructs the computed display state of the cue (a div). Places the div
	  // into the overlay which should be a block level element (usually a div).
	  function CueStyleBox(window, cue, styleOptions) {
	    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
	    var color = "rgba(255, 255, 255, 1)";
	    var backgroundColor = "rgba(0, 0, 0, 0.8)";

	    if (isIE8) {
	      color = "rgb(255, 255, 255)";
	      backgroundColor = "rgb(0, 0, 0)";
	    }

	    StyleBox.call(this);
	    this.cue = cue;

	    // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
	    // have inline positioning and will function as the cue background box.
	    this.cueDiv = parseContent(window, cue.text);
	    var styles = {
	      color: color,
	      backgroundColor: backgroundColor,
	      position: "relative",
	      left: 0,
	      right: 0,
	      top: 0,
	      bottom: 0,
	      display: "inline"
	    };

	    if (!isIE8) {
	      styles.writingMode = cue.vertical === "" ? "horizontal-tb"
	                                               : cue.vertical === "lr" ? "vertical-lr"
	                                                                       : "vertical-rl";
	      styles.unicodeBidi = "plaintext";
	    }
	    this.applyStyles(styles, this.cueDiv);

	    // Create an absolutely positioned div that will be used to position the cue
	    // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
	    // mirrors of them except "middle" which is "center" in CSS.
	    this.div = window.document.createElement("div");
	    styles = {
	      textAlign: cue.align === "middle" ? "center" : cue.align,
	      font: styleOptions.font,
	      whiteSpace: "pre-line",
	      position: "absolute"
	    };

	    if (!isIE8) {
	      styles.direction = determineBidi(this.cueDiv);
	      styles.writingMode = cue.vertical === "" ? "horizontal-tb"
	                                               : cue.vertical === "lr" ? "vertical-lr"
	                                                                       : "vertical-rl".
	      stylesunicodeBidi =  "plaintext";
	    }

	    this.applyStyles(styles);

	    this.div.appendChild(this.cueDiv);

	    // Calculate the distance from the reference edge of the viewport to the text
	    // position of the cue box. The reference edge will be resolved later when
	    // the box orientation styles are applied.
	    var textPos = 0;
	    switch (cue.positionAlign) {
	    case "start":
	      textPos = cue.position;
	      break;
	    case "middle":
	      textPos = cue.position - (cue.size / 2);
	      break;
	    case "end":
	      textPos = cue.position - cue.size;
	      break;
	    }

	    // Horizontal box orientation; textPos is the distance from the left edge of the
	    // area to the left edge of the box and cue.size is the distance extending to
	    // the right from there.
	    if (cue.vertical === "") {
	      this.applyStyles({
	        left:  this.formatStyle(textPos, "%"),
	        width: this.formatStyle(cue.size, "%")
	      });
	    // Vertical box orientation; textPos is the distance from the top edge of the
	    // area to the top edge of the box and cue.size is the height extending
	    // downwards from there.
	    } else {
	      this.applyStyles({
	        top: this.formatStyle(textPos, "%"),
	        height: this.formatStyle(cue.size, "%")
	      });
	    }

	    this.move = function(box) {
	      this.applyStyles({
	        top: this.formatStyle(box.top, "px"),
	        bottom: this.formatStyle(box.bottom, "px"),
	        left: this.formatStyle(box.left, "px"),
	        right: this.formatStyle(box.right, "px"),
	        height: this.formatStyle(box.height, "px"),
	        width: this.formatStyle(box.width, "px")
	      });
	    };
	  }
	  CueStyleBox.prototype = _objCreate(StyleBox.prototype);
	  CueStyleBox.prototype.constructor = CueStyleBox;

	  // Represents the co-ordinates of an Element in a way that we can easily
	  // compute things with such as if it overlaps or intersects with another Element.
	  // Can initialize it with either a StyleBox or another BoxPosition.
	  function BoxPosition(obj) {
	    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);

	    // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
	    // was passed in and we need to copy the results of 'getBoundingClientRect'
	    // as the object returned is readonly. All co-ordinate values are in reference
	    // to the viewport origin (top left).
	    var lh, height, width, top;
	    if (obj.div) {
	      height = obj.div.offsetHeight;
	      width = obj.div.offsetWidth;
	      top = obj.div.offsetTop;

	      var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&
	                  rects.getClientRects && rects.getClientRects();
	      obj = obj.div.getBoundingClientRect();
	      // In certain cases the outter div will be slightly larger then the sum of
	      // the inner div's lines. This could be due to bold text, etc, on some platforms.
	      // In this case we should get the average line height and use that. This will
	      // result in the desired behaviour.
	      lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)
	                 : 0;

	    }
	    this.left = obj.left;
	    this.right = obj.right;
	    this.top = obj.top || top;
	    this.height = obj.height || height;
	    this.bottom = obj.bottom || (top + (obj.height || height));
	    this.width = obj.width || width;
	    this.lineHeight = lh !== undefined ? lh : obj.lineHeight;

	    if (isIE8 && !this.lineHeight) {
	      this.lineHeight = 13;
	    }
	  }

	  // Move the box along a particular axis. Optionally pass in an amount to move
	  // the box. If no amount is passed then the default is the line height of the
	  // box.
	  BoxPosition.prototype.move = function(axis, toMove) {
	    toMove = toMove !== undefined ? toMove : this.lineHeight;
	    switch (axis) {
	    case "+x":
	      this.left += toMove;
	      this.right += toMove;
	      break;
	    case "-x":
	      this.left -= toMove;
	      this.right -= toMove;
	      break;
	    case "+y":
	      this.top += toMove;
	      this.bottom += toMove;
	      break;
	    case "-y":
	      this.top -= toMove;
	      this.bottom -= toMove;
	      break;
	    }
	  };

	  // Check if this box overlaps another box, b2.
	  BoxPosition.prototype.overlaps = function(b2) {
	    return this.left < b2.right &&
	           this.right > b2.left &&
	           this.top < b2.bottom &&
	           this.bottom > b2.top;
	  };

	  // Check if this box overlaps any other boxes in boxes.
	  BoxPosition.prototype.overlapsAny = function(boxes) {
	    for (var i = 0; i < boxes.length; i++) {
	      if (this.overlaps(boxes[i])) {
	        return true;
	      }
	    }
	    return false;
	  };

	  // Check if this box is within another box.
	  BoxPosition.prototype.within = function(container) {
	    return this.top >= container.top &&
	           this.bottom <= container.bottom &&
	           this.left >= container.left &&
	           this.right <= container.right;
	  };

	  // Check if this box is entirely within the container or it is overlapping
	  // on the edge opposite of the axis direction passed. For example, if "+x" is
	  // passed and the box is overlapping on the left edge of the container, then
	  // return true.
	  BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
	    switch (axis) {
	    case "+x":
	      return this.left < container.left;
	    case "-x":
	      return this.right > container.right;
	    case "+y":
	      return this.top < container.top;
	    case "-y":
	      return this.bottom > container.bottom;
	    }
	  };

	  // Find the percentage of the area that this box is overlapping with another
	  // box.
	  BoxPosition.prototype.intersectPercentage = function(b2) {
	    var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),
	        y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),
	        intersectArea = x * y;
	    return intersectArea / (this.height * this.width);
	  };

	  // Convert the positions from this box to CSS compatible positions using
	  // the reference container's positions. This has to be done because this
	  // box's positions are in reference to the viewport origin, whereas, CSS
	  // values are in referecne to their respective edges.
	  BoxPosition.prototype.toCSSCompatValues = function(reference) {
	    return {
	      top: this.top - reference.top,
	      bottom: reference.bottom - this.bottom,
	      left: this.left - reference.left,
	      right: reference.right - this.right,
	      height: this.height,
	      width: this.width
	    };
	  };

	  // Get an object that represents the box's position without anything extra.
	  // Can pass a StyleBox, HTMLElement, or another BoxPositon.
	  BoxPosition.getSimpleBoxPosition = function(obj) {
	    var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
	    var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
	    var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;

	    obj = obj.div ? obj.div.getBoundingClientRect() :
	                  obj.tagName ? obj.getBoundingClientRect() : obj;
	    var ret = {
	      left: obj.left,
	      right: obj.right,
	      top: obj.top || top,
	      height: obj.height || height,
	      bottom: obj.bottom || (top + (obj.height || height)),
	      width: obj.width || width
	    };
	    return ret;
	  };

	  // Move a StyleBox to its specified, or next best, position. The containerBox
	  // is the box that contains the StyleBox, such as a div. boxPositions are
	  // a list of other boxes that the styleBox can't overlap with.
	  function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {

	    // Find the best position for a cue box, b, on the video. The axis parameter
	    // is a list of axis, the order of which, it will move the box along. For example:
	    // Passing ["+x", "-x"] will move the box first along the x axis in the positive
	    // direction. If it doesn't find a good position for it there it will then move
	    // it along the x axis in the negative direction.
	    function findBestPosition(b, axis) {
	      var bestPosition,
	          specifiedPosition = new BoxPosition(b),
	          percentage = 1; // Highest possible so the first thing we get is better.

	      for (var i = 0; i < axis.length; i++) {
	        while (b.overlapsOppositeAxis(containerBox, axis[i]) ||
	               (b.within(containerBox) && b.overlapsAny(boxPositions))) {
	          b.move(axis[i]);
	        }
	        // We found a spot where we aren't overlapping anything. This is our
	        // best position.
	        if (b.within(containerBox)) {
	          return b;
	        }
	        var p = b.intersectPercentage(containerBox);
	        // If we're outside the container box less then we were on our last try
	        // then remember this position as the best position.
	        if (percentage > p) {
	          bestPosition = new BoxPosition(b);
	          percentage = p;
	        }
	        // Reset the box position to the specified position.
	        b = new BoxPosition(specifiedPosition);
	      }
	      return bestPosition || specifiedPosition;
	    }

	    var boxPosition = new BoxPosition(styleBox),
	        cue = styleBox.cue,
	        linePos = computeLinePos(cue),
	        axis = [];

	    // If we have a line number to align the cue to.
	    if (cue.snapToLines) {
	      var size;
	      switch (cue.vertical) {
	      case "":
	        axis = [ "+y", "-y" ];
	        size = "height";
	        break;
	      case "rl":
	        axis = [ "+x", "-x" ];
	        size = "width";
	        break;
	      case "lr":
	        axis = [ "-x", "+x" ];
	        size = "width";
	        break;
	      }

	      var step = boxPosition.lineHeight,
	          position = step * Math.round(linePos),
	          maxPosition = containerBox[size] + step,
	          initialAxis = axis[0];

	      // If the specified intial position is greater then the max position then
	      // clamp the box to the amount of steps it would take for the box to
	      // reach the max position.
	      if (Math.abs(position) > maxPosition) {
	        position = position < 0 ? -1 : 1;
	        position *= Math.ceil(maxPosition / step) * step;
	      }

	      // If computed line position returns negative then line numbers are
	      // relative to the bottom of the video instead of the top. Therefore, we
	      // need to increase our initial position by the length or width of the
	      // video, depending on the writing direction, and reverse our axis directions.
	      if (linePos < 0) {
	        position += cue.vertical === "" ? containerBox.height : containerBox.width;
	        axis = axis.reverse();
	      }

	      // Move the box to the specified position. This may not be its best
	      // position.
	      boxPosition.move(initialAxis, position);

	    } else {
	      // If we have a percentage line value for the cue.
	      var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;

	      switch (cue.lineAlign) {
	      case "middle":
	        linePos -= (calculatedPercentage / 2);
	        break;
	      case "end":
	        linePos -= calculatedPercentage;
	        break;
	      }

	      // Apply initial line position to the cue box.
	      switch (cue.vertical) {
	      case "":
	        styleBox.applyStyles({
	          top: styleBox.formatStyle(linePos, "%")
	        });
	        break;
	      case "rl":
	        styleBox.applyStyles({
	          left: styleBox.formatStyle(linePos, "%")
	        });
	        break;
	      case "lr":
	        styleBox.applyStyles({
	          right: styleBox.formatStyle(linePos, "%")
	        });
	        break;
	      }

	      axis = [ "+y", "-x", "+x", "-y" ];

	      // Get the box position again after we've applied the specified positioning
	      // to it.
	      boxPosition = new BoxPosition(styleBox);
	    }

	    var bestPosition = findBestPosition(boxPosition, axis);
	    styleBox.move(bestPosition.toCSSCompatValues(containerBox));
	  }

	  function WebVTT() {
	    // Nothing
	  }

	  // Helper to allow strings to be decoded instead of the default binary utf8 data.
	  WebVTT.StringDecoder = function() {
	    return {
	      decode: function(data) {
	        if (!data) {
	          return "";
	        }
	        if (typeof data !== "string") {
	          throw new Error("Error - expected string data.");
	        }
	        return decodeURIComponent(encodeURIComponent(data));
	      }
	    };
	  };

	  WebVTT.convertCueToDOMTree = function(window, cuetext) {
	    if (!window || !cuetext) {
	      return null;
	    }
	    return parseContent(window, cuetext);
	  };

	  var FONT_SIZE_PERCENT = 0.05;
	  var FONT_STYLE = "sans-serif";
	  var CUE_BACKGROUND_PADDING = "1.5%";

	  // Runs the processing model over the cues and regions passed to it.
	  // @param overlay A block level element (usually a div) that the computed cues
	  //                and regions will be placed into.
	  WebVTT.processCues = function(window, cues, overlay) {
	    if (!window || !cues || !overlay) {
	      return null;
	    }

	    // Remove all previous children.
	    while (overlay.firstChild) {
	      overlay.removeChild(overlay.firstChild);
	    }

	    var paddedOverlay = window.document.createElement("div");
	    paddedOverlay.style.position = "absolute";
	    paddedOverlay.style.left = "0";
	    paddedOverlay.style.right = "0";
	    paddedOverlay.style.top = "0";
	    paddedOverlay.style.bottom = "0";
	    paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
	    overlay.appendChild(paddedOverlay);

	    // Determine if we need to compute the display states of the cues. This could
	    // be the case if a cue's state has been changed since the last computation or
	    // if it has not been computed yet.
	    function shouldCompute(cues) {
	      for (var i = 0; i < cues.length; i++) {
	        if (cues[i].hasBeenReset || !cues[i].displayState) {
	          return true;
	        }
	      }
	      return false;
	    }

	    // We don't need to recompute the cues' display states. Just reuse them.
	    if (!shouldCompute(cues)) {
	      for (var i = 0; i < cues.length; i++) {
	        paddedOverlay.appendChild(cues[i].displayState);
	      }
	      return;
	    }

	    var boxPositions = [],
	        containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),
	        fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
	    var styleOptions = {
	      font: fontSize + "px " + FONT_STYLE
	    };

	    (function() {
	      var styleBox, cue;

	      for (var i = 0; i < cues.length; i++) {
	        cue = cues[i];

	        // Compute the intial position and styles of the cue div.
	        styleBox = new CueStyleBox(window, cue, styleOptions);
	        paddedOverlay.appendChild(styleBox.div);

	        // Move the cue div to it's correct line position.
	        moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);

	        // Remember the computed div so that we don't have to recompute it later
	        // if we don't have too.
	        cue.displayState = styleBox.div;

	        boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
	      }
	    })();
	  };

	  WebVTT.Parser = function(window, vttjs, decoder) {
	    if (!decoder) {
	      decoder = vttjs;
	      vttjs = {};
	    }
	    if (!vttjs) {
	      vttjs = {};
	    }

	    this.window = window;
	    this.vttjs = vttjs;
	    this.state = "INITIAL";
	    this.buffer = "";
	    this.decoder = decoder || new TextDecoder("utf8");
	    this.regionList = [];
	  };

	  WebVTT.Parser.prototype = {
	    // If the error is a ParsingError then report it to the consumer if
	    // possible. If it's not a ParsingError then throw it like normal.
	    reportOrThrowError: function(e) {
	      if (e instanceof ParsingError) {
	        this.onparsingerror && this.onparsingerror(e);
	      } else {
	        throw e;
	      }
	    },
	    parse: function (data) {
	      var self = this;

	      // If there is no data then we won't decode it, but will just try to parse
	      // whatever is in buffer already. This may occur in circumstances, for
	      // example when flush() is called.
	      if (data) {
	        // Try to decode the data that we received.
	        self.buffer += self.decoder.decode(data, {stream: true});
	      }

	      function collectNextLine() {
	        var buffer = self.buffer;
	        var pos = 0;
	        while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
	          ++pos;
	        }
	        var line = buffer.substr(0, pos);
	        // Advance the buffer early in case we fail below.
	        if (buffer[pos] === '\r') {
	          ++pos;
	        }
	        if (buffer[pos] === '\n') {
	          ++pos;
	        }
	        self.buffer = buffer.substr(pos);
	        return line;
	      }

	      // 3.4 WebVTT region and WebVTT region settings syntax
	      function parseRegion(input) {
	        var settings = new Settings();

	        parseOptions(input, function (k, v) {
	          switch (k) {
	          case "id":
	            settings.set(k, v);
	            break;
	          case "width":
	            settings.percent(k, v);
	            break;
	          case "lines":
	            settings.integer(k, v);
	            break;
	          case "regionanchor":
	          case "viewportanchor":
	            var xy = v.split(',');
	            if (xy.length !== 2) {
	              break;
	            }
	            // We have to make sure both x and y parse, so use a temporary
	            // settings object here.
	            var anchor = new Settings();
	            anchor.percent("x", xy[0]);
	            anchor.percent("y", xy[1]);
	            if (!anchor.has("x") || !anchor.has("y")) {
	              break;
	            }
	            settings.set(k + "X", anchor.get("x"));
	            settings.set(k + "Y", anchor.get("y"));
	            break;
	          case "scroll":
	            settings.alt(k, v, ["up"]);
	            break;
	          }
	        }, /=/, /\s/);

	        // Create the region, using default values for any values that were not
	        // specified.
	        if (settings.has("id")) {
	          var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
	          region.width = settings.get("width", 100);
	          region.lines = settings.get("lines", 3);
	          region.regionAnchorX = settings.get("regionanchorX", 0);
	          region.regionAnchorY = settings.get("regionanchorY", 100);
	          region.viewportAnchorX = settings.get("viewportanchorX", 0);
	          region.viewportAnchorY = settings.get("viewportanchorY", 100);
	          region.scroll = settings.get("scroll", "");
	          // Register the region.
	          self.onregion && self.onregion(region);
	          // Remember the VTTRegion for later in case we parse any VTTCues that
	          // reference it.
	          self.regionList.push({
	            id: settings.get("id"),
	            region: region
	          });
	        }
	      }

	      // 3.2 WebVTT metadata header syntax
	      function parseHeader(input) {
	        parseOptions(input, function (k, v) {
	          switch (k) {
	          case "Region":
	            // 3.3 WebVTT region metadata header syntax
	            parseRegion(v);
	            break;
	          }
	        }, /:/);
	      }

	      // 5.1 WebVTT file parsing.
	      try {
	        var line;
	        if (self.state === "INITIAL") {
	          // We can't start parsing until we have the first line.
	          if (!/\r\n|\n/.test(self.buffer)) {
	            return this;
	          }

	          line = collectNextLine();

	          var m = line.match(/^WEBVTT([ \t].*)?$/);
	          if (!m || !m[0]) {
	            throw new ParsingError(ParsingError.Errors.BadSignature);
	          }

	          self.state = "HEADER";
	        }

	        var alreadyCollectedLine = false;
	        while (self.buffer) {
	          // We can't parse a line until we have the full line.
	          if (!/\r\n|\n/.test(self.buffer)) {
	            return this;
	          }

	          if (!alreadyCollectedLine) {
	            line = collectNextLine();
	          } else {
	            alreadyCollectedLine = false;
	          }

	          switch (self.state) {
	          case "HEADER":
	            // 13-18 - Allow a header (metadata) under the WEBVTT line.
	            if (/:/.test(line)) {
	              parseHeader(line);
	            } else if (!line) {
	              // An empty line terminates the header and starts the body (cues).
	              self.state = "ID";
	            }
	            continue;
	          case "NOTE":
	            // Ignore NOTE blocks.
	            if (!line) {
	              self.state = "ID";
	            }
	            continue;
	          case "ID":
	            // Check for the start of NOTE blocks.
	            if (/^NOTE($|[ \t])/.test(line)) {
	              self.state = "NOTE";
	              break;
	            }
	            // 19-29 - Allow any number of line terminators, then initialize new cue values.
	            if (!line) {
	              continue;
	            }
	            self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
	            self.state = "CUE";
	            // 30-39 - Check if self line contains an optional identifier or timing data.
	            if (line.indexOf("-->") === -1) {
	              self.cue.id = line;
	              continue;
	            }
	            // Process line as start of a cue.
	            /*falls through*/
	          case "CUE":
	            // 40 - Collect cue timings and settings.
	            try {
	              parseCue(line, self.cue, self.regionList);
	            } catch (e) {
	              self.reportOrThrowError(e);
	              // In case of an error ignore rest of the cue.
	              self.cue = null;
	              self.state = "BADCUE";
	              continue;
	            }
	            self.state = "CUETEXT";
	            continue;
	          case "CUETEXT":
	            var hasSubstring = line.indexOf("-->") !== -1;
	            // 34 - If we have an empty line then report the cue.
	            // 35 - If we have the special substring '-->' then report the cue,
	            // but do not collect the line as we need to process the current
	            // one as a new cue.
	            if (!line || hasSubstring && (alreadyCollectedLine = true)) {
	              // We are done parsing self cue.
	              self.oncue && self.oncue(self.cue);
	              self.cue = null;
	              self.state = "ID";
	              continue;
	            }
	            if (self.cue.text) {
	              self.cue.text += "\n";
	            }
	            self.cue.text += line;
	            continue;
	          case "BADCUE": // BADCUE
	            // 54-62 - Collect and discard the remaining cue.
	            if (!line) {
	              self.state = "ID";
	            }
	            continue;
	          }
	        }
	      } catch (e) {
	        self.reportOrThrowError(e);

	        // If we are currently parsing a cue, report what we have.
	        if (self.state === "CUETEXT" && self.cue && self.oncue) {
	          self.oncue(self.cue);
	        }
	        self.cue = null;
	        // Enter BADWEBVTT state if header was not parsed correctly otherwise
	        // another exception occurred so enter BADCUE state.
	        self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
	      }
	      return this;
	    },
	    flush: function () {
	      var self = this;
	      try {
	        // Finish decoding the stream.
	        self.buffer += self.decoder.decode();
	        // Synthesize the end of the current cue or region.
	        if (self.cue || self.state === "HEADER") {
	          self.buffer += "\n\n";
	          self.parse();
	        }
	        // If we've flushed, parsed, and we're still on the INITIAL state then
	        // that means we don't have enough of the stream to parse the first
	        // line.
	        if (self.state === "INITIAL") {
	          throw new ParsingError(ParsingError.Errors.BadSignature);
	        }
	      } catch(e) {
	        self.reportOrThrowError(e);
	      }
	      self.onflush && self.onflush();
	      return this;
	    }
	  };

	  global.WebVTT = WebVTT;

	}(this, (this.vttjs || {})));


/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });var _video = __webpack_require__(470);var _video2 = _interopRequireDefault(_video);function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}var defaults = {};var onPlayerReady = function onPlayerReady(player, options) {
	  player.addClass("vjs-nle-controls");var framerate = options.framerate ? options.framerate : 24;if (options.frameControls) {
	    initControls(player, framerate);
	  }if (options.smpteTimecode) {
	    initSMPTE(player, framerate);
	  }
	};var initControls = function initControls(player, framerate) {
	  var keyDown = function keyDown(event) {
	    var keyName = event.keyCode;var frame = 1 / framerate;switch (keyName) {case 37:
	        event.preventDefault();frameReverse(player, frame);break;case 39:
	        event.preventDefault();frameForward(player, frame);break;case 32:
	        event.preventDefault();playControl(player);break;}
	  };document.addEventListener("keydown", keyDown, false);
	};var frameReverse = function frameReverse(player, frame) {
	  var currentTime = player.currentTime();if (currentTime > 0) {
	    var decrement = currentTime - frame;player.currentTime(decrement);
	  }
	};var frameForward = function frameForward(player, frame) {
	  var currentTime = player.currentTime();var duration = player.duration();if (currentTime < duration) {
	    var increment = Math.min(duration, currentTime + frame);player.currentTime(increment);
	  }
	};var playControl = function playControl(player) {
	  if (player.paused()) {
	    player.play();
	  } else {
	    player.pause();
	  }
	};var toSMPTE = function toSMPTE(currentTime, framerate) {
	  var currentFrame = currentTime * framerate;var hours = Math.floor(currentTime / 3600);var minutes = Math.floor(currentTime / 60);var seconds = parseInt(currentTime - hours * 3600 - minutes * 60);var frames = parseInt(currentFrame % framerate);var timecodeArray = [hours, minutes, seconds, frames];var processedTimecodeArray = [];timecodeArray.forEach(function (time) {
	    if (time < 10) {
	      var timeString = "0" + time;processedTimecodeArray.push(timeString);
	    } else {
	      var _timeString = time.toString();processedTimecodeArray.push(_timeString);
	    }
	  });return processedTimecodeArray.join(":");
	};var initSMPTE = function initSMPTE(player, framerate) {
	  var setCurrentTimeDisplay = function setCurrentTimeDisplay() {
	    var currentTimeDisplay = player.controlBar.progressControl.seekBar.playProgressBar.el();var currentTime = player.currentTime();currentTimeDisplay.dataset.currentTime = toSMPTE(currentTime, framerate);
	  };var setRemainingTimeDisplay = function setRemainingTimeDisplay() {
	    var currentTime = player.currentTime();var duration = player.duration();var remainingTimeDisplay = player.controlBar.remainingTimeDisplay.el();remainingTimeDisplay.innerHTML = '<div class="vjs-remaining-time-display" aria-live="off"><span class="vjs-control-text">Remaining Time</span>' + toSMPTE(currentTime, framerate) + " / " + toSMPTE(duration, framerate) + "</div>";
	  };player.on("timeupdate", setCurrentTimeDisplay);player.on("timeupdate", setRemainingTimeDisplay);
	};var nleControls = function nleControls(options) {
	  var _this = this;this.ready(function () {
	    onPlayerReady(_this, _video2.default.mergeOptions(defaults, options));
	  });
	};_video2.default.plugin("nleControls", nleControls);nleControls.VERSION = "__VERSION__";exports.default = nleControls;

/***/ }
/******/ ]);
